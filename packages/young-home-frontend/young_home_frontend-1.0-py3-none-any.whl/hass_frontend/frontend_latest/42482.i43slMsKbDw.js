import"core-js/modules/es.array.iterator.js";import"core-js/modules/es.array-buffer.detached.js";import"core-js/modules/es.array-buffer.transfer.js";import"core-js/modules/es.array-buffer.transfer-to-fixed-length.js";import"core-js/modules/es.typed-array.int16-array.js";import"core-js/modules/es.typed-array.at.js";import"core-js/modules/es.typed-array.fill.js";import"core-js/modules/es.typed-array.find-last.js";import"core-js/modules/es.typed-array.find-last-index.js";import"core-js/modules/es.typed-array.set.js";import"core-js/modules/es.typed-array.sort.js";import"core-js/modules/es.typed-array.to-reversed.js";import"core-js/modules/es.typed-array.to-sorted.js";import"core-js/modules/es.typed-array.with.js";class r extends AudioWorkletProcessor{process(r,e,s){if(r[0].length<1)return!0;const o=r[0][0],t=new Int16Array(o.length);for(let r=0;r<o.length;r++){const e=Math.max(-1,Math.min(1,o[r]));t[r]=e<0?32768*e:32767*e}return this.port.postMessage(t),!0}}registerProcessor("recorder.worklet",r);