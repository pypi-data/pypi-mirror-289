from typing import Generic, TypeVar, Iterable, Union, Sequence, List

### -------- Typing for non-generated classes ---------  ###

class Factory:
    @staticmethod
    def produce(key: Union[int, str]) -> Message: ...
    @staticmethod
    def abbrev_from_id(mgid: int) -> str: ...
    @staticmethod
    def id_from_abbrev(name: str) -> int: ...

class Message:
    def clone(self) -> Message: ...
    def clear(self) -> None: ...
    def validate(self) -> int: ...
    def set_timestamp_now(self) -> float: ...
    @property
    def msg_name(self) -> str: ...
    @property
    def msg_id(self) -> int: ...
    def serialize(self) -> bytes: ...
    def serialize_fields(self) -> bytes: ...
    def fields_equal(self, other: Message) -> bool: ...
    def __init__(self):
        self.timestamp = None  # type: float
        self.src = None  # type: int
        self.src_ent = None  # type: int
        self.dst = None  # type: int
        self.dst_ent = None  # type: int
        self.sub_id = None  # type: int

T = TypeVar('T')
class MessageList(Sequence[T]):
    def set_parent(self, parent: Message) -> None: ...
    def clear(self) -> None: ...
    @property
    def size(self) -> int: ...
    def append(self, msg: T) -> None: ...
    def set_timestamp(self, value: float) -> None: ...
    def extend(self, iterable: Iterable[T]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterable[T]: ...
    def __getitem__(self, item) -> Union[T, Iterable[T]]: ...
    def __contains__(self, item) -> bool: ...

class Packet:
    @staticmethod
    def deserialize(b: bytes) -> Message: ...
    @staticmethod
    def serialize(msg: Message) -> bytes: ...

### -------- Typing for generated bindings ---------  ###

class ControlledMode:
	RELINQUISH_HANDOFF_CTL = None  # type: int
	REQUEST_CTL = None  # type: int
	OVERRIDE_CTL = None  # type: int

class SpeedUnits:
	METERS_PS = None  # type: int
	RPM = None  # type: int
	PERCENTAGE = None  # type: int

class SystemType:
	CCU = None  # type: int
	HUMANSENSOR = None  # type: int
	UUV = None  # type: int
	USV = None  # type: int
	UAV = None  # type: int
	UGV = None  # type: int
	STATICSENSOR = None  # type: int
	MOBILESENSOR = None  # type: int
	WSN = None  # type: int

class ZUnits:
	NONE = None  # type: int
	DEPTH = None  # type: int
	ALTITUDE = None  # type: int
	HEIGHT = None  # type: int

class RSSIUnits:
	dB = None  # type: int
	PERCENTAGE = None  # type: int

class UAVType:
	FIXEDWING = None  # type: int
	COPTER = None  # type: int
	VTOL = None  # type: int

class CLoopsMask:
	NONE = None  # type: int
	PATH = None  # type: int
	TELEOPERATION = None  # type: int
	ALTITUDE = None  # type: int
	DEPTH = None  # type: int
	ROLL = None  # type: int
	PITCH = None  # type: int
	YAW = None  # type: int
	SPEED = None  # type: int
	YAW_RATE = None  # type: int
	VERTICAL_RATE = None  # type: int
	TORQUE = None  # type: int
	FORCE = None  # type: int
	VELOCITY = None  # type: int
	THROTTLE = None  # type: int
	EXTERNAL = None  # type: int
	NO_OVERRIDE = None  # type: int
	ALL = None  # type: int

class OpLimitsMask:
	MAX_DEPTH = None  # type: int
	MIN_ALT = None  # type: int
	MAX_ALT = None  # type: int
	MIN_SPEED = None  # type: int
	MAX_SPEED = None  # type: int
	MAX_VRATE = None  # type: int
	AREA = None  # type: int

class Maneuver(Message):
	pass

class ControlCommand(Message):
	pass

class RemoteData(Message):
	pass

class EntityState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def description(self) -> str: ...
	@description.setter
	def description(self, description: str) -> None: ...
	class StateEnum:
		BOOT = None
		NORMAL = None
		FAULT = None
		ERROR = None
		FAILURE = None
	class FlagsBits:
		HUMAN_INTERVENTION = None

class QueryEntityState(Message):
	pass

class EntityInfo(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def label(self) -> str: ...
	@label.setter
	def label(self, label: str) -> None: ...
	@property
	def component(self) -> str: ...
	@component.setter
	def component(self, component: str) -> None: ...
	@property
	def act_time(self) -> int: ...
	@act_time.setter
	def act_time(self, act_time: int) -> None: ...
	@property
	def deact_time(self) -> int: ...
	@deact_time.setter
	def deact_time(self, deact_time: int) -> None: ...

class QueryEntityInfo(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...

class EntityList(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def list(self) -> str: ...
	@list.setter
	def list(self, list: str) -> None: ...
	class OperationEnum:
		REPORT = None
		QUERY = None

class CpuUsage(Message):
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class TransportBindings(Message):
	@property
	def consumer(self) -> str: ...
	@consumer.setter
	def consumer(self, consumer: str) -> None: ...
	@property
	def message_id(self) -> int: ...
	@message_id.setter
	def message_id(self, message_id: int) -> None: ...

class RestartSystem(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	class RestartTypeEnum:
		DUNE = None
		SYSTEM = None

class DevCalibrationControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	class OperationEnum:
		START = None
		STOP = None
		STEP_NEXT = None
		STEP_PREVIOUS = None

class DevCalibrationState(Message):
	@property
	def total_steps(self) -> int: ...
	@total_steps.setter
	def total_steps(self, total_steps: int) -> None: ...
	@property
	def step_number(self) -> int: ...
	@step_number.setter
	def step_number(self, step_number: int) -> None: ...
	@property
	def step(self) -> str: ...
	@step.setter
	def step(self, step: str) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	class FlagsBits:
		PREVIOUS_NOT_SUPPORTED = None
		NEXT_NOT_SUPPORTED = None
		WAITING_CONTROL = None
		ERROR = None
		COMPLETED = None

class EntityActivationState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def error(self) -> str: ...
	@error.setter
	def error(self, error: str) -> None: ...
	class StateEnum:
		INACTIVE = None
		ACTIVE = None
		ACT_IP = None
		ACT_DONE = None
		ACT_FAIL = None
		DEACT_IP = None
		DEACT_DONE = None
		DEACT_FAIL = None

class QueryEntityActivationState(Message):
	pass

class VehicleOperationalLimits(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def speed_min(self) -> float: ...
	@speed_min.setter
	def speed_min(self, speed_min: float) -> None: ...
	@property
	def speed_max(self) -> float: ...
	@speed_max.setter
	def speed_max(self, speed_max: float) -> None: ...
	@property
	def long_accel(self) -> float: ...
	@long_accel.setter
	def long_accel(self, long_accel: float) -> None: ...
	@property
	def alt_max_msl(self) -> float: ...
	@alt_max_msl.setter
	def alt_max_msl(self, alt_max_msl: float) -> None: ...
	@property
	def dive_fraction_max(self) -> float: ...
	@dive_fraction_max.setter
	def dive_fraction_max(self, dive_fraction_max: float) -> None: ...
	@property
	def climb_fraction_max(self) -> float: ...
	@climb_fraction_max.setter
	def climb_fraction_max(self, climb_fraction_max: float) -> None: ...
	@property
	def bank_max(self) -> float: ...
	@bank_max.setter
	def bank_max(self, bank_max: float) -> None: ...
	@property
	def p_max(self) -> float: ...
	@p_max.setter
	def p_max(self, p_max: float) -> None: ...
	@property
	def pitch_min(self) -> float: ...
	@pitch_min.setter
	def pitch_min(self, pitch_min: float) -> None: ...
	@property
	def pitch_max(self) -> float: ...
	@pitch_max.setter
	def pitch_max(self, pitch_max: float) -> None: ...
	@property
	def q_max(self) -> float: ...
	@q_max.setter
	def q_max(self, q_max: float) -> None: ...
	@property
	def g_min(self) -> float: ...
	@g_min.setter
	def g_min(self, g_min: float) -> None: ...
	@property
	def g_max(self) -> float: ...
	@g_max.setter
	def g_max(self, g_max: float) -> None: ...
	@property
	def g_lat_max(self) -> float: ...
	@g_lat_max.setter
	def g_lat_max(self, g_lat_max: float) -> None: ...
	@property
	def rpm_min(self) -> float: ...
	@rpm_min.setter
	def rpm_min(self, rpm_min: float) -> None: ...
	@property
	def rpm_max(self) -> float: ...
	@rpm_max.setter
	def rpm_max(self, rpm_max: float) -> None: ...
	@property
	def rpm_rate_max(self) -> float: ...
	@rpm_rate_max.setter
	def rpm_rate_max(self, rpm_rate_max: float) -> None: ...
	class ActionOnTheVehicleOperationalLimitsEnum:
		REQUEST = None
		SET = None
		REPORT = None

class MsgList(Message):
	@property
	def msgs(self) -> MessageList[None]: ...
	@msgs.setter
	def msgs(self, msgs: MessageList[None]) -> None: ...

class SimulatedState(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height(self) -> float: ...
	@height.setter
	def height(self, height: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def u(self) -> float: ...
	@u.setter
	def u(self, u: float) -> None: ...
	@property
	def v(self) -> float: ...
	@v.setter
	def v(self, v: float) -> None: ...
	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, w: float) -> None: ...
	@property
	def p(self) -> float: ...
	@p.setter
	def p(self, p: float) -> None: ...
	@property
	def q(self) -> float: ...
	@q.setter
	def q(self, q: float) -> None: ...
	@property
	def r(self) -> float: ...
	@r.setter
	def r(self, r: float) -> None: ...
	@property
	def svx(self) -> float: ...
	@svx.setter
	def svx(self, svx: float) -> None: ...
	@property
	def svy(self) -> float: ...
	@svy.setter
	def svy(self, svy: float) -> None: ...
	@property
	def svz(self) -> float: ...
	@svz.setter
	def svz(self, svz: float) -> None: ...

class LeakSimulation(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def entities(self) -> str: ...
	@entities.setter
	def entities(self, entities: str) -> None: ...
	class OperationEnum:
		OFF = None
		ON = None

class UASimulation(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def speed(self) -> int: ...
	@speed.setter
	def speed(self, speed: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...
	class TypeEnum:
		DATA = None
		PING = None
		PING_REPLY = None

class DynamicsSimParam(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def tas2acc_pgain(self) -> float: ...
	@tas2acc_pgain.setter
	def tas2acc_pgain(self, tas2acc_pgain: float) -> None: ...
	@property
	def bank2p_pgain(self) -> float: ...
	@bank2p_pgain.setter
	def bank2p_pgain(self, bank2p_pgain: float) -> None: ...
	class ActionOnTheVehicleSimulationParametersEnum:
		REQUEST = None
		SET = None
		REPORT = None

class StorageUsage(Message):
	@property
	def available(self) -> int: ...
	@available.setter
	def available(self, available: int) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class CacheControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def snapshot(self) -> str: ...
	@snapshot.setter
	def snapshot(self, snapshot: str) -> None: ...
	@property
	def message(self) -> Message: ...
	@message.setter
	def message(self, message: Message) -> None: ...
	class ControlOperationEnum:
		STORE = None
		LOAD = None
		CLEAR = None
		COPY = None
		COPY_COMPLETE = None

class LoggingControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	class ControlOperationEnum:
		REQUEST_START = None
		STARTED = None
		REQUEST_STOP = None
		STOPPED = None
		REQUEST_CURRENT_NAME = None
		CURRENT_NAME = None

class LogBookEntry(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def htime(self) -> float: ...
	@htime.setter
	def htime(self, htime: float) -> None: ...
	@property
	def context(self) -> str: ...
	@context.setter
	def context(self, context: str) -> None: ...
	@property
	def text(self) -> str: ...
	@text.setter
	def text(self, text: str) -> None: ...
	class TypeEnum:
		INFO = None
		WARNING = None
		ERROR = None
		CRITICAL = None
		DEBUG = None

class ReplayControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def file(self) -> str: ...
	@file.setter
	def file(self, file: str) -> None: ...
	class OperationEnum:
		START = None
		STOP = None
		PAUSE = None
		RESUME = None

class ClockControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def clock(self) -> float: ...
	@clock.setter
	def clock(self, clock: float) -> None: ...
	@property
	def tz(self) -> int: ...
	@tz.setter
	def tz(self, tz: int) -> None: ...
	class OperationEnum:
		SYNC_EXEC = None
		SYNC_REQUEST = None
		SYNC_STARTED = None
		SYNC_DONE = None
		SET_TZ = None
		SET_TZ_DONE = None

class HistoricCTD(Message):
	@property
	def conductivity(self) -> float: ...
	@conductivity.setter
	def conductivity(self, conductivity: float) -> None: ...
	@property
	def temperature(self) -> float: ...
	@temperature.setter
	def temperature(self, temperature: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...

class HistoricTelemetry(Message):
	@property
	def altitude(self) -> float: ...
	@altitude.setter
	def altitude(self, altitude: float) -> None: ...
	@property
	def roll(self) -> int: ...
	@roll.setter
	def roll(self, roll: int) -> None: ...
	@property
	def pitch(self) -> int: ...
	@pitch.setter
	def pitch(self, pitch: int) -> None: ...
	@property
	def yaw(self) -> int: ...
	@yaw.setter
	def yaw(self, yaw: int) -> None: ...
	@property
	def speed(self) -> int: ...
	@speed.setter
	def speed(self, speed: int) -> None: ...

class HistoricSonarData(Message):
	@property
	def altitude(self) -> float: ...
	@altitude.setter
	def altitude(self, altitude: float) -> None: ...
	@property
	def width(self) -> float: ...
	@width.setter
	def width(self, width: float) -> None: ...
	@property
	def length(self) -> float: ...
	@length.setter
	def length(self, length: float) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def pxl(self) -> int: ...
	@pxl.setter
	def pxl(self, pxl: int) -> None: ...
	@property
	def encoding(self) -> int: ...
	@encoding.setter
	def encoding(self, encoding: int) -> None: ...
	@property
	def sonar_data(self) -> bytes: ...
	@sonar_data.setter
	def sonar_data(self, sonar_data: bytes) -> None: ...
	class EncodingEnum:
		ONE_BYTE_PER_PIXEL = None
		PNG = None
		JPEG = None

class HistoricEvent(Message):
	@property
	def text(self) -> str: ...
	@text.setter
	def text(self, text: str) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	class EventTypeEnum:
		INFO = None
		ERROR = None

class ProfileSample(Message):
	@property
	def depth(self) -> int: ...
	@depth.setter
	def depth(self, depth: int) -> None: ...
	@property
	def avg(self) -> float: ...
	@avg.setter
	def avg(self, avg: float) -> None: ...

class Heartbeat(Message):
	pass

class Announce(Message):
	@property
	def sys_name(self) -> str: ...
	@sys_name.setter
	def sys_name(self, sys_name: str) -> None: ...
	@property
	def sys_type(self) -> int: ...
	@sys_type.setter
	def sys_type(self, sys_type: int) -> None: ...
	@property
	def owner(self) -> int: ...
	@owner.setter
	def owner(self, owner: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height(self) -> float: ...
	@height.setter
	def height(self, height: float) -> None: ...
	@property
	def services(self) -> str: ...
	@services.setter
	def services(self, services: str) -> None: ...

class AnnounceService(Message):
	@property
	def service(self) -> str: ...
	@service.setter
	def service(self, service: str) -> None: ...
	@property
	def service_type(self) -> int: ...
	@service_type.setter
	def service_type(self, service_type: int) -> None: ...
	class ServicetypeBits:
		EXTERNAL = None
		LOCAL = None

class RSSI(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class VSWR(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class LinkLevel(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Sms(Message):
	@property
	def number(self) -> str: ...
	@number.setter
	def number(self, number: str) -> None: ...
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def contents(self) -> str: ...
	@contents.setter
	def contents(self, contents: str) -> None: ...

class SmsTx(Message):
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class SmsRx(Message):
	@property
	def source(self) -> str: ...
	@source.setter
	def source(self, source: str) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class SmsState(Message):
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def error(self) -> str: ...
	@error.setter
	def error(self, error: str) -> None: ...
	class StateEnum:
		ACCEPTED = None
		REJECTED = None
		INTERRUPTED = None
		COMPLETED = None
		IDLE = None
		TRANSMITTING = None
		RECEIVING = None

class TextMessage(Message):
	@property
	def origin(self) -> str: ...
	@origin.setter
	def origin(self, origin: str) -> None: ...
	@property
	def text(self) -> str: ...
	@text.setter
	def text(self, text: str) -> None: ...

class IridiumMsgRx(Message):
	@property
	def origin(self) -> str: ...
	@origin.setter
	def origin(self, origin: str) -> None: ...
	@property
	def htime(self) -> float: ...
	@htime.setter
	def htime(self, htime: float) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class IridiumMsgTx(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def ttl(self) -> int: ...
	@ttl.setter
	def ttl(self, ttl: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class IridiumTxStatus(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	@property
	def text(self) -> str: ...
	@text.setter
	def text(self, text: str) -> None: ...
	class StatusCodeEnum:
		OK = None
		ERROR = None
		QUEUED = None
		TRANSMIT = None
		EXPIRED = None
		EMPTY = None

class GroupMembershipState(Message):
	@property
	def group_name(self) -> str: ...
	@group_name.setter
	def group_name(self, group_name: str) -> None: ...
	@property
	def links(self) -> int: ...
	@links.setter
	def links(self, links: int) -> None: ...

class SystemGroup(Message):
	@property
	def groupname(self) -> str: ...
	@groupname.setter
	def groupname(self, groupname: str) -> None: ...
	@property
	def action(self) -> int: ...
	@action.setter
	def action(self, action: int) -> None: ...
	@property
	def grouplist(self) -> str: ...
	@grouplist.setter
	def grouplist(self, grouplist: str) -> None: ...
	class GroupListActionEnum:
		Dis = None
		Set = None
		Req = None
		Chg = None
		Rep = None
		Frc = None

class LinkLatency(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def sys_src(self) -> int: ...
	@sys_src.setter
	def sys_src(self, sys_src: int) -> None: ...

class ExtendedRSSI(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def units(self) -> int: ...
	@units.setter
	def units(self, units: int) -> None: ...

class CompressedHistory(Message):
	@property
	def base_lat(self) -> float: ...
	@base_lat.setter
	def base_lat(self, base_lat: float) -> None: ...
	@property
	def base_lon(self) -> float: ...
	@base_lon.setter
	def base_lon(self, base_lon: float) -> None: ...
	@property
	def base_time(self) -> float: ...
	@base_time.setter
	def base_time(self, base_time: float) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class HistoricSample(RemoteData):
	@property
	def sys_id(self) -> int: ...
	@sys_id.setter
	def sys_id(self, sys_id: int) -> None: ...
	@property
	def priority(self) -> int: ...
	@priority.setter
	def priority(self, priority: int) -> None: ...
	@property
	def x(self) -> int: ...
	@x.setter
	def x(self, x: int) -> None: ...
	@property
	def y(self) -> int: ...
	@y.setter
	def y(self, y: int) -> None: ...
	@property
	def z(self) -> int: ...
	@z.setter
	def z(self, z: int) -> None: ...
	@property
	def t(self) -> int: ...
	@t.setter
	def t(self, t: int) -> None: ...
	@property
	def sample(self) -> Message: ...
	@sample.setter
	def sample(self, sample: Message) -> None: ...

class RemoteCommand(RemoteData):
	@property
	def original_source(self) -> int: ...
	@original_source.setter
	def original_source(self, original_source: int) -> None: ...
	@property
	def destination(self) -> int: ...
	@destination.setter
	def destination(self, destination: int) -> None: ...
	@property
	def timeout(self) -> float: ...
	@timeout.setter
	def timeout(self, timeout: float) -> None: ...
	@property
	def cmd(self) -> Message: ...
	@cmd.setter
	def cmd(self, cmd: Message) -> None: ...

class CommSystemsQuery(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def comm_interface(self) -> int: ...
	@comm_interface.setter
	def comm_interface(self, comm_interface: int) -> None: ...
	@property
	def model(self) -> int: ...
	@model.setter
	def model(self, model: int) -> None: ...
	@property
	def list(self) -> str: ...
	@list.setter
	def list(self, list: str) -> None: ...
	class TypeBits:
		QUERY = None
		REPLY = None
	class CommunicationInterfaceBits:
		ACOUSTIC = None
		SATELLITE = None
		GSM = None
		MOBILE = None
		RADIO = None
	class ModelEnum:
		UNKNOWN = None
		M3DR = None
		RDFXXXXPTP = None

class TelemetryMsg(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def ttl(self) -> int: ...
	@ttl.setter
	def ttl(self, ttl: int) -> None: ...
	@property
	def code(self) -> int: ...
	@code.setter
	def code(self, code: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def source(self) -> str: ...
	@source.setter
	def source(self, source: str) -> None: ...
	@property
	def acknowledge(self) -> int: ...
	@acknowledge.setter
	def acknowledge(self, acknowledge: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...
	class TypeEnum:
		TX = None
		RX = None
		TXSTATUS = None
	class CodeEnum:
		CODE_UNK = None
		CODE_REPORT = None
		CODE_IMC = None
		CODE_RAW = None
	class AcknowledgeBits:
		NAK = None
		AK = None
	class StatusEnum:
		NONE = None
		DONE = None
		FAILED = None
		QUEUED = None
		TRANSMIT = None
		EXPIRED = None
		EMPTY = None
		INV_ADDR = None
		INV_SIZE = None

class LblRange(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...

class LblBeacon(Message):
	@property
	def beacon(self) -> str: ...
	@beacon.setter
	def beacon(self, beacon: str) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...
	@property
	def query_channel(self) -> int: ...
	@query_channel.setter
	def query_channel(self, query_channel: int) -> None: ...
	@property
	def reply_channel(self) -> int: ...
	@reply_channel.setter
	def reply_channel(self, reply_channel: int) -> None: ...
	@property
	def transponder_delay(self) -> int: ...
	@transponder_delay.setter
	def transponder_delay(self, transponder_delay: int) -> None: ...

class AcousticMessage(Message):
	@property
	def message(self) -> Message: ...
	@message.setter
	def message(self, message: Message) -> None: ...

class SimAcousticMessage(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...
	@property
	def sentence(self) -> str: ...
	@sentence.setter
	def sentence(self, sentence: str) -> None: ...
	@property
	def txtime(self) -> float: ...
	@txtime.setter
	def txtime(self, txtime: float) -> None: ...
	@property
	def modem_type(self) -> str: ...
	@modem_type.setter
	def modem_type(self, modem_type: str) -> None: ...
	@property
	def sys_src(self) -> str: ...
	@sys_src.setter
	def sys_src(self, sys_src: str) -> None: ...
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def sys_dst(self) -> str: ...
	@sys_dst.setter
	def sys_dst(self, sys_dst: str) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...
	class FlagsBits:
		ACK = None
		DELAYED = None
		REPLY = None

class AcousticOperation(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def system(self) -> str: ...
	@system.setter
	def system(self, system: str) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...
	@property
	def msg(self) -> Message: ...
	@msg.setter
	def msg(self, msg: Message) -> None: ...
	class OperationEnum:
		ABORT = None
		ABORT_IP = None
		ABORT_TIMEOUT = None
		ABORT_ACKED = None
		RANGE = None
		RANGE_IP = None
		RANGE_TIMEOUT = None
		RANGE_RECVED = None
		BUSY = None
		UNSUPPORTED = None
		NO_TXD = None
		MSG = None
		MSG_QUEUED = None
		MSG_IP = None
		MSG_DONE = None
		MSG_FAILURE = None
		MSG_SHORT = None
		REVERSE_RANGE = None
		FORCED_ABORT = None

class AcousticSystemsQuery(Message):
	pass

class AcousticSystems(Message):
	@property
	def list(self) -> str: ...
	@list.setter
	def list(self, list: str) -> None: ...

class AcousticLink(Message):
	@property
	def peer(self) -> str: ...
	@peer.setter
	def peer(self, peer: str) -> None: ...
	@property
	def rssi(self) -> float: ...
	@rssi.setter
	def rssi(self, rssi: float) -> None: ...
	@property
	def integrity(self) -> int: ...
	@integrity.setter
	def integrity(self, integrity: int) -> None: ...

class AcousticRequest(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def timeout(self) -> float: ...
	@timeout.setter
	def timeout(self, timeout: float) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def msg(self) -> Message: ...
	@msg.setter
	def msg(self, msg: Message) -> None: ...
	class TypeEnum:
		ABORT = None
		RANGE = None
		REVERSE_RANGE = None
		MSG = None
		RAW = None

class AcousticStatus(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...
	class TypeEnum:
		ABORT = None
		RANGE = None
		REVERSE_RANGE = None
		MSG = None
		RAW = None
	class StatusEnum:
		QUEUED = None
		IN_PROGRESS = None
		SENT = None
		RANGE_RECEIVED = None
		DELIVERED = None
		BUSY = None
		INPUT_FAILURE = None
		ERROR = None
		UNSUPPORTED = None

class AcousticRelease(Message):
	@property
	def system(self) -> str: ...
	@system.setter
	def system(self, system: str) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	class OperationEnum:
		OPEN = None
		CLOSE = None

class Rpm(Message):
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class Voltage(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Current(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class GpsFix(Message):
	@property
	def validity(self) -> int: ...
	@validity.setter
	def validity(self, validity: int) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def utc_year(self) -> int: ...
	@utc_year.setter
	def utc_year(self, utc_year: int) -> None: ...
	@property
	def utc_month(self) -> int: ...
	@utc_month.setter
	def utc_month(self, utc_month: int) -> None: ...
	@property
	def utc_day(self) -> int: ...
	@utc_day.setter
	def utc_day(self, utc_day: int) -> None: ...
	@property
	def utc_time(self) -> float: ...
	@utc_time.setter
	def utc_time(self, utc_time: float) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height(self) -> float: ...
	@height.setter
	def height(self, height: float) -> None: ...
	@property
	def satellites(self) -> int: ...
	@satellites.setter
	def satellites(self, satellites: int) -> None: ...
	@property
	def cog(self) -> float: ...
	@cog.setter
	def cog(self, cog: float) -> None: ...
	@property
	def sog(self) -> float: ...
	@sog.setter
	def sog(self, sog: float) -> None: ...
	@property
	def hdop(self) -> float: ...
	@hdop.setter
	def hdop(self, hdop: float) -> None: ...
	@property
	def vdop(self) -> float: ...
	@vdop.setter
	def vdop(self, vdop: float) -> None: ...
	@property
	def hacc(self) -> float: ...
	@hacc.setter
	def hacc(self, hacc: float) -> None: ...
	@property
	def vacc(self) -> float: ...
	@vacc.setter
	def vacc(self, vacc: float) -> None: ...
	class ValidityBits:
		VALID_DATE = None
		VALID_TIME = None
		VALID_POS = None
		VALID_COG = None
		VALID_SOG = None
		VALID_HACC = None
		VALID_VACC = None
		VALID_HDOP = None
		VALID_VDOP = None
	class TypeEnum:
		STANDALONE = None
		DIFFERENTIAL = None
		DEAD_RECKONING = None
		MANUAL_INPUT = None
		SIMULATION = None

class EulerAngles(Message):
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def psi_magnetic(self) -> float: ...
	@psi_magnetic.setter
	def psi_magnetic(self, psi_magnetic: float) -> None: ...

class EulerAnglesDelta(Message):
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def timestep(self) -> float: ...
	@timestep.setter
	def timestep(self, timestep: float) -> None: ...

class AngularVelocity(Message):
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class Acceleration(Message):
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class MagneticField(Message):
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class GroundVelocity(Message):
	@property
	def validity(self) -> int: ...
	@validity.setter
	def validity(self, validity: int) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	class ValidityBits:
		VEL_X = None
		VEL_Y = None
		VEL_Z = None

class WaterVelocity(Message):
	@property
	def validity(self) -> int: ...
	@validity.setter
	def validity(self, validity: int) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	class ValidityBits:
		VEL_X = None
		VEL_Y = None
		VEL_Z = None

class VelocityDelta(Message):
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class Temperature(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Pressure(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Depth(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DepthOffset(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class SoundSpeed(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class WaterDensity(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Conductivity(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Salinity(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class WindSpeed(Message):
	@property
	def direction(self) -> float: ...
	@direction.setter
	def direction(self, direction: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def turbulence(self) -> float: ...
	@turbulence.setter
	def turbulence(self, turbulence: float) -> None: ...

class RelativeHumidity(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DevDataText(Message):
	@property
	def value(self) -> str: ...
	@value.setter
	def value(self, value: str) -> None: ...

class DevDataBinary(Message):
	@property
	def value(self) -> bytes: ...
	@value.setter
	def value(self, value: bytes) -> None: ...

class Force(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Pulse(Message):
	pass

class PulseDetectionControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	class OperationEnum:
		OFF = None
		ON = None

class FuelLevel(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def confidence(self) -> float: ...
	@confidence.setter
	def confidence(self, confidence: float) -> None: ...
	@property
	def opmodes(self) -> str: ...
	@opmodes.setter
	def opmodes(self, opmodes: str) -> None: ...

class GpsNavData(Message):
	@property
	def itow(self) -> int: ...
	@itow.setter
	def itow(self, itow: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height_ell(self) -> float: ...
	@height_ell.setter
	def height_ell(self, height_ell: float) -> None: ...
	@property
	def height_sea(self) -> float: ...
	@height_sea.setter
	def height_sea(self, height_sea: float) -> None: ...
	@property
	def hacc(self) -> float: ...
	@hacc.setter
	def hacc(self, hacc: float) -> None: ...
	@property
	def vacc(self) -> float: ...
	@vacc.setter
	def vacc(self, vacc: float) -> None: ...
	@property
	def vel_n(self) -> float: ...
	@vel_n.setter
	def vel_n(self, vel_n: float) -> None: ...
	@property
	def vel_e(self) -> float: ...
	@vel_e.setter
	def vel_e(self, vel_e: float) -> None: ...
	@property
	def vel_d(self) -> float: ...
	@vel_d.setter
	def vel_d(self, vel_d: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def gspeed(self) -> float: ...
	@gspeed.setter
	def gspeed(self, gspeed: float) -> None: ...
	@property
	def heading(self) -> float: ...
	@heading.setter
	def heading(self, heading: float) -> None: ...
	@property
	def sacc(self) -> float: ...
	@sacc.setter
	def sacc(self, sacc: float) -> None: ...
	@property
	def cacc(self) -> float: ...
	@cacc.setter
	def cacc(self, cacc: float) -> None: ...

class ServoPosition(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DeviceState(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...

class BeamConfig(Message):
	@property
	def beam_width(self) -> float: ...
	@beam_width.setter
	def beam_width(self, beam_width: float) -> None: ...
	@property
	def beam_height(self) -> float: ...
	@beam_height.setter
	def beam_height(self, beam_height: float) -> None: ...

class DataSanity(Message):
	@property
	def sane(self) -> int: ...
	@sane.setter
	def sane(self, sane: int) -> None: ...
	class SanityEnum:
		SANE = None
		NOT_SANE = None

class RhodamineDye(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class CrudeOil(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class FineOil(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Turbidity(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Chlorophyll(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Fluorescein(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Phycocyanin(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Phycoerythrin(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class GpsFixRtk(Message):
	@property
	def validity(self) -> int: ...
	@validity.setter
	def validity(self, validity: int) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def tow(self) -> int: ...
	@tow.setter
	def tow(self, tow: int) -> None: ...
	@property
	def base_lat(self) -> float: ...
	@base_lat.setter
	def base_lat(self, base_lat: float) -> None: ...
	@property
	def base_lon(self) -> float: ...
	@base_lon.setter
	def base_lon(self, base_lon: float) -> None: ...
	@property
	def base_height(self) -> float: ...
	@base_height.setter
	def base_height(self, base_height: float) -> None: ...
	@property
	def n(self) -> float: ...
	@n.setter
	def n(self, n: float) -> None: ...
	@property
	def e(self) -> float: ...
	@e.setter
	def e(self, e: float) -> None: ...
	@property
	def d(self) -> float: ...
	@d.setter
	def d(self, d: float) -> None: ...
	@property
	def v_n(self) -> float: ...
	@v_n.setter
	def v_n(self, v_n: float) -> None: ...
	@property
	def v_e(self) -> float: ...
	@v_e.setter
	def v_e(self, v_e: float) -> None: ...
	@property
	def v_d(self) -> float: ...
	@v_d.setter
	def v_d(self, v_d: float) -> None: ...
	@property
	def satellites(self) -> int: ...
	@satellites.setter
	def satellites(self, satellites: int) -> None: ...
	@property
	def iar_hyp(self) -> int: ...
	@iar_hyp.setter
	def iar_hyp(self, iar_hyp: int) -> None: ...
	@property
	def iar_ratio(self) -> float: ...
	@iar_ratio.setter
	def iar_ratio(self, iar_ratio: float) -> None: ...
	class ValidityBits:
		VALID_TIME = None
		VALID_BASE = None
		VALID_POS = None
		VALID_VEL = None
	class TypeEnum:
		NONE = None
		OBS = None
		FLOAT = None
		FIXED = None

class DissolvedOxygen(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class AirSaturation(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Throttle(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class PH(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Redox(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class CameraZoom(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def zoom(self) -> int: ...
	@zoom.setter
	def zoom(self, zoom: int) -> None: ...
	@property
	def action(self) -> int: ...
	@action.setter
	def action(self, action: int) -> None: ...
	class ActionEnum:
		ZOOM_RESET = None
		ZOOM_IN = None
		ZOOM_OUT = None
		ZOOM_STOP = None

class SetThrusterActuation(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class SetServoPosition(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class SetControlSurfaceDeflection(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def angle(self) -> float: ...
	@angle.setter
	def angle(self, angle: float) -> None: ...

class RemoteActionsRequest(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def actions(self) -> str: ...
	@actions.setter
	def actions(self, actions: str) -> None: ...
	class OperationEnum:
		REPORT = None
		QUERY = None

class RemoteActions(Message):
	@property
	def actions(self) -> str: ...
	@actions.setter
	def actions(self, actions: str) -> None: ...

class ButtonEvent(Message):
	@property
	def button(self) -> int: ...
	@button.setter
	def button(self, button: int) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class LcdControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def text(self) -> str: ...
	@text.setter
	def text(self, text: str) -> None: ...
	class OperationEnum:
		TURN_OFF = None
		TURN_ON = None
		CLEAR = None
		WRITE0 = None
		WRITE1 = None

class PowerOperation(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def time_remain(self) -> float: ...
	@time_remain.setter
	def time_remain(self, time_remain: float) -> None: ...
	@property
	def sched_time(self) -> float: ...
	@sched_time.setter
	def sched_time(self, sched_time: float) -> None: ...
	class OperationEnum:
		PWR_DOWN = None
		PWR_DOWN_IP = None
		PWR_DOWN_ABORTED = None
		SCHED_PWR_DOWN = None
		PWR_UP = None
		PWR_UP_IP = None
		SCHED_PWR_UP = None

class PowerChannelControl(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def sched_time(self) -> float: ...
	@sched_time.setter
	def sched_time(self, sched_time: float) -> None: ...
	class OperationEnum:
		TURN_OFF = None
		TURN_ON = None
		TOGGLE = None
		SCHED_ON = None
		SCHED_OFF = None
		SCHED_RESET = None
		SAVE = None
		RESTART = None

class QueryPowerChannelState(Message):
	pass

class PowerChannelState(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	class StateEnum:
		OFF = None
		ON = None

class LedBrightness(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class QueryLedBrightness(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...

class SetLedBrightness(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class SetPWM(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def period(self) -> int: ...
	@period.setter
	def period(self, period: int) -> None: ...
	@property
	def duty_cycle(self) -> int: ...
	@duty_cycle.setter
	def duty_cycle(self, duty_cycle: int) -> None: ...

class PWM(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def period(self) -> int: ...
	@period.setter
	def period(self, period: int) -> None: ...
	@property
	def duty_cycle(self) -> int: ...
	@duty_cycle.setter
	def duty_cycle(self, duty_cycle: int) -> None: ...

class EstimatedState(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height(self) -> float: ...
	@height.setter
	def height(self, height: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def u(self) -> float: ...
	@u.setter
	def u(self, u: float) -> None: ...
	@property
	def v(self) -> float: ...
	@v.setter
	def v(self, v: float) -> None: ...
	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, w: float) -> None: ...
	@property
	def vx(self) -> float: ...
	@vx.setter
	def vx(self, vx: float) -> None: ...
	@property
	def vy(self) -> float: ...
	@vy.setter
	def vy(self, vy: float) -> None: ...
	@property
	def vz(self) -> float: ...
	@vz.setter
	def vz(self, vz: float) -> None: ...
	@property
	def p(self) -> float: ...
	@p.setter
	def p(self, p: float) -> None: ...
	@property
	def q(self) -> float: ...
	@q.setter
	def q(self, q: float) -> None: ...
	@property
	def r(self) -> float: ...
	@r.setter
	def r(self, r: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...
	@property
	def alt(self) -> float: ...
	@alt.setter
	def alt(self, alt: float) -> None: ...

class EstimatedStreamVelocity(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class IndicatedSpeed(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class TrueSpeed(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class NavigationUncertainty(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def p(self) -> float: ...
	@p.setter
	def p(self, p: float) -> None: ...
	@property
	def q(self) -> float: ...
	@q.setter
	def q(self, q: float) -> None: ...
	@property
	def r(self) -> float: ...
	@r.setter
	def r(self, r: float) -> None: ...
	@property
	def u(self) -> float: ...
	@u.setter
	def u(self, u: float) -> None: ...
	@property
	def v(self) -> float: ...
	@v.setter
	def v(self, v: float) -> None: ...
	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, w: float) -> None: ...
	@property
	def bias_psi(self) -> float: ...
	@bias_psi.setter
	def bias_psi(self, bias_psi: float) -> None: ...
	@property
	def bias_r(self) -> float: ...
	@bias_r.setter
	def bias_r(self, bias_r: float) -> None: ...

class NavigationData(Message):
	@property
	def bias_psi(self) -> float: ...
	@bias_psi.setter
	def bias_psi(self, bias_psi: float) -> None: ...
	@property
	def bias_r(self) -> float: ...
	@bias_r.setter
	def bias_r(self, bias_r: float) -> None: ...
	@property
	def cog(self) -> float: ...
	@cog.setter
	def cog(self, cog: float) -> None: ...
	@property
	def cyaw(self) -> float: ...
	@cyaw.setter
	def cyaw(self, cyaw: float) -> None: ...
	@property
	def lbl_rej_level(self) -> float: ...
	@lbl_rej_level.setter
	def lbl_rej_level(self, lbl_rej_level: float) -> None: ...
	@property
	def gps_rej_level(self) -> float: ...
	@gps_rej_level.setter
	def gps_rej_level(self, gps_rej_level: float) -> None: ...
	@property
	def custom_x(self) -> float: ...
	@custom_x.setter
	def custom_x(self, custom_x: float) -> None: ...
	@property
	def custom_y(self) -> float: ...
	@custom_y.setter
	def custom_y(self, custom_y: float) -> None: ...
	@property
	def custom_z(self) -> float: ...
	@custom_z.setter
	def custom_z(self, custom_z: float) -> None: ...

class GpsFixRejection(Message):
	@property
	def utc_time(self) -> float: ...
	@utc_time.setter
	def utc_time(self, utc_time: float) -> None: ...
	@property
	def reason(self) -> int: ...
	@reason.setter
	def reason(self, reason: int) -> None: ...
	class ReasonEnum:
		ABOVE_THRESHOLD = None
		INVALID = None
		ABOVE_MAX_HDOP = None
		ABOVE_MAX_HACC = None
		LOST_VAL_BIT = None

class LblRangeAcceptance(Message):
	@property
	def id(self) -> int: ...
	@id.setter
	def id(self, id: int) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...
	@property
	def acceptance(self) -> int: ...
	@acceptance.setter
	def acceptance(self, acceptance: int) -> None: ...
	class AcceptanceEnum:
		ACCEPTED = None
		ABOVE_THRESHOLD = None
		SINGULAR = None
		NO_INFO = None
		AT_SURFACE = None

class DvlRejection(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def reason(self) -> int: ...
	@reason.setter
	def reason(self, reason: int) -> None: ...
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def timestep(self) -> float: ...
	@timestep.setter
	def timestep(self, timestep: float) -> None: ...
	class TypeOfVelocityBits:
		GV = None
		WV = None
	class ReasonEnum:
		INNOV_THRESHOLD_X = None
		INNOV_THRESHOLD_Y = None
		ABS_THRESHOLD_X = None
		ABS_THRESHOLD_Y = None

class AlignmentState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	class StateEnum:
		NOT_ALIGNED = None
		ALIGNED = None
		NOT_SUPPORTED = None
		ALIGNING = None
		WRONG_MEDIUM = None
		COARSE_ALIGNMENT = None
		FINE_ALIGNMENT = None
		SYSTEM_READY = None

class GroupStreamVelocity(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class Airflow(Message):
	@property
	def va(self) -> float: ...
	@va.setter
	def va(self, va: float) -> None: ...
	@property
	def aoa(self) -> float: ...
	@aoa.setter
	def aoa(self, aoa: float) -> None: ...
	@property
	def ssa(self) -> float: ...
	@ssa.setter
	def ssa(self, ssa: float) -> None: ...

class DesiredHeading(ControlCommand):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DesiredZ(ControlCommand):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...

class DesiredSpeed(ControlCommand):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...

class DesiredRoll(ControlCommand):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DesiredPitch(ControlCommand):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DesiredVerticalRate(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DesiredPath(ControlCommand):
	@property
	def path_ref(self) -> int: ...
	@path_ref.setter
	def path_ref(self, path_ref: int) -> None: ...
	@property
	def start_lat(self) -> float: ...
	@start_lat.setter
	def start_lat(self, start_lat: float) -> None: ...
	@property
	def start_lon(self) -> float: ...
	@start_lon.setter
	def start_lon(self, start_lon: float) -> None: ...
	@property
	def start_z(self) -> float: ...
	@start_z.setter
	def start_z(self, start_z: float) -> None: ...
	@property
	def start_z_units(self) -> int: ...
	@start_z_units.setter
	def start_z_units(self, start_z_units: int) -> None: ...
	@property
	def end_lat(self) -> float: ...
	@end_lat.setter
	def end_lat(self, end_lat: float) -> None: ...
	@property
	def end_lon(self) -> float: ...
	@end_lon.setter
	def end_lon(self, end_lon: float) -> None: ...
	@property
	def end_z(self) -> float: ...
	@end_z.setter
	def end_z(self, end_z: float) -> None: ...
	@property
	def end_z_units(self) -> int: ...
	@end_z_units.setter
	def end_z_units(self, end_z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def lradius(self) -> float: ...
	@lradius.setter
	def lradius(self, lradius: float) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	class FlagsBits:
		START = None
		DIRECT = None
		NO_Z = None
		_3DTRACK = None
		CCLOCKW = None
		LOITER_CURR = None
		TAKEOFF = None
		LAND = None

class DesiredControl(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def k(self) -> float: ...
	@k.setter
	def k(self, k: float) -> None: ...
	@property
	def m(self) -> float: ...
	@m.setter
	def m(self, m: float) -> None: ...
	@property
	def n(self) -> float: ...
	@n.setter
	def n(self, n: float) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	class FlagsBits:
		X = None
		Y = None
		Z = None
		K = None
		M = None
		N = None

class DesiredHeadingRate(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class DesiredVelocity(Message):
	@property
	def u(self) -> float: ...
	@u.setter
	def u(self, u: float) -> None: ...
	@property
	def v(self) -> float: ...
	@v.setter
	def v(self, v: float) -> None: ...
	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, w: float) -> None: ...
	@property
	def p(self) -> float: ...
	@p.setter
	def p(self, p: float) -> None: ...
	@property
	def q(self) -> float: ...
	@q.setter
	def q(self, q: float) -> None: ...
	@property
	def r(self) -> float: ...
	@r.setter
	def r(self, r: float) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	class FlagsBits:
		SURGE = None
		SWAY = None
		HEAVE = None
		ROLL = None
		PITCH = None
		YAW = None

class PathControlState(Message):
	@property
	def path_ref(self) -> int: ...
	@path_ref.setter
	def path_ref(self, path_ref: int) -> None: ...
	@property
	def start_lat(self) -> float: ...
	@start_lat.setter
	def start_lat(self, start_lat: float) -> None: ...
	@property
	def start_lon(self) -> float: ...
	@start_lon.setter
	def start_lon(self, start_lon: float) -> None: ...
	@property
	def start_z(self) -> float: ...
	@start_z.setter
	def start_z(self, start_z: float) -> None: ...
	@property
	def start_z_units(self) -> int: ...
	@start_z_units.setter
	def start_z_units(self, start_z_units: int) -> None: ...
	@property
	def end_lat(self) -> float: ...
	@end_lat.setter
	def end_lat(self, end_lat: float) -> None: ...
	@property
	def end_lon(self) -> float: ...
	@end_lon.setter
	def end_lon(self, end_lon: float) -> None: ...
	@property
	def end_z(self) -> float: ...
	@end_z.setter
	def end_z(self, end_z: float) -> None: ...
	@property
	def end_z_units(self) -> int: ...
	@end_z_units.setter
	def end_z_units(self, end_z_units: int) -> None: ...
	@property
	def lradius(self) -> float: ...
	@lradius.setter
	def lradius(self, lradius: float) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def vx(self) -> float: ...
	@vx.setter
	def vx(self, vx: float) -> None: ...
	@property
	def vy(self) -> float: ...
	@vy.setter
	def vy(self, vy: float) -> None: ...
	@property
	def vz(self) -> float: ...
	@vz.setter
	def vz(self, vz: float) -> None: ...
	@property
	def course_error(self) -> float: ...
	@course_error.setter
	def course_error(self, course_error: float) -> None: ...
	@property
	def eta(self) -> int: ...
	@eta.setter
	def eta(self, eta: int) -> None: ...
	class FlagsBits:
		NEAR = None
		LOITERING = None
		NO_Z = None
		_3DTRACK = None
		CCLOCKW = None

class AllocatedControlTorques(Message):
	@property
	def k(self) -> float: ...
	@k.setter
	def k(self, k: float) -> None: ...
	@property
	def m(self) -> float: ...
	@m.setter
	def m(self, m: float) -> None: ...
	@property
	def n(self) -> float: ...
	@n.setter
	def n(self, n: float) -> None: ...

class ControlParcel(Message):
	@property
	def p(self) -> float: ...
	@p.setter
	def p(self, p: float) -> None: ...
	@property
	def i(self) -> float: ...
	@i.setter
	def i(self, i: float) -> None: ...
	@property
	def d(self) -> float: ...
	@d.setter
	def d(self, d: float) -> None: ...
	@property
	def a(self) -> float: ...
	@a.setter
	def a(self, a: float) -> None: ...

class Brake(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	class OperationEnum:
		STOP = None
		START = None
		REVERT = None

class DesiredLinearState(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def vx(self) -> float: ...
	@vx.setter
	def vx(self, vx: float) -> None: ...
	@property
	def vy(self) -> float: ...
	@vy.setter
	def vy(self, vy: float) -> None: ...
	@property
	def vz(self) -> float: ...
	@vz.setter
	def vz(self, vz: float) -> None: ...
	@property
	def ax(self) -> float: ...
	@ax.setter
	def ax(self, ax: float) -> None: ...
	@property
	def ay(self) -> float: ...
	@ay.setter
	def ay(self, ay: float) -> None: ...
	@property
	def az(self) -> float: ...
	@az.setter
	def az(self, az: float) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	class FlagsBits:
		X = None
		Y = None
		Z = None
		VX = None
		VY = None
		VZ = None
		AX = None
		AY = None
		AZ = None

class DesiredThrottle(ControlCommand):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Goto(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def roll(self) -> float: ...
	@roll.setter
	def roll(self, roll: float) -> None: ...
	@property
	def pitch(self) -> float: ...
	@pitch.setter
	def pitch(self, pitch: float) -> None: ...
	@property
	def yaw(self) -> float: ...
	@yaw.setter
	def yaw(self, yaw: float) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class PopUp(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class FlagsBits:
		CURR_POS = None
		WAIT_AT_SURFACE = None
		STATION_KEEP = None

class Teleoperation(Maneuver):
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class Loiter(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	@property
	def length(self) -> float: ...
	@length.setter
	def length(self, length: float) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def direction(self) -> int: ...
	@direction.setter
	def direction(self, direction: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class LoiterTypeEnum:
		DEFAULT = None
		CIRCULAR = None
		RACETRACK = None
		EIGHT = None
		HOVER = None
	class DirectionEnum:
		VDEP = None
		CLOCKW = None
		CCLOCKW = None
		IWINDCURR = None

class IdleManeuver(Maneuver):
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class Rows(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def cross_angle(self) -> float: ...
	@cross_angle.setter
	def cross_angle(self, cross_angle: float) -> None: ...
	@property
	def width(self) -> float: ...
	@width.setter
	def width(self, width: float) -> None: ...
	@property
	def length(self) -> float: ...
	@length.setter
	def length(self, length: float) -> None: ...
	@property
	def hstep(self) -> float: ...
	@hstep.setter
	def hstep(self, hstep: float) -> None: ...
	@property
	def coff(self) -> int: ...
	@coff.setter
	def coff(self, coff: int) -> None: ...
	@property
	def alternation(self) -> int: ...
	@alternation.setter
	def alternation(self, alternation: int) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class FlagsBits:
		SQUARE_CURVE = None
		CURVE_RIGHT = None

class PathPoint(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class YoYo(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def amplitude(self) -> float: ...
	@amplitude.setter
	def amplitude(self, amplitude: float) -> None: ...
	@property
	def pitch(self) -> float: ...
	@pitch.setter
	def pitch(self, pitch: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class TeleoperationDone(Message):
	pass

class StationKeeping(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class Elevator(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def start_z(self) -> float: ...
	@start_z.setter
	def start_z(self, start_z: float) -> None: ...
	@property
	def start_z_units(self) -> int: ...
	@start_z_units.setter
	def start_z_units(self, start_z_units: int) -> None: ...
	@property
	def end_z(self) -> float: ...
	@end_z.setter
	def end_z(self, end_z: float) -> None: ...
	@property
	def end_z_units(self) -> int: ...
	@end_z_units.setter
	def end_z_units(self, end_z_units: int) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class FlagsBits:
		CURR_POS = None

class TrajectoryPoint(Message):
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def t(self) -> float: ...
	@t.setter
	def t(self, t: float) -> None: ...

class CustomManeuver(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class VehicleFormationParticipant(Message):
	@property
	def vid(self) -> int: ...
	@vid.setter
	def vid(self, vid: int) -> None: ...
	@property
	def off_x(self) -> float: ...
	@off_x.setter
	def off_x(self, off_x: float) -> None: ...
	@property
	def off_y(self) -> float: ...
	@off_y.setter
	def off_y(self, off_y: float) -> None: ...
	@property
	def off_z(self) -> float: ...
	@off_z.setter
	def off_z(self, off_z: float) -> None: ...

class StopManeuver(Message):
	pass

class RegisterManeuver(Message):
	@property
	def mid(self) -> int: ...
	@mid.setter
	def mid(self, mid: int) -> None: ...

class ManeuverControlState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def eta(self) -> int: ...
	@eta.setter
	def eta(self, eta: int) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class StateEnum:
		EXECUTING = None
		DONE = None
		ERROR = None
		STOPPED = None

class FollowSystem(Message):
	@property
	def system(self) -> int: ...
	@system.setter
	def system(self, system: int) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...

class CommsRelay(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def sys_a(self) -> int: ...
	@sys_a.setter
	def sys_a(self, sys_a: int) -> None: ...
	@property
	def sys_b(self) -> int: ...
	@sys_b.setter
	def sys_b(self, sys_b: int) -> None: ...
	@property
	def move_threshold(self) -> float: ...
	@move_threshold.setter
	def move_threshold(self, move_threshold: float) -> None: ...

class PolygonVertex(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...

class CompassCalibration(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def pitch(self) -> float: ...
	@pitch.setter
	def pitch(self, pitch: float) -> None: ...
	@property
	def amplitude(self) -> float: ...
	@amplitude.setter
	def amplitude(self, amplitude: float) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	@property
	def direction(self) -> int: ...
	@direction.setter
	def direction(self, direction: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class DirectionEnum:
		VDEP = None
		CLOCKW = None
		CCLOCKW = None
		IWINDCURR = None

class FormationPlanExecution(Maneuver):
	@property
	def group_name(self) -> str: ...
	@group_name.setter
	def group_name(self, group_name: str) -> None: ...
	@property
	def formation_name(self) -> str: ...
	@formation_name.setter
	def formation_name(self, formation_name: str) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def description(self) -> str: ...
	@description.setter
	def description(self, description: str) -> None: ...
	@property
	def leader_speed(self) -> float: ...
	@leader_speed.setter
	def leader_speed(self, leader_speed: float) -> None: ...
	@property
	def leader_bank_lim(self) -> float: ...
	@leader_bank_lim.setter
	def leader_bank_lim(self, leader_bank_lim: float) -> None: ...
	@property
	def pos_sim_err_lim(self) -> float: ...
	@pos_sim_err_lim.setter
	def pos_sim_err_lim(self, pos_sim_err_lim: float) -> None: ...
	@property
	def pos_sim_err_wrn(self) -> float: ...
	@pos_sim_err_wrn.setter
	def pos_sim_err_wrn(self, pos_sim_err_wrn: float) -> None: ...
	@property
	def pos_sim_err_timeout(self) -> int: ...
	@pos_sim_err_timeout.setter
	def pos_sim_err_timeout(self, pos_sim_err_timeout: int) -> None: ...
	@property
	def converg_max(self) -> float: ...
	@converg_max.setter
	def converg_max(self, converg_max: float) -> None: ...
	@property
	def converg_timeout(self) -> int: ...
	@converg_timeout.setter
	def converg_timeout(self, converg_timeout: int) -> None: ...
	@property
	def comms_timeout(self) -> int: ...
	@comms_timeout.setter
	def comms_timeout(self, comms_timeout: int) -> None: ...
	@property
	def turb_lim(self) -> float: ...
	@turb_lim.setter
	def turb_lim(self, turb_lim: float) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class FollowReference(Maneuver):
	@property
	def control_src(self) -> int: ...
	@control_src.setter
	def control_src(self, control_src: int) -> None: ...
	@property
	def control_ent(self) -> int: ...
	@control_ent.setter
	def control_ent(self, control_ent: int) -> None: ...
	@property
	def timeout(self) -> float: ...
	@timeout.setter
	def timeout(self, timeout: float) -> None: ...
	@property
	def loiter_radius(self) -> float: ...
	@loiter_radius.setter
	def loiter_radius(self, loiter_radius: float) -> None: ...
	@property
	def altitude_interval(self) -> float: ...
	@altitude_interval.setter
	def altitude_interval(self, altitude_interval: float) -> None: ...

class RelativeState(Message):
	@property
	def s_id(self) -> str: ...
	@s_id.setter
	def s_id(self, s_id: str) -> None: ...
	@property
	def dist(self) -> float: ...
	@dist.setter
	def dist(self, dist: float) -> None: ...
	@property
	def err(self) -> float: ...
	@err.setter
	def err(self, err: float) -> None: ...
	@property
	def ctrl_imp(self) -> float: ...
	@ctrl_imp.setter
	def ctrl_imp(self, ctrl_imp: float) -> None: ...
	@property
	def rel_dir_x(self) -> float: ...
	@rel_dir_x.setter
	def rel_dir_x(self, rel_dir_x: float) -> None: ...
	@property
	def rel_dir_y(self) -> float: ...
	@rel_dir_y.setter
	def rel_dir_y(self, rel_dir_y: float) -> None: ...
	@property
	def rel_dir_z(self) -> float: ...
	@rel_dir_z.setter
	def rel_dir_z(self, rel_dir_z: float) -> None: ...
	@property
	def err_x(self) -> float: ...
	@err_x.setter
	def err_x(self, err_x: float) -> None: ...
	@property
	def err_y(self) -> float: ...
	@err_y.setter
	def err_y(self, err_y: float) -> None: ...
	@property
	def err_z(self) -> float: ...
	@err_z.setter
	def err_z(self, err_z: float) -> None: ...
	@property
	def rf_err_x(self) -> float: ...
	@rf_err_x.setter
	def rf_err_x(self, rf_err_x: float) -> None: ...
	@property
	def rf_err_y(self) -> float: ...
	@rf_err_y.setter
	def rf_err_y(self, rf_err_y: float) -> None: ...
	@property
	def rf_err_z(self) -> float: ...
	@rf_err_z.setter
	def rf_err_z(self, rf_err_z: float) -> None: ...
	@property
	def rf_err_vx(self) -> float: ...
	@rf_err_vx.setter
	def rf_err_vx(self, rf_err_vx: float) -> None: ...
	@property
	def rf_err_vy(self) -> float: ...
	@rf_err_vy.setter
	def rf_err_vy(self, rf_err_vy: float) -> None: ...
	@property
	def rf_err_vz(self) -> float: ...
	@rf_err_vz.setter
	def rf_err_vz(self, rf_err_vz: float) -> None: ...
	@property
	def ss_x(self) -> float: ...
	@ss_x.setter
	def ss_x(self, ss_x: float) -> None: ...
	@property
	def ss_y(self) -> float: ...
	@ss_y.setter
	def ss_y(self, ss_y: float) -> None: ...
	@property
	def ss_z(self) -> float: ...
	@ss_z.setter
	def ss_z(self, ss_z: float) -> None: ...
	@property
	def virt_err_x(self) -> float: ...
	@virt_err_x.setter
	def virt_err_x(self, virt_err_x: float) -> None: ...
	@property
	def virt_err_y(self) -> float: ...
	@virt_err_y.setter
	def virt_err_y(self, virt_err_y: float) -> None: ...
	@property
	def virt_err_z(self) -> float: ...
	@virt_err_z.setter
	def virt_err_z(self, virt_err_z: float) -> None: ...

class Dislodge(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def rpm(self) -> float: ...
	@rpm.setter
	def rpm(self, rpm: float) -> None: ...
	@property
	def direction(self) -> int: ...
	@direction.setter
	def direction(self, direction: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class DirectionEnum:
		AUTO = None
		FORWARD = None
		BACKWARD = None

class Launch(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class Drop(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class ScheduledGoto(Maneuver):
	@property
	def arrival_time(self) -> float: ...
	@arrival_time.setter
	def arrival_time(self, arrival_time: float) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def travel_z(self) -> float: ...
	@travel_z.setter
	def travel_z(self, travel_z: float) -> None: ...
	@property
	def travel_z_units(self) -> int: ...
	@travel_z_units.setter
	def travel_z_units(self, travel_z_units: int) -> None: ...
	@property
	def delayed(self) -> int: ...
	@delayed.setter
	def delayed(self, delayed: int) -> None: ...
	class DelayedBehaviorEnum:
		RESUME = None
		SKIP = None
		FAIL = None

class RowsCoverage(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def cross_angle(self) -> float: ...
	@cross_angle.setter
	def cross_angle(self, cross_angle: float) -> None: ...
	@property
	def width(self) -> float: ...
	@width.setter
	def width(self, width: float) -> None: ...
	@property
	def length(self) -> float: ...
	@length.setter
	def length(self, length: float) -> None: ...
	@property
	def coff(self) -> int: ...
	@coff.setter
	def coff(self, coff: int) -> None: ...
	@property
	def angaperture(self) -> float: ...
	@angaperture.setter
	def angaperture(self, angaperture: float) -> None: ...
	@property
	def range(self) -> int: ...
	@range.setter
	def range(self, range: int) -> None: ...
	@property
	def overlap(self) -> int: ...
	@overlap.setter
	def overlap(self, overlap: int) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class FlagsBits:
		SQUARE_CURVE = None
		CURVE_RIGHT = None

class Sample(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def syringe0(self) -> int: ...
	@syringe0.setter
	def syringe0(self, syringe0: int) -> None: ...
	@property
	def syringe1(self) -> int: ...
	@syringe1.setter
	def syringe1(self, syringe1: int) -> None: ...
	@property
	def syringe2(self) -> int: ...
	@syringe2.setter
	def syringe2(self, syringe2: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class ImageTracking(Maneuver):
	pass

class Takeoff(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def takeoff_pitch(self) -> float: ...
	@takeoff_pitch.setter
	def takeoff_pitch(self, takeoff_pitch: float) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class Land(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def abort_z(self) -> float: ...
	@abort_z.setter
	def abort_z(self, abort_z: float) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def glide_slope(self) -> int: ...
	@glide_slope.setter
	def glide_slope(self, glide_slope: int) -> None: ...
	@property
	def glide_slope_alt(self) -> float: ...
	@glide_slope_alt.setter
	def glide_slope_alt(self, glide_slope_alt: float) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class FollowPoint(Maneuver):
	@property
	def target(self) -> str: ...
	@target.setter
	def target(self, target: str) -> None: ...
	@property
	def max_speed(self) -> float: ...
	@max_speed.setter
	def max_speed(self, max_speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class Alignment(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class StationKeepingExtended(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def popup_period(self) -> int: ...
	@popup_period.setter
	def popup_period(self, popup_period: int) -> None: ...
	@property
	def popup_duration(self) -> int: ...
	@popup_duration.setter
	def popup_duration(self, popup_duration: int) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class FlagsBits:
		KEEP_SAFE = None

class ManeuverDone(Message):
	pass

class Magnetometer(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def width(self) -> float: ...
	@width.setter
	def width(self, width: float) -> None: ...
	@property
	def direction(self) -> int: ...
	@direction.setter
	def direction(self, direction: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class DirectionEnum:
		CLOCKW_FIRST = None
		CCLOCKW_FIRST = None

class VehicleState(Message):
	@property
	def op_mode(self) -> int: ...
	@op_mode.setter
	def op_mode(self, op_mode: int) -> None: ...
	@property
	def error_count(self) -> int: ...
	@error_count.setter
	def error_count(self, error_count: int) -> None: ...
	@property
	def error_ents(self) -> str: ...
	@error_ents.setter
	def error_ents(self, error_ents: str) -> None: ...
	@property
	def maneuver_type(self) -> int: ...
	@maneuver_type.setter
	def maneuver_type(self, maneuver_type: int) -> None: ...
	@property
	def maneuver_stime(self) -> float: ...
	@maneuver_stime.setter
	def maneuver_stime(self, maneuver_stime: float) -> None: ...
	@property
	def maneuver_eta(self) -> int: ...
	@maneuver_eta.setter
	def maneuver_eta(self, maneuver_eta: int) -> None: ...
	@property
	def control_loops(self) -> int: ...
	@control_loops.setter
	def control_loops(self, control_loops: int) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def last_error(self) -> str: ...
	@last_error.setter
	def last_error(self, last_error: str) -> None: ...
	@property
	def last_error_time(self) -> float: ...
	@last_error_time.setter
	def last_error_time(self, last_error_time: float) -> None: ...
	class OperationModeEnum:
		SERVICE = None
		CALIBRATION = None
		ERROR = None
		MANEUVER = None
		EXTERNAL = None
		BOOT = None
	class FlagsBits:
		MANEUVER_DONE = None

class MonitorEntityState(Message):
	@property
	def command(self) -> int: ...
	@command.setter
	def command(self, command: int) -> None: ...
	@property
	def entities(self) -> str: ...
	@entities.setter
	def entities(self, entities: str) -> None: ...
	class CommandEnum:
		RESET = None
		ENABLE = None
		DISABLE = None
		ENABLE_EXCLUSIVE = None
		STATUS = None

class EntityMonitoringState(Message):
	@property
	def mcount(self) -> int: ...
	@mcount.setter
	def mcount(self, mcount: int) -> None: ...
	@property
	def mnames(self) -> str: ...
	@mnames.setter
	def mnames(self, mnames: str) -> None: ...
	@property
	def ecount(self) -> int: ...
	@ecount.setter
	def ecount(self, ecount: int) -> None: ...
	@property
	def enames(self) -> str: ...
	@enames.setter
	def enames(self, enames: str) -> None: ...
	@property
	def ccount(self) -> int: ...
	@ccount.setter
	def ccount(self, ccount: int) -> None: ...
	@property
	def cnames(self) -> str: ...
	@cnames.setter
	def cnames(self, cnames: str) -> None: ...
	@property
	def last_error(self) -> str: ...
	@last_error.setter
	def last_error(self, last_error: str) -> None: ...
	@property
	def last_error_time(self) -> float: ...
	@last_error_time.setter
	def last_error_time(self, last_error_time: float) -> None: ...

class OperationalLimits(Message):
	@property
	def mask(self) -> int: ...
	@mask.setter
	def mask(self, mask: int) -> None: ...
	@property
	def max_depth(self) -> float: ...
	@max_depth.setter
	def max_depth(self, max_depth: float) -> None: ...
	@property
	def min_altitude(self) -> float: ...
	@min_altitude.setter
	def min_altitude(self, min_altitude: float) -> None: ...
	@property
	def max_altitude(self) -> float: ...
	@max_altitude.setter
	def max_altitude(self, max_altitude: float) -> None: ...
	@property
	def min_speed(self) -> float: ...
	@min_speed.setter
	def min_speed(self, min_speed: float) -> None: ...
	@property
	def max_speed(self) -> float: ...
	@max_speed.setter
	def max_speed(self, max_speed: float) -> None: ...
	@property
	def max_vrate(self) -> float: ...
	@max_vrate.setter
	def max_vrate(self, max_vrate: float) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def orientation(self) -> float: ...
	@orientation.setter
	def orientation(self, orientation: float) -> None: ...
	@property
	def width(self) -> float: ...
	@width.setter
	def width(self, width: float) -> None: ...
	@property
	def length(self) -> float: ...
	@length.setter
	def length(self, length: float) -> None: ...

class GetOperationalLimits(Message):
	pass

class Calibration(Message):
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...

class ControlLoops(Message):
	@property
	def enable(self) -> int: ...
	@enable.setter
	def enable(self, enable: int) -> None: ...
	@property
	def mask(self) -> int: ...
	@mask.setter
	def mask(self, mask: int) -> None: ...
	@property
	def scope_ref(self) -> int: ...
	@scope_ref.setter
	def scope_ref(self, scope_ref: int) -> None: ...
	class EnableEnum:
		DISABLE = None
		ENABLE = None

class VehicleMedium(Message):
	@property
	def medium(self) -> int: ...
	@medium.setter
	def medium(self, medium: int) -> None: ...
	class MediumEnum:
		GROUND = None
		AIR = None
		WATER = None
		UNDERWATER = None
		UNKNOWN = None

class Collision(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	class TypeBits:
		X = None
		Y = None
		Z = None
		IMPACT = None

class FormState(Message):
	@property
	def possimerr(self) -> float: ...
	@possimerr.setter
	def possimerr(self, possimerr: float) -> None: ...
	@property
	def converg(self) -> float: ...
	@converg.setter
	def converg(self, converg: float) -> None: ...
	@property
	def turbulence(self) -> float: ...
	@turbulence.setter
	def turbulence(self, turbulence: float) -> None: ...
	@property
	def possimmon(self) -> int: ...
	@possimmon.setter
	def possimmon(self, possimmon: int) -> None: ...
	@property
	def commmon(self) -> int: ...
	@commmon.setter
	def commmon(self, commmon: int) -> None: ...
	@property
	def convergmon(self) -> int: ...
	@convergmon.setter
	def convergmon(self, convergmon: int) -> None: ...
	class PositionMismatchMonitorEnum:
		OK = None
		WRN = None
		LIM = None
	class CommunicationsMonitorEnum:
		OK = None
		TIMEOUT = None
	class ConvergenceEnum:
		OK = None
		TIMEOUT = None

class AutopilotMode(Message):
	@property
	def autonomy(self) -> int: ...
	@autonomy.setter
	def autonomy(self, autonomy: int) -> None: ...
	@property
	def mode(self) -> str: ...
	@mode.setter
	def mode(self, mode: str) -> None: ...
	class AutonomyLevelEnum:
		MANUAL = None
		ASSISTED = None
		AUTO = None

class FormationState(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def possimerr(self) -> float: ...
	@possimerr.setter
	def possimerr(self, possimerr: float) -> None: ...
	@property
	def converg(self) -> float: ...
	@converg.setter
	def converg(self, converg: float) -> None: ...
	@property
	def turbulence(self) -> float: ...
	@turbulence.setter
	def turbulence(self, turbulence: float) -> None: ...
	@property
	def possimmon(self) -> int: ...
	@possimmon.setter
	def possimmon(self, possimmon: int) -> None: ...
	@property
	def commmon(self) -> int: ...
	@commmon.setter
	def commmon(self, commmon: int) -> None: ...
	@property
	def convergmon(self) -> int: ...
	@convergmon.setter
	def convergmon(self, convergmon: int) -> None: ...
	class TypeEnum:
		REQUEST = None
		REPORT = None
	class OperationEnum:
		START = None
		STOP = None
	class PositionMismatchMonitorEnum:
		OK = None
		WRN = None
		LIM = None
	class CommunicationsMonitorEnum:
		OK = None
		TIMEOUT = None
	class ConvergenceEnum:
		OK = None
		TIMEOUT = None

class ReportControl(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def comm_interface(self) -> int: ...
	@comm_interface.setter
	def comm_interface(self, comm_interface: int) -> None: ...
	@property
	def period(self) -> int: ...
	@period.setter
	def period(self, period: int) -> None: ...
	@property
	def sys_dst(self) -> str: ...
	@sys_dst.setter
	def sys_dst(self, sys_dst: str) -> None: ...
	class OperationEnum:
		REQUEST_START = None
		STARTED = None
		REQUEST_STOP = None
		STOPPED = None
		REQUEST_REPORT = None
		REPORT_SENT = None
	class CommunicationInterfaceBits:
		ACOUSTIC = None
		SATELLITE = None
		GSM = None
		MOBILE = None
		RADIO = None

class StateReport(Message):
	@property
	def stime(self) -> int: ...
	@stime.setter
	def stime(self, stime: int) -> None: ...
	@property
	def latitude(self) -> float: ...
	@latitude.setter
	def latitude(self, latitude: float) -> None: ...
	@property
	def longitude(self) -> float: ...
	@longitude.setter
	def longitude(self, longitude: float) -> None: ...
	@property
	def altitude(self) -> int: ...
	@altitude.setter
	def altitude(self, altitude: int) -> None: ...
	@property
	def depth(self) -> int: ...
	@depth.setter
	def depth(self, depth: int) -> None: ...
	@property
	def heading(self) -> int: ...
	@heading.setter
	def heading(self, heading: int) -> None: ...
	@property
	def speed(self) -> int: ...
	@speed.setter
	def speed(self, speed: int) -> None: ...
	@property
	def fuel(self) -> int: ...
	@fuel.setter
	def fuel(self, fuel: int) -> None: ...
	@property
	def exec_state(self) -> int: ...
	@exec_state.setter
	def exec_state(self, exec_state: int) -> None: ...
	@property
	def plan_checksum(self) -> int: ...
	@plan_checksum.setter
	def plan_checksum(self, plan_checksum: int) -> None: ...

class TransmissionRequest(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def comm_mean(self) -> int: ...
	@comm_mean.setter
	def comm_mean(self, comm_mean: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def deadline(self) -> float: ...
	@deadline.setter
	def deadline(self, deadline: float) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...
	@property
	def data_mode(self) -> int: ...
	@data_mode.setter
	def data_mode(self, data_mode: int) -> None: ...
	@property
	def msg_data(self) -> Message: ...
	@msg_data.setter
	def msg_data(self, msg_data: Message) -> None: ...
	@property
	def txt_data(self) -> str: ...
	@txt_data.setter
	def txt_data(self, txt_data: str) -> None: ...
	@property
	def raw_data(self) -> bytes: ...
	@raw_data.setter
	def raw_data(self, raw_data: bytes) -> None: ...
	class CommunicationMeanEnum:
		WIFI = None
		ACOUSTIC = None
		SATELLITE = None
		GSM = None
		ANY = None
		ALL = None
	class DataModeEnum:
		INLINEMSG = None
		TEXT = None
		RAW = None
		ABORT = None
		RANGE = None
		REVERSE_RANGE = None

class TransmissionStatus(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	@property
	def range(self) -> float: ...
	@range.setter
	def range(self, range: float) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class StatusEnum:
		IN_PROGRESS = None
		SENT = None
		DELIVERED = None
		MAYBE_DELIVERED = None
		RANGE_RECEIVED = None
		INPUT_FAILURE = None
		TEMPORARY_FAILURE = None
		PERMANENT_FAILURE = None

class SmsRequest(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def timeout(self) -> float: ...
	@timeout.setter
	def timeout(self, timeout: float) -> None: ...
	@property
	def sms_text(self) -> str: ...
	@sms_text.setter
	def sms_text(self, sms_text: str) -> None: ...

class SmsStatus(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class StatusEnum:
		QUEUED = None
		SENT = None
		INPUT_FAILURE = None
		ERROR = None

class VtolState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	class StateEnum:
		UNDEFINED = None
		TRANSITION_TO_FW = None
		TRANSITION_TO_MC = None
		MC = None
		FW = None

class ArmingState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	class StateEnum:
		ARMED = None
		DISARMED = None

class TCPRequest(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def destination(self) -> str: ...
	@destination.setter
	def destination(self, destination: str) -> None: ...
	@property
	def timeout(self) -> float: ...
	@timeout.setter
	def timeout(self, timeout: float) -> None: ...
	@property
	def msg_data(self) -> Message: ...
	@msg_data.setter
	def msg_data(self, msg_data: Message) -> None: ...

class TCPStatus(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class StatusEnum:
		QUEUED = None
		SENT = None
		INPUT_FAILURE = None
		HOST_UNKNOWN = None
		CANT_CONNECT = None
		ERROR = None

class AssetReport(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def report_time(self) -> float: ...
	@report_time.setter
	def report_time(self, report_time: float) -> None: ...
	@property
	def medium(self) -> int: ...
	@medium.setter
	def medium(self, medium: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...
	@property
	def alt(self) -> float: ...
	@alt.setter
	def alt(self, alt: float) -> None: ...
	@property
	def sog(self) -> float: ...
	@sog.setter
	def sog(self, sog: float) -> None: ...
	@property
	def cog(self) -> float: ...
	@cog.setter
	def cog(self, cog: float) -> None: ...
	@property
	def msgs(self) -> MessageList[None]: ...
	@msgs.setter
	def msgs(self, msgs: MessageList[None]) -> None: ...
	class MediumEnum:
		WIFI = None
		SATELLITE = None
		ACOUSTIC = None
		SMS = None

class Abort(Message):
	pass

class PlanTransition(Message):
	@property
	def source_man(self) -> str: ...
	@source_man.setter
	def source_man(self, source_man: str) -> None: ...
	@property
	def dest_man(self) -> str: ...
	@dest_man.setter
	def dest_man(self, dest_man: str) -> None: ...
	@property
	def conditions(self) -> str: ...
	@conditions.setter
	def conditions(self, conditions: str) -> None: ...
	@property
	def actions(self) -> MessageList[None]: ...
	@actions.setter
	def actions(self, actions: MessageList[None]) -> None: ...

class EmergencyControlState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def comm_level(self) -> int: ...
	@comm_level.setter
	def comm_level(self, comm_level: int) -> None: ...
	class StateEnum:
		NOT_CONFIGURED = None
		DISABLED = None
		ENABLED = None
		ARMED = None
		ACTIVE = None
		STOPPING = None

class PlanDB(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def request_id(self) -> int: ...
	@request_id.setter
	def request_id(self, request_id: int) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def arg(self) -> Message: ...
	@arg.setter
	def arg(self, arg: Message) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class TypeEnum:
		REQUEST = None
		SUCCESS = None
		FAILURE = None
		IN_PROGRESS = None
	class OperationEnum:
		SET = None
		DEL = None
		GET = None
		GET_INFO = None
		CLEAR = None
		GET_STATE = None
		GET_DSTATE = None
		BOOT = None

class PlanDBInformation(Message):
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def plan_size(self) -> int: ...
	@plan_size.setter
	def plan_size(self, plan_size: int) -> None: ...
	@property
	def change_time(self) -> float: ...
	@change_time.setter
	def change_time(self, change_time: float) -> None: ...
	@property
	def change_sid(self) -> int: ...
	@change_sid.setter
	def change_sid(self, change_sid: int) -> None: ...
	@property
	def change_sname(self) -> str: ...
	@change_sname.setter
	def change_sname(self, change_sname: str) -> None: ...
	@property
	def md5(self) -> bytes: ...
	@md5.setter
	def md5(self, md5: bytes) -> None: ...

class PlanControl(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def request_id(self) -> int: ...
	@request_id.setter
	def request_id(self, request_id: int) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def arg(self) -> Message: ...
	@arg.setter
	def arg(self, arg: Message) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class TypeEnum:
		REQUEST = None
		SUCCESS = None
		FAILURE = None
		IN_PROGRESS = None
	class OperationEnum:
		START = None
		STOP = None
		LOAD = None
		GET = None
	class FlagsBits:
		CALIBRATE = None
		IGNORE_ERRORS = None

class PlanControlState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def plan_eta(self) -> int: ...
	@plan_eta.setter
	def plan_eta(self, plan_eta: int) -> None: ...
	@property
	def plan_progress(self) -> float: ...
	@plan_progress.setter
	def plan_progress(self, plan_progress: float) -> None: ...
	@property
	def man_id(self) -> str: ...
	@man_id.setter
	def man_id(self, man_id: str) -> None: ...
	@property
	def man_type(self) -> int: ...
	@man_type.setter
	def man_type(self, man_type: int) -> None: ...
	@property
	def man_eta(self) -> int: ...
	@man_eta.setter
	def man_eta(self, man_eta: int) -> None: ...
	@property
	def last_outcome(self) -> int: ...
	@last_outcome.setter
	def last_outcome(self, last_outcome: int) -> None: ...
	class StateEnum:
		BLOCKED = None
		READY = None
		INITIALIZING = None
		EXECUTING = None
	class LastPlanOutcomeEnum:
		NONE = None
		SUCCESS = None
		FAILURE = None

class PlanVariable(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def value(self) -> str: ...
	@value.setter
	def value(self, value: str) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def access(self) -> int: ...
	@access.setter
	def access(self, access: int) -> None: ...
	class TypeEnum:
		BOOLEAN = None
		NUMBER = None
		TEXT = None
		MESSAGE = None
	class AccessTypeEnum:
		INPUT = None
		OUTPUT = None
		LOCAL = None

class PlanGeneration(Message):
	@property
	def cmd(self) -> int: ...
	@cmd.setter
	def cmd(self, cmd: int) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def params(self) -> str: ...
	@params.setter
	def params(self, params: str) -> None: ...
	class CommandEnum:
		GENERATE = None
		EXECUTE = None
	class OperationEnum:
		REQUEST = None
		ERROR = None
		SUCCESS = None

class LeaderState(Message):
	@property
	def group_name(self) -> str: ...
	@group_name.setter
	def group_name(self, group_name: str) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height(self) -> float: ...
	@height.setter
	def height(self, height: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def vx(self) -> float: ...
	@vx.setter
	def vx(self, vx: float) -> None: ...
	@property
	def vy(self) -> float: ...
	@vy.setter
	def vy(self, vy: float) -> None: ...
	@property
	def vz(self) -> float: ...
	@vz.setter
	def vz(self, vz: float) -> None: ...
	@property
	def p(self) -> float: ...
	@p.setter
	def p(self, p: float) -> None: ...
	@property
	def q(self) -> float: ...
	@q.setter
	def q(self, q: float) -> None: ...
	@property
	def r(self) -> float: ...
	@r.setter
	def r(self, r: float) -> None: ...
	@property
	def svx(self) -> float: ...
	@svx.setter
	def svx(self, svx: float) -> None: ...
	@property
	def svy(self) -> float: ...
	@svy.setter
	def svy(self, svy: float) -> None: ...
	@property
	def svz(self) -> float: ...
	@svz.setter
	def svz(self, svz: float) -> None: ...
	class ActionOnTheLeaderStateEnum:
		REQUEST = None
		SET = None
		REPORT = None

class PlanStatistics(Message):
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def properties(self) -> int: ...
	@properties.setter
	def properties(self, properties: int) -> None: ...
	@property
	def durations(self) -> str: ...
	@durations.setter
	def durations(self, durations: str) -> None: ...
	@property
	def distances(self) -> str: ...
	@distances.setter
	def distances(self, distances: str) -> None: ...
	@property
	def actions(self) -> str: ...
	@actions.setter
	def actions(self, actions: str) -> None: ...
	@property
	def fuel(self) -> str: ...
	@fuel.setter
	def fuel(self, fuel: str) -> None: ...
	class TypeEnum:
		PREPLAN = None
		INPLAN = None
		POSTPLAN = None
	class PropertiesBits:
		BASIC = None
		NONLINEAR = None
		INFINITE = None
		CYCLICAL = None
		ALL = None

class ReportedState(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...
	@property
	def roll(self) -> float: ...
	@roll.setter
	def roll(self, roll: float) -> None: ...
	@property
	def pitch(self) -> float: ...
	@pitch.setter
	def pitch(self, pitch: float) -> None: ...
	@property
	def yaw(self) -> float: ...
	@yaw.setter
	def yaw(self, yaw: float) -> None: ...
	@property
	def rcp_time(self) -> float: ...
	@rcp_time.setter
	def rcp_time(self, rcp_time: float) -> None: ...
	@property
	def sid(self) -> str: ...
	@sid.setter
	def sid(self, sid: str) -> None: ...
	@property
	def s_type(self) -> int: ...
	@s_type.setter
	def s_type(self, s_type: int) -> None: ...
	class SourceTypeEnum:
		WI_FI = None
		TRACKER = None
		SMS = None
		ACOUSTIC_MODEM = None
		UNKNOWN = None

class RemoteSensorInfo(Message):
	@property
	def id(self) -> str: ...
	@id.setter
	def id(self, id: str) -> None: ...
	@property
	def sensor_class(self) -> str: ...
	@sensor_class.setter
	def sensor_class(self, sensor_class: str) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def alt(self) -> float: ...
	@alt.setter
	def alt(self, alt: float) -> None: ...
	@property
	def heading(self) -> float: ...
	@heading.setter
	def heading(self, heading: float) -> None: ...
	@property
	def data(self) -> str: ...
	@data.setter
	def data(self, data: str) -> None: ...

class MapPoint(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def alt(self) -> float: ...
	@alt.setter
	def alt(self, alt: float) -> None: ...

class CcuEvent(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def id(self) -> str: ...
	@id.setter
	def id(self, id: str) -> None: ...
	@property
	def arg(self) -> Message: ...
	@arg.setter
	def arg(self, arg: Message) -> None: ...
	class EventTypeEnum:
		LOG_ENTRY = None
		PLAN_ADDED = None
		PLAN_REMOVED = None
		PLAN_CHANGED = None
		MAP_FEATURE_ADDED = None
		MAP_FEATURE_REMOVED = None
		MAP_FEATURE_CHANGED = None
		TELEOPERATION_STARTED = None
		TELEOPERATION_ENDED = None

class TrexObservation(Message):
	@property
	def timeline(self) -> str: ...
	@timeline.setter
	def timeline(self, timeline: str) -> None: ...
	@property
	def predicate(self) -> str: ...
	@predicate.setter
	def predicate(self, predicate: str) -> None: ...
	@property
	def attributes(self) -> str: ...
	@attributes.setter
	def attributes(self, attributes: str) -> None: ...

class TrexCommand(Message):
	@property
	def command(self) -> int: ...
	@command.setter
	def command(self, command: int) -> None: ...
	@property
	def goal_id(self) -> str: ...
	@goal_id.setter
	def goal_id(self, goal_id: str) -> None: ...
	@property
	def goal_xml(self) -> str: ...
	@goal_xml.setter
	def goal_xml(self, goal_xml: str) -> None: ...
	class CommandEnum:
		DISABLE = None
		ENABLE = None
		POST_GOAL = None
		RECALL_GOAL = None
		REQUEST_PLAN = None
		REPORT_PLAN = None

class TrexAttribute(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def attr_type(self) -> int: ...
	@attr_type.setter
	def attr_type(self, attr_type: int) -> None: ...
	@property
	def min(self) -> str: ...
	@min.setter
	def min(self, min: str) -> None: ...
	@property
	def max(self) -> str: ...
	@max.setter
	def max(self, max: str) -> None: ...
	class AttributeTypeEnum:
		BOOL = None
		INT = None
		FLOAT = None
		STRING = None
		ENUM = None

class Event(Message):
	@property
	def topic(self) -> str: ...
	@topic.setter
	def topic(self, topic: str) -> None: ...
	@property
	def data(self) -> str: ...
	@data.setter
	def data(self, data: str) -> None: ...

class CompressedImage(Message):
	@property
	def frameid(self) -> int: ...
	@frameid.setter
	def frameid(self, frameid: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class ImageTxSettings(Message):
	@property
	def fps(self) -> int: ...
	@fps.setter
	def fps(self, fps: int) -> None: ...
	@property
	def quality(self) -> int: ...
	@quality.setter
	def quality(self, quality: int) -> None: ...
	@property
	def reps(self) -> int: ...
	@reps.setter
	def reps(self, reps: int) -> None: ...
	@property
	def tsize(self) -> int: ...
	@tsize.setter
	def tsize(self, tsize: int) -> None: ...

class RemoteState(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def depth(self) -> int: ...
	@depth.setter
	def depth(self, depth: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...

class Target(Message):
	@property
	def label(self) -> str: ...
	@label.setter
	def label(self, label: str) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def cog(self) -> float: ...
	@cog.setter
	def cog(self, cog: float) -> None: ...
	@property
	def sog(self) -> float: ...
	@sog.setter
	def sog(self, sog: float) -> None: ...

class EntityParameter(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def value(self) -> str: ...
	@value.setter
	def value(self, value: str) -> None: ...

class QueryEntityParameters(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def visibility(self) -> str: ...
	@visibility.setter
	def visibility(self, visibility: str) -> None: ...
	@property
	def scope(self) -> str: ...
	@scope.setter
	def scope(self, scope: str) -> None: ...

class SaveEntityParameters(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...

class CreateSession(Message):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...

class CloseSession(Message):
	@property
	def sessid(self) -> int: ...
	@sessid.setter
	def sessid(self, sessid: int) -> None: ...

class SessionSubscription(Message):
	@property
	def sessid(self) -> int: ...
	@sessid.setter
	def sessid(self, sessid: int) -> None: ...
	@property
	def messages(self) -> str: ...
	@messages.setter
	def messages(self, messages: str) -> None: ...

class SessionKeepAlive(Message):
	@property
	def sessid(self) -> int: ...
	@sessid.setter
	def sessid(self, sessid: int) -> None: ...

class SessionStatus(Message):
	@property
	def sessid(self) -> int: ...
	@sessid.setter
	def sessid(self, sessid: int) -> None: ...
	@property
	def status(self) -> int: ...
	@status.setter
	def status(self, status: int) -> None: ...
	class StatusEnum:
		ESTABLISHED = None
		CLOSED = None

class PushEntityParameters(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...

class PopEntityParameters(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...

class IoEvent(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def error(self) -> str: ...
	@error.setter
	def error(self, error: str) -> None: ...
	class TypeEnum:
		INPUT = None
		INPUT_ERROR = None

class UamTxFrame(Message):
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def sys_dst(self) -> str: ...
	@sys_dst.setter
	def sys_dst(self, sys_dst: str) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...
	class FlagsBits:
		ACK = None
		DELAYED = None
		FORCED = None

class UamRxFrame(Message):
	@property
	def sys_src(self) -> str: ...
	@sys_src.setter
	def sys_src(self, sys_src: str) -> None: ...
	@property
	def sys_dst(self) -> str: ...
	@sys_dst.setter
	def sys_dst(self, sys_dst: str) -> None: ...
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...
	class FlagsBits:
		PROMISCUOUS = None
		DELAYED = None

class UamTxStatus(Message):
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...
	@property
	def error(self) -> str: ...
	@error.setter
	def error(self, error: str) -> None: ...
	class ValueEnum:
		DONE = None
		FAILED = None
		CANCELED = None
		BUSY = None
		INV_ADDR = None
		IP = None
		UNSUPPORTED = None
		INV_SIZE = None
		SENT = None
		DELIVERED = None

class UamRxRange(Message):
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def sys(self) -> str: ...
	@sys.setter
	def sys(self, sys: str) -> None: ...
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class UamTxRange(Message):
	@property
	def seq(self) -> int: ...
	@seq.setter
	def seq(self, seq: int) -> None: ...
	@property
	def sys_dst(self) -> str: ...
	@sys_dst.setter
	def sys_dst(self, sys_dst: str) -> None: ...
	@property
	def timeout(self) -> float: ...
	@timeout.setter
	def timeout(self, timeout: float) -> None: ...

class FormCtrlParam(Message):
	@property
	def action(self) -> int: ...
	@action.setter
	def action(self, action: int) -> None: ...
	@property
	def longain(self) -> float: ...
	@longain.setter
	def longain(self, longain: float) -> None: ...
	@property
	def latgain(self) -> float: ...
	@latgain.setter
	def latgain(self, latgain: float) -> None: ...
	@property
	def bondthick(self) -> int: ...
	@bondthick.setter
	def bondthick(self, bondthick: int) -> None: ...
	@property
	def leadgain(self) -> float: ...
	@leadgain.setter
	def leadgain(self, leadgain: float) -> None: ...
	@property
	def deconflgain(self) -> float: ...
	@deconflgain.setter
	def deconflgain(self, deconflgain: float) -> None: ...
	class ActionEnum:
		REQ = None
		SET = None
		REP = None

class FormationEval(Message):
	@property
	def err_mean(self) -> float: ...
	@err_mean.setter
	def err_mean(self, err_mean: float) -> None: ...
	@property
	def dist_min_abs(self) -> float: ...
	@dist_min_abs.setter
	def dist_min_abs(self, dist_min_abs: float) -> None: ...
	@property
	def dist_min_mean(self) -> float: ...
	@dist_min_mean.setter
	def dist_min_mean(self, dist_min_mean: float) -> None: ...

class FormationControlParams(Message):
	@property
	def action(self) -> int: ...
	@action.setter
	def action(self, action: int) -> None: ...
	@property
	def lon_gain(self) -> float: ...
	@lon_gain.setter
	def lon_gain(self, lon_gain: float) -> None: ...
	@property
	def lat_gain(self) -> float: ...
	@lat_gain.setter
	def lat_gain(self, lat_gain: float) -> None: ...
	@property
	def bond_thick(self) -> float: ...
	@bond_thick.setter
	def bond_thick(self, bond_thick: float) -> None: ...
	@property
	def lead_gain(self) -> float: ...
	@lead_gain.setter
	def lead_gain(self, lead_gain: float) -> None: ...
	@property
	def deconfl_gain(self) -> float: ...
	@deconfl_gain.setter
	def deconfl_gain(self, deconfl_gain: float) -> None: ...
	@property
	def accel_switch_gain(self) -> float: ...
	@accel_switch_gain.setter
	def accel_switch_gain(self, accel_switch_gain: float) -> None: ...
	@property
	def safe_dist(self) -> float: ...
	@safe_dist.setter
	def safe_dist(self, safe_dist: float) -> None: ...
	@property
	def deconflict_offset(self) -> float: ...
	@deconflict_offset.setter
	def deconflict_offset(self, deconflict_offset: float) -> None: ...
	@property
	def accel_safe_margin(self) -> float: ...
	@accel_safe_margin.setter
	def accel_safe_margin(self, accel_safe_margin: float) -> None: ...
	@property
	def accel_lim_x(self) -> float: ...
	@accel_lim_x.setter
	def accel_lim_x(self, accel_lim_x: float) -> None: ...
	class ActionEnum:
		REQ = None
		SET = None
		REP = None

class SoiWaypoint(Message):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def eta(self) -> int: ...
	@eta.setter
	def eta(self, eta: int) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...

class SoiState(Message):
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def plan_id(self) -> int: ...
	@plan_id.setter
	def plan_id(self, plan_id: int) -> None: ...
	@property
	def wpt_id(self) -> int: ...
	@wpt_id.setter
	def wpt_id(self, wpt_id: int) -> None: ...
	@property
	def settings_chk(self) -> int: ...
	@settings_chk.setter
	def settings_chk(self, settings_chk: int) -> None: ...
	class StateEnum:
		EXEC = None
		IDLE = None
		INACTIVE = None

class MessagePart(Message):
	@property
	def uid(self) -> int: ...
	@uid.setter
	def uid(self, uid: int) -> None: ...
	@property
	def frag_number(self) -> int: ...
	@frag_number.setter
	def frag_number(self, frag_number: int) -> None: ...
	@property
	def num_frags(self) -> int: ...
	@num_frags.setter
	def num_frags(self, num_frags: int) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...

class NeptusBlob(Message):
	@property
	def content_type(self) -> str: ...
	@content_type.setter
	def content_type(self, content_type: str) -> None: ...
	@property
	def content(self) -> bytes: ...
	@content.setter
	def content(self, content: bytes) -> None: ...

class Aborted(Message):
	pass

class UsblAngles(Message):
	@property
	def target(self) -> int: ...
	@target.setter
	def target(self, target: int) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def elevation(self) -> float: ...
	@elevation.setter
	def elevation(self, elevation: float) -> None: ...

class UsblPosition(Message):
	@property
	def target(self) -> int: ...
	@target.setter
	def target(self, target: int) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class UsblFix(Message):
	@property
	def target(self) -> int: ...
	@target.setter
	def target(self, target: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class ParametersXml(Message):
	@property
	def locale(self) -> str: ...
	@locale.setter
	def locale(self, locale: str) -> None: ...
	@property
	def config(self) -> bytes: ...
	@config.setter
	def config(self, config: bytes) -> None: ...

class GetParametersXml(Message):
	pass

class SetImageCoords(Message):
	@property
	def camid(self) -> int: ...
	@camid.setter
	def camid(self, camid: int) -> None: ...
	@property
	def x(self) -> int: ...
	@x.setter
	def x(self, x: int) -> None: ...
	@property
	def y(self) -> int: ...
	@y.setter
	def y(self, y: int) -> None: ...

class GetImageCoords(Message):
	@property
	def camid(self) -> int: ...
	@camid.setter
	def camid(self, camid: int) -> None: ...
	@property
	def x(self) -> int: ...
	@x.setter
	def x(self, x: int) -> None: ...
	@property
	def y(self) -> int: ...
	@y.setter
	def y(self, y: int) -> None: ...

class GetWorldCoordinates(Message):
	@property
	def tracking(self) -> int: ...
	@tracking.setter
	def tracking(self, tracking: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...

class UsblAnglesExtended(Message):
	@property
	def target(self) -> str: ...
	@target.setter
	def target(self, target: str) -> None: ...
	@property
	def lbearing(self) -> float: ...
	@lbearing.setter
	def lbearing(self, lbearing: float) -> None: ...
	@property
	def lelevation(self) -> float: ...
	@lelevation.setter
	def lelevation(self, lelevation: float) -> None: ...
	@property
	def bearing(self) -> float: ...
	@bearing.setter
	def bearing(self, bearing: float) -> None: ...
	@property
	def elevation(self) -> float: ...
	@elevation.setter
	def elevation(self, elevation: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def accuracy(self) -> float: ...
	@accuracy.setter
	def accuracy(self, accuracy: float) -> None: ...

class UsblPositionExtended(Message):
	@property
	def target(self) -> str: ...
	@target.setter
	def target(self, target: str) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def n(self) -> float: ...
	@n.setter
	def n(self, n: float) -> None: ...
	@property
	def e(self) -> float: ...
	@e.setter
	def e(self, e: float) -> None: ...
	@property
	def d(self) -> float: ...
	@d.setter
	def d(self, d: float) -> None: ...
	@property
	def phi(self) -> float: ...
	@phi.setter
	def phi(self, phi: float) -> None: ...
	@property
	def theta(self) -> float: ...
	@theta.setter
	def theta(self, theta: float) -> None: ...
	@property
	def psi(self) -> float: ...
	@psi.setter
	def psi(self, psi: float) -> None: ...
	@property
	def accuracy(self) -> float: ...
	@accuracy.setter
	def accuracy(self, accuracy: float) -> None: ...

class UsblFixExtended(Message):
	@property
	def target(self) -> str: ...
	@target.setter
	def target(self, target: str) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def accuracy(self) -> float: ...
	@accuracy.setter
	def accuracy(self, accuracy: float) -> None: ...

class UsblModem(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...

class DissolvedOrganicMatter(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	class TypeOfMeasurementEnum:
		COLORED = None
		FLUORESCENT = None

class OpticalBackscatter(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class Tachograph(Message):
	@property
	def timestamp_last_service(self) -> float: ...
	@timestamp_last_service.setter
	def timestamp_last_service(self, timestamp_last_service: float) -> None: ...
	@property
	def time_next_service(self) -> float: ...
	@time_next_service.setter
	def time_next_service(self, time_next_service: float) -> None: ...
	@property
	def time_motor_next_service(self) -> float: ...
	@time_motor_next_service.setter
	def time_motor_next_service(self, time_motor_next_service: float) -> None: ...
	@property
	def time_idle_ground(self) -> float: ...
	@time_idle_ground.setter
	def time_idle_ground(self, time_idle_ground: float) -> None: ...
	@property
	def time_idle_air(self) -> float: ...
	@time_idle_air.setter
	def time_idle_air(self, time_idle_air: float) -> None: ...
	@property
	def time_idle_water(self) -> float: ...
	@time_idle_water.setter
	def time_idle_water(self, time_idle_water: float) -> None: ...
	@property
	def time_idle_underwater(self) -> float: ...
	@time_idle_underwater.setter
	def time_idle_underwater(self, time_idle_underwater: float) -> None: ...
	@property
	def time_idle_unknown(self) -> float: ...
	@time_idle_unknown.setter
	def time_idle_unknown(self, time_idle_unknown: float) -> None: ...
	@property
	def time_motor_ground(self) -> float: ...
	@time_motor_ground.setter
	def time_motor_ground(self, time_motor_ground: float) -> None: ...
	@property
	def time_motor_air(self) -> float: ...
	@time_motor_air.setter
	def time_motor_air(self, time_motor_air: float) -> None: ...
	@property
	def time_motor_water(self) -> float: ...
	@time_motor_water.setter
	def time_motor_water(self, time_motor_water: float) -> None: ...
	@property
	def time_motor_underwater(self) -> float: ...
	@time_motor_underwater.setter
	def time_motor_underwater(self, time_motor_underwater: float) -> None: ...
	@property
	def time_motor_unknown(self) -> float: ...
	@time_motor_unknown.setter
	def time_motor_unknown(self, time_motor_unknown: float) -> None: ...
	@property
	def rpm_min(self) -> int: ...
	@rpm_min.setter
	def rpm_min(self, rpm_min: int) -> None: ...
	@property
	def rpm_max(self) -> int: ...
	@rpm_max.setter
	def rpm_max(self, rpm_max: int) -> None: ...
	@property
	def depth_max(self) -> float: ...
	@depth_max.setter
	def depth_max(self, depth_max: float) -> None: ...

class ApmStatus(Message):
	@property
	def severity(self) -> int: ...
	@severity.setter
	def severity(self, severity: int) -> None: ...
	@property
	def text(self) -> str: ...
	@text.setter
	def text(self, text: str) -> None: ...
	class SeverityEnum:
		EMERGENCY = None
		ALERT = None
		CRITICAL = None
		ERROR = None
		WARNING = None
		NOTICE = None
		INFO = None
		DEBUG = None

class SadcReadings(Message):
	@property
	def channel(self) -> int: ...
	@channel.setter
	def channel(self, channel: int) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...
	@property
	def gain(self) -> int: ...
	@gain.setter
	def gain(self, gain: int) -> None: ...
	class GainEnum:
		X1 = None
		X10 = None
		X100 = None

class DmsDetection(Message):
	@property
	def ch01(self) -> float: ...
	@ch01.setter
	def ch01(self, ch01: float) -> None: ...
	@property
	def ch02(self) -> float: ...
	@ch02.setter
	def ch02(self, ch02: float) -> None: ...
	@property
	def ch03(self) -> float: ...
	@ch03.setter
	def ch03(self, ch03: float) -> None: ...
	@property
	def ch04(self) -> float: ...
	@ch04.setter
	def ch04(self, ch04: float) -> None: ...
	@property
	def ch05(self) -> float: ...
	@ch05.setter
	def ch05(self, ch05: float) -> None: ...
	@property
	def ch06(self) -> float: ...
	@ch06.setter
	def ch06(self, ch06: float) -> None: ...
	@property
	def ch07(self) -> float: ...
	@ch07.setter
	def ch07(self, ch07: float) -> None: ...
	@property
	def ch08(self) -> float: ...
	@ch08.setter
	def ch08(self, ch08: float) -> None: ...
	@property
	def ch09(self) -> float: ...
	@ch09.setter
	def ch09(self, ch09: float) -> None: ...
	@property
	def ch10(self) -> float: ...
	@ch10.setter
	def ch10(self, ch10: float) -> None: ...
	@property
	def ch11(self) -> float: ...
	@ch11.setter
	def ch11(self, ch11: float) -> None: ...
	@property
	def ch12(self) -> float: ...
	@ch12.setter
	def ch12(self, ch12: float) -> None: ...
	@property
	def ch13(self) -> float: ...
	@ch13.setter
	def ch13(self, ch13: float) -> None: ...
	@property
	def ch14(self) -> float: ...
	@ch14.setter
	def ch14(self, ch14: float) -> None: ...
	@property
	def ch15(self) -> float: ...
	@ch15.setter
	def ch15(self, ch15: float) -> None: ...
	@property
	def ch16(self) -> float: ...
	@ch16.setter
	def ch16(self, ch16: float) -> None: ...

class HomePosition(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def height(self) -> float: ...
	@height.setter
	def height(self, height: float) -> None: ...
	@property
	def depth(self) -> float: ...
	@depth.setter
	def depth(self, depth: float) -> None: ...
	@property
	def alt(self) -> float: ...
	@alt.setter
	def alt(self, alt: float) -> None: ...
	class ActionOnTheVehicleHomePositionEnum:
		SET = None
		REPORT = None

class ADCPBeam(Message):
	@property
	def vel(self) -> float: ...
	@vel.setter
	def vel(self, vel: float) -> None: ...
	@property
	def amp(self) -> float: ...
	@amp.setter
	def amp(self, amp: float) -> None: ...
	@property
	def cor(self) -> int: ...
	@cor.setter
	def cor(self, cor: int) -> None: ...

class GpioState(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class GpioStateGet(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...

class GpioStateSet(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def value(self) -> int: ...
	@value.setter
	def value(self, value: int) -> None: ...

class ColoredDissolvedOrganicMatter(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class FluorescentDissolvedOrganicMatter(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class TotalMagIntensity(Message):
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...

class CommRestriction(Message):
	@property
	def restriction(self) -> int: ...
	@restriction.setter
	def restriction(self, restriction: int) -> None: ...
	@property
	def reason(self) -> str: ...
	@reason.setter
	def reason(self, reason: str) -> None: ...
	class RestrictedCommunicationMeansBits:
		SATELLITE = None
		ACOUSTIC = None
		WIFI = None
		GSM = None

class LogBookControl(Message):
	@property
	def command(self) -> int: ...
	@command.setter
	def command(self, command: int) -> None: ...
	@property
	def htime(self) -> float: ...
	@htime.setter
	def htime(self, htime: float) -> None: ...
	@property
	def msg(self) -> MessageList[LogBookEntry]: ...
	@msg.setter
	def msg(self, msg: MessageList[LogBookEntry]) -> None: ...
	class CommandEnum:
		GET = None
		CLEAR = None
		GET_ERR = None
		REPLY = None

class VerticalProfile(Message):
	@property
	def parameter(self) -> int: ...
	@parameter.setter
	def parameter(self, parameter: int) -> None: ...
	@property
	def numsamples(self) -> int: ...
	@numsamples.setter
	def numsamples(self, numsamples: int) -> None: ...
	@property
	def samples(self) -> MessageList[ProfileSample]: ...
	@samples.setter
	def samples(self, samples: MessageList[ProfileSample]) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	class ParameterEnum:
		TEMPERATURE = None
		SALINITY = None
		CONDUCTIVITY = None
		PH = None
		REDOX = None
		CHLOROPHYLL = None
		TURBIDITY = None

class HistoricData(Message):
	@property
	def base_lat(self) -> float: ...
	@base_lat.setter
	def base_lat(self, base_lat: float) -> None: ...
	@property
	def base_lon(self) -> float: ...
	@base_lon.setter
	def base_lon(self, base_lon: float) -> None: ...
	@property
	def base_time(self) -> float: ...
	@base_time.setter
	def base_time(self, base_time: float) -> None: ...
	@property
	def data(self) -> MessageList[RemoteData]: ...
	@data.setter
	def data(self, data: MessageList[RemoteData]) -> None: ...

class HistoricDataQuery(Message):
	@property
	def req_id(self) -> int: ...
	@req_id.setter
	def req_id(self, req_id: int) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def max_size(self) -> int: ...
	@max_size.setter
	def max_size(self, max_size: int) -> None: ...
	@property
	def data(self) -> Message: ...
	@data.setter
	def data(self, data: Message) -> None: ...
	class RequestTypeEnum:
		QUERY = None
		REPLY = None
		CLEAR = None

class LblConfig(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def beacons(self) -> MessageList[LblBeacon]: ...
	@beacons.setter
	def beacons(self, beacons: MessageList[LblBeacon]) -> None: ...
	class OperationEnum:
		SET_CFG = None
		GET_CFG = None
		CUR_CFG = None

class Distance(Message):
	@property
	def validity(self) -> int: ...
	@validity.setter
	def validity(self, validity: int) -> None: ...
	@property
	def location(self) -> MessageList[DeviceState]: ...
	@location.setter
	def location(self, location: MessageList[DeviceState]) -> None: ...
	@property
	def beam_config(self) -> MessageList[BeamConfig]: ...
	@beam_config.setter
	def beam_config(self, beam_config: MessageList[BeamConfig]) -> None: ...
	@property
	def value(self) -> float: ...
	@value.setter
	def value(self, value: float) -> None: ...
	class ValidityEnum:
		INVALID = None
		VALID = None

class SonarData(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def frequency(self) -> int: ...
	@frequency.setter
	def frequency(self, frequency: int) -> None: ...
	@property
	def min_range(self) -> int: ...
	@min_range.setter
	def min_range(self, min_range: int) -> None: ...
	@property
	def max_range(self) -> int: ...
	@max_range.setter
	def max_range(self, max_range: int) -> None: ...
	@property
	def bits_per_point(self) -> int: ...
	@bits_per_point.setter
	def bits_per_point(self, bits_per_point: int) -> None: ...
	@property
	def scale_factor(self) -> float: ...
	@scale_factor.setter
	def scale_factor(self, scale_factor: float) -> None: ...
	@property
	def beam_config(self) -> MessageList[BeamConfig]: ...
	@beam_config.setter
	def beam_config(self, beam_config: MessageList[BeamConfig]) -> None: ...
	@property
	def data(self) -> bytes: ...
	@data.setter
	def data(self, data: bytes) -> None: ...
	class TypeEnum:
		SIDESCAN = None
		ECHOSOUNDER = None
		MULTIBEAM = None

class ExternalNavData(Message):
	@property
	def state(self) -> Message: ...
	@state.setter
	def state(self, state: Message) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	class NavDataTypeEnum:
		FULL = None
		AHRS = None
		POSREF = None

class LblEstimate(Message):
	@property
	def beacon(self) -> Message: ...
	@beacon.setter
	def beacon(self, beacon: Message) -> None: ...
	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, x: float) -> None: ...
	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, y: float) -> None: ...
	@property
	def var_x(self) -> float: ...
	@var_x.setter
	def var_x(self, var_x: float) -> None: ...
	@property
	def var_y(self) -> float: ...
	@var_y.setter
	def var_y(self, var_y: float) -> None: ...
	@property
	def distance(self) -> float: ...
	@distance.setter
	def distance(self, distance: float) -> None: ...

class LowLevelControl(Maneuver):
	@property
	def control(self) -> Message: ...
	@control.setter
	def control(self, control: Message) -> None: ...
	@property
	def duration(self) -> int: ...
	@duration.setter
	def duration(self, duration: int) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class FollowPath(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def points(self) -> MessageList[PathPoint]: ...
	@points.setter
	def points(self, points: MessageList[PathPoint]) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class FollowTrajectory(Maneuver):
	@property
	def timeout(self) -> int: ...
	@timeout.setter
	def timeout(self, timeout: int) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def points(self) -> MessageList[TrajectoryPoint]: ...
	@points.setter
	def points(self, points: MessageList[TrajectoryPoint]) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class VehicleFormation(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def points(self) -> MessageList[TrajectoryPoint]: ...
	@points.setter
	def points(self, points: MessageList[TrajectoryPoint]) -> None: ...
	@property
	def participants(self) -> MessageList[VehicleFormationParticipant]: ...
	@participants.setter
	def participants(self, participants: MessageList[VehicleFormationParticipant]) -> None: ...
	@property
	def start_time(self) -> float: ...
	@start_time.setter
	def start_time(self, start_time: float) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class CoverArea(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, z: float) -> None: ...
	@property
	def z_units(self) -> int: ...
	@z_units.setter
	def z_units(self, z_units: int) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def polygon(self) -> MessageList[PolygonVertex]: ...
	@polygon.setter
	def polygon(self, polygon: MessageList[PolygonVertex]) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...

class FormationParameters(Message):
	@property
	def formation_name(self) -> str: ...
	@formation_name.setter
	def formation_name(self, formation_name: str) -> None: ...
	@property
	def reference_frame(self) -> int: ...
	@reference_frame.setter
	def reference_frame(self, reference_frame: int) -> None: ...
	@property
	def participants(self) -> MessageList[VehicleFormationParticipant]: ...
	@participants.setter
	def participants(self, participants: MessageList[VehicleFormationParticipant]) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class FormationReferenceFrameEnum:
		EARTH_FIXED = None
		PATH_FIXED = None
		PATH_CURVED = None

class Reference(Message):
	@property
	def flags(self) -> int: ...
	@flags.setter
	def flags(self, flags: int) -> None: ...
	@property
	def speed(self) -> Message: ...
	@speed.setter
	def speed(self, speed: Message) -> None: ...
	@property
	def z(self) -> Message: ...
	@z.setter
	def z(self, z: Message) -> None: ...
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def radius(self) -> float: ...
	@radius.setter
	def radius(self, radius: float) -> None: ...
	class FlagsBits:
		LOCATION = None
		SPEED = None
		Z = None
		RADIUS = None
		START_POINT = None
		DIRECT = None
		MANDONE = None

class FollowRefState(Message):
	@property
	def control_src(self) -> int: ...
	@control_src.setter
	def control_src(self, control_src: int) -> None: ...
	@property
	def control_ent(self) -> int: ...
	@control_ent.setter
	def control_ent(self, control_ent: int) -> None: ...
	@property
	def reference(self) -> Message: ...
	@reference.setter
	def reference(self, reference: Message) -> None: ...
	@property
	def state(self) -> int: ...
	@state.setter
	def state(self, state: int) -> None: ...
	@property
	def proximity(self) -> int: ...
	@proximity.setter
	def proximity(self, proximity: int) -> None: ...
	class StateEnum:
		WAIT = None
		GOTO = None
		LOITER = None
		HOVER = None
		ELEVATOR = None
		TIMEOUT = None
	class ProximityBits:
		FAR = None
		XY_NEAR = None
		Z_NEAR = None
		XY_UNREACHABLE = None
		Z_UNREACHABLE = None

class FormationMonitor(Message):
	@property
	def ax_cmd(self) -> float: ...
	@ax_cmd.setter
	def ax_cmd(self, ax_cmd: float) -> None: ...
	@property
	def ay_cmd(self) -> float: ...
	@ay_cmd.setter
	def ay_cmd(self, ay_cmd: float) -> None: ...
	@property
	def az_cmd(self) -> float: ...
	@az_cmd.setter
	def az_cmd(self, az_cmd: float) -> None: ...
	@property
	def ax_des(self) -> float: ...
	@ax_des.setter
	def ax_des(self, ax_des: float) -> None: ...
	@property
	def ay_des(self) -> float: ...
	@ay_des.setter
	def ay_des(self, ay_des: float) -> None: ...
	@property
	def az_des(self) -> float: ...
	@az_des.setter
	def az_des(self, az_des: float) -> None: ...
	@property
	def virt_err_x(self) -> float: ...
	@virt_err_x.setter
	def virt_err_x(self, virt_err_x: float) -> None: ...
	@property
	def virt_err_y(self) -> float: ...
	@virt_err_y.setter
	def virt_err_y(self, virt_err_y: float) -> None: ...
	@property
	def virt_err_z(self) -> float: ...
	@virt_err_z.setter
	def virt_err_z(self, virt_err_z: float) -> None: ...
	@property
	def surf_fdbk_x(self) -> float: ...
	@surf_fdbk_x.setter
	def surf_fdbk_x(self, surf_fdbk_x: float) -> None: ...
	@property
	def surf_fdbk_y(self) -> float: ...
	@surf_fdbk_y.setter
	def surf_fdbk_y(self, surf_fdbk_y: float) -> None: ...
	@property
	def surf_fdbk_z(self) -> float: ...
	@surf_fdbk_z.setter
	def surf_fdbk_z(self, surf_fdbk_z: float) -> None: ...
	@property
	def surf_unkn_x(self) -> float: ...
	@surf_unkn_x.setter
	def surf_unkn_x(self, surf_unkn_x: float) -> None: ...
	@property
	def surf_unkn_y(self) -> float: ...
	@surf_unkn_y.setter
	def surf_unkn_y(self, surf_unkn_y: float) -> None: ...
	@property
	def surf_unkn_z(self) -> float: ...
	@surf_unkn_z.setter
	def surf_unkn_z(self, surf_unkn_z: float) -> None: ...
	@property
	def ss_x(self) -> float: ...
	@ss_x.setter
	def ss_x(self, ss_x: float) -> None: ...
	@property
	def ss_y(self) -> float: ...
	@ss_y.setter
	def ss_y(self, ss_y: float) -> None: ...
	@property
	def ss_z(self) -> float: ...
	@ss_z.setter
	def ss_z(self, ss_z: float) -> None: ...
	@property
	def rel_state(self) -> MessageList[RelativeState]: ...
	@rel_state.setter
	def rel_state(self, rel_state: MessageList[RelativeState]) -> None: ...

class Formation(Message):
	@property
	def formation_name(self) -> str: ...
	@formation_name.setter
	def formation_name(self, formation_name: str) -> None: ...
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def group_name(self) -> str: ...
	@group_name.setter
	def group_name(self, group_name: str) -> None: ...
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def description(self) -> str: ...
	@description.setter
	def description(self, description: str) -> None: ...
	@property
	def reference_frame(self) -> int: ...
	@reference_frame.setter
	def reference_frame(self, reference_frame: int) -> None: ...
	@property
	def participants(self) -> MessageList[VehicleFormationParticipant]: ...
	@participants.setter
	def participants(self, participants: MessageList[VehicleFormationParticipant]) -> None: ...
	@property
	def leader_bank_lim(self) -> float: ...
	@leader_bank_lim.setter
	def leader_bank_lim(self, leader_bank_lim: float) -> None: ...
	@property
	def leader_speed_min(self) -> float: ...
	@leader_speed_min.setter
	def leader_speed_min(self, leader_speed_min: float) -> None: ...
	@property
	def leader_speed_max(self) -> float: ...
	@leader_speed_max.setter
	def leader_speed_max(self, leader_speed_max: float) -> None: ...
	@property
	def leader_alt_min(self) -> float: ...
	@leader_alt_min.setter
	def leader_alt_min(self, leader_alt_min: float) -> None: ...
	@property
	def leader_alt_max(self) -> float: ...
	@leader_alt_max.setter
	def leader_alt_max(self, leader_alt_max: float) -> None: ...
	@property
	def pos_sim_err_lim(self) -> float: ...
	@pos_sim_err_lim.setter
	def pos_sim_err_lim(self, pos_sim_err_lim: float) -> None: ...
	@property
	def pos_sim_err_wrn(self) -> float: ...
	@pos_sim_err_wrn.setter
	def pos_sim_err_wrn(self, pos_sim_err_wrn: float) -> None: ...
	@property
	def pos_sim_err_timeout(self) -> int: ...
	@pos_sim_err_timeout.setter
	def pos_sim_err_timeout(self, pos_sim_err_timeout: int) -> None: ...
	@property
	def converg_max(self) -> float: ...
	@converg_max.setter
	def converg_max(self, converg_max: float) -> None: ...
	@property
	def converg_timeout(self) -> int: ...
	@converg_timeout.setter
	def converg_timeout(self, converg_timeout: int) -> None: ...
	@property
	def comms_timeout(self) -> int: ...
	@comms_timeout.setter
	def comms_timeout(self, comms_timeout: int) -> None: ...
	@property
	def turb_lim(self) -> float: ...
	@turb_lim.setter
	def turb_lim(self, turb_lim: float) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class TypeEnum:
		REQUEST = None
		REPORT = None
	class OperationEnum:
		START = None
		STOP = None
		READY = None
		EXECUTING = None
		FAILURE = None
	class FormationReferenceFrameEnum:
		EARTH_FIXED = None
		PATH_FIXED = None
		PATH_CURVED = None

class AutonomousSection(Maneuver):
	@property
	def lat(self) -> float: ...
	@lat.setter
	def lat(self, lat: float) -> None: ...
	@property
	def lon(self) -> float: ...
	@lon.setter
	def lon(self, lon: float) -> None: ...
	@property
	def speed(self) -> float: ...
	@speed.setter
	def speed(self, speed: float) -> None: ...
	@property
	def speed_units(self) -> int: ...
	@speed_units.setter
	def speed_units(self, speed_units: int) -> None: ...
	@property
	def limits(self) -> int: ...
	@limits.setter
	def limits(self, limits: int) -> None: ...
	@property
	def max_depth(self) -> float: ...
	@max_depth.setter
	def max_depth(self, max_depth: float) -> None: ...
	@property
	def min_alt(self) -> float: ...
	@min_alt.setter
	def min_alt(self, min_alt: float) -> None: ...
	@property
	def time_limit(self) -> float: ...
	@time_limit.setter
	def time_limit(self, time_limit: float) -> None: ...
	@property
	def area_limits(self) -> MessageList[PolygonVertex]: ...
	@area_limits.setter
	def area_limits(self, area_limits: MessageList[PolygonVertex]) -> None: ...
	@property
	def controller(self) -> str: ...
	@controller.setter
	def controller(self, controller: str) -> None: ...
	@property
	def custom(self) -> str: ...
	@custom.setter
	def custom(self, custom: str) -> None: ...
	class EnforcedLimitsBits:
		DEPTH = None
		ALTITUDE = None
		TIMEOUT = None
		AREA2D = None

class VehicleCommand(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def request_id(self) -> int: ...
	@request_id.setter
	def request_id(self, request_id: int) -> None: ...
	@property
	def command(self) -> int: ...
	@command.setter
	def command(self, command: int) -> None: ...
	@property
	def maneuver(self) -> Message: ...
	@maneuver.setter
	def maneuver(self, maneuver: Message) -> None: ...
	@property
	def calib_time(self) -> int: ...
	@calib_time.setter
	def calib_time(self, calib_time: int) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class TypeEnum:
		REQUEST = None
		SUCCESS = None
		IN_PROGRESS = None
		FAILURE = None
	class CommandEnum:
		EXEC_MANEUVER = None
		STOP_MANEUVER = None
		START_CALIBRATION = None
		STOP_CALIBRATION = None

class PlanManeuver(Message):
	@property
	def maneuver_id(self) -> str: ...
	@maneuver_id.setter
	def maneuver_id(self, maneuver_id: str) -> None: ...
	@property
	def data(self) -> Message: ...
	@data.setter
	def data(self, data: Message) -> None: ...
	@property
	def start_actions(self) -> MessageList[None]: ...
	@start_actions.setter
	def start_actions(self, start_actions: MessageList[None]) -> None: ...
	@property
	def end_actions(self) -> MessageList[None]: ...
	@end_actions.setter
	def end_actions(self, end_actions: MessageList[None]) -> None: ...

class PlanSpecification(Message):
	@property
	def plan_id(self) -> str: ...
	@plan_id.setter
	def plan_id(self, plan_id: str) -> None: ...
	@property
	def description(self) -> str: ...
	@description.setter
	def description(self, description: str) -> None: ...
	@property
	def vnamespace(self) -> str: ...
	@vnamespace.setter
	def vnamespace(self, vnamespace: str) -> None: ...
	@property
	def variables(self) -> MessageList[PlanVariable]: ...
	@variables.setter
	def variables(self, variables: MessageList[PlanVariable]) -> None: ...
	@property
	def start_man_id(self) -> str: ...
	@start_man_id.setter
	def start_man_id(self, start_man_id: str) -> None: ...
	@property
	def maneuvers(self) -> MessageList[PlanManeuver]: ...
	@maneuvers.setter
	def maneuvers(self, maneuvers: MessageList[PlanManeuver]) -> None: ...
	@property
	def transitions(self) -> MessageList[PlanTransition]: ...
	@transitions.setter
	def transitions(self, transitions: MessageList[PlanTransition]) -> None: ...
	@property
	def start_actions(self) -> MessageList[None]: ...
	@start_actions.setter
	def start_actions(self, start_actions: MessageList[None]) -> None: ...
	@property
	def end_actions(self) -> MessageList[None]: ...
	@end_actions.setter
	def end_actions(self, end_actions: MessageList[None]) -> None: ...

class EmergencyControl(Message):
	@property
	def command(self) -> int: ...
	@command.setter
	def command(self, command: int) -> None: ...
	@property
	def plan(self) -> Message: ...
	@plan.setter
	def plan(self, plan: Message) -> None: ...
	class CommandEnum:
		ENABLE = None
		DISABLE = None
		START = None
		STOP = None
		QUERY = None
		SET_PLAN = None

class PlanDBState(Message):
	@property
	def plan_count(self) -> int: ...
	@plan_count.setter
	def plan_count(self, plan_count: int) -> None: ...
	@property
	def plan_size(self) -> int: ...
	@plan_size.setter
	def plan_size(self, plan_size: int) -> None: ...
	@property
	def change_time(self) -> float: ...
	@change_time.setter
	def change_time(self, change_time: float) -> None: ...
	@property
	def change_sid(self) -> int: ...
	@change_sid.setter
	def change_sid(self, change_sid: int) -> None: ...
	@property
	def change_sname(self) -> str: ...
	@change_sname.setter
	def change_sname(self, change_sname: str) -> None: ...
	@property
	def md5(self) -> bytes: ...
	@md5.setter
	def md5(self, md5: bytes) -> None: ...
	@property
	def plans_info(self) -> MessageList[PlanDBInformation]: ...
	@plans_info.setter
	def plans_info(self, plans_info: MessageList[PlanDBInformation]) -> None: ...

class MapFeature(Message):
	@property
	def id(self) -> str: ...
	@id.setter
	def id(self, id: str) -> None: ...
	@property
	def feature_type(self) -> int: ...
	@feature_type.setter
	def feature_type(self, feature_type: int) -> None: ...
	@property
	def rgb_red(self) -> int: ...
	@rgb_red.setter
	def rgb_red(self, rgb_red: int) -> None: ...
	@property
	def rgb_green(self) -> int: ...
	@rgb_green.setter
	def rgb_green(self, rgb_green: int) -> None: ...
	@property
	def rgb_blue(self) -> int: ...
	@rgb_blue.setter
	def rgb_blue(self, rgb_blue: int) -> None: ...
	@property
	def feature(self) -> MessageList[MapPoint]: ...
	@feature.setter
	def feature(self, feature: MessageList[MapPoint]) -> None: ...
	class FeaturetypeEnum:
		POI = None
		FILLEDPOLY = None
		CONTOUREDPOLY = None
		LINE = None
		TRANSPONDER = None
		STARTLOC = None
		HOMEREF = None

class Map(Message):
	@property
	def id(self) -> str: ...
	@id.setter
	def id(self, id: str) -> None: ...
	@property
	def features(self) -> MessageList[MapFeature]: ...
	@features.setter
	def features(self, features: MessageList[MapFeature]) -> None: ...

class VehicleLinks(Message):
	@property
	def localname(self) -> str: ...
	@localname.setter
	def localname(self, localname: str) -> None: ...
	@property
	def links(self) -> MessageList[Announce]: ...
	@links.setter
	def links(self, links: MessageList[Announce]) -> None: ...

class TrexToken(Message):
	@property
	def timeline(self) -> str: ...
	@timeline.setter
	def timeline(self, timeline: str) -> None: ...
	@property
	def predicate(self) -> str: ...
	@predicate.setter
	def predicate(self, predicate: str) -> None: ...
	@property
	def attributes(self) -> MessageList[TrexAttribute]: ...
	@attributes.setter
	def attributes(self, attributes: MessageList[TrexAttribute]) -> None: ...

class TrexOperation(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def goal_id(self) -> str: ...
	@goal_id.setter
	def goal_id(self, goal_id: str) -> None: ...
	@property
	def token(self) -> Message: ...
	@token.setter
	def token(self, token: Message) -> None: ...
	class OperationEnum:
		POST_TOKEN = None
		POST_GOAL = None
		RECALL_GOAL = None
		REQUEST_PLAN = None
		REPORT_PLAN = None

class TrexPlan(Message):
	@property
	def reactor(self) -> str: ...
	@reactor.setter
	def reactor(self, reactor: str) -> None: ...
	@property
	def tokens(self) -> MessageList[TrexToken]: ...
	@tokens.setter
	def tokens(self, tokens: MessageList[TrexToken]) -> None: ...

class EntityParameters(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def params(self) -> MessageList[EntityParameter]: ...
	@params.setter
	def params(self, params: MessageList[EntityParameter]) -> None: ...

class SetEntityParameters(Message):
	@property
	def name(self) -> str: ...
	@name.setter
	def name(self, name: str) -> None: ...
	@property
	def params(self) -> MessageList[EntityParameter]: ...
	@params.setter
	def params(self, params: MessageList[EntityParameter]) -> None: ...

class FormationEvaluation(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def err_mean(self) -> float: ...
	@err_mean.setter
	def err_mean(self, err_mean: float) -> None: ...
	@property
	def dist_min_abs(self) -> float: ...
	@dist_min_abs.setter
	def dist_min_abs(self, dist_min_abs: float) -> None: ...
	@property
	def dist_min_mean(self) -> float: ...
	@dist_min_mean.setter
	def dist_min_mean(self, dist_min_mean: float) -> None: ...
	@property
	def roll_rate_mean(self) -> float: ...
	@roll_rate_mean.setter
	def roll_rate_mean(self, roll_rate_mean: float) -> None: ...
	@property
	def time(self) -> float: ...
	@time.setter
	def time(self, time: float) -> None: ...
	@property
	def controlparams(self) -> Message: ...
	@controlparams.setter
	def controlparams(self, controlparams: Message) -> None: ...
	class TypeEnum:
		REQUEST = None
		REPORT = None
	class OperationEnum:
		START = None
		STOP = None
		READY = None
		EXECUTING = None
		FAILURE = None

class SoiPlan(Message):
	@property
	def plan_id(self) -> int: ...
	@plan_id.setter
	def plan_id(self, plan_id: int) -> None: ...
	@property
	def waypoints(self) -> MessageList[SoiWaypoint]: ...
	@waypoints.setter
	def waypoints(self, waypoints: MessageList[SoiWaypoint]) -> None: ...

class SoiCommand(Message):
	@property
	def type(self) -> int: ...
	@type.setter
	def type(self, type: int) -> None: ...
	@property
	def command(self) -> int: ...
	@command.setter
	def command(self, command: int) -> None: ...
	@property
	def settings(self) -> str: ...
	@settings.setter
	def settings(self, settings: str) -> None: ...
	@property
	def plan(self) -> Message: ...
	@plan.setter
	def plan(self, plan: Message) -> None: ...
	@property
	def info(self) -> str: ...
	@info.setter
	def info(self, info: str) -> None: ...
	class TypeEnum:
		REQUEST = None
		SUCCESS = None
		ERROR = None
	class CommandEnum:
		EXEC = None
		STOP = None
		SET_PARAMS = None
		GET_PARAMS = None
		GET_PLAN = None
		RESUME = None

class UsblConfig(Message):
	@property
	def op(self) -> int: ...
	@op.setter
	def op(self, op: int) -> None: ...
	@property
	def modems(self) -> MessageList[UsblModem]: ...
	@modems.setter
	def modems(self, modems: MessageList[UsblModem]) -> None: ...
	class OperationEnum:
		SET_CFG = None
		GET_CFG = None
		CUR_CFG = None

class CurrentProfileCell(Message):
	@property
	def cell_position(self) -> float: ...
	@cell_position.setter
	def cell_position(self, cell_position: float) -> None: ...
	@property
	def beams(self) -> MessageList[ADCPBeam]: ...
	@beams.setter
	def beams(self, beams: MessageList[ADCPBeam]) -> None: ...

class CurrentProfile(Message):
	@property
	def nbeams(self) -> int: ...
	@nbeams.setter
	def nbeams(self, nbeams: int) -> None: ...
	@property
	def ncells(self) -> int: ...
	@ncells.setter
	def ncells(self, ncells: int) -> None: ...
	@property
	def coord_sys(self) -> int: ...
	@coord_sys.setter
	def coord_sys(self, coord_sys: int) -> None: ...
	@property
	def profile(self) -> MessageList[CurrentProfileCell]: ...
	@profile.setter
	def profile(self, profile: MessageList[CurrentProfileCell]) -> None: ...
	class CoordinateSystemBits:
		XYZ = None
		NED = None
		BEAMS = None
