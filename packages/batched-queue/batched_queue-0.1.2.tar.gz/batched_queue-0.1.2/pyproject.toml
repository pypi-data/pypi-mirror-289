[tool.poetry]
name = "batched-queue"
version = "0.1.2"
description = "Batched Queue"
authors = ["Daniel Sullivan"]
readme = "README.md"
packages = [
    { include = "batched_queue", from = "src" },
]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
cython = "^3.0.10"


[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
coverage = { extras = ["toml"], version = "*" }
Sphinx = "*"
sphinx-immaterial = "*"
pytest-randomly = "*"
setuptools = "*"

pytest-xdist = "*"
myst-parser = "*"
bump2version = "*"
pystache = "*"
toml = "*"
pytest-rerunfailures = "^14.0"


[tool.poetry.build]
script = "build.py"
generate-setup-file = true

[build-system]
requires = ["poetry-core>=1.2.0", "Cython>=3", "setuptools"]
build-backend = "poetry.core.masonry.api"
# region Ruff
[tool.ruff]
line-length = 100
exclude = [
    "legacy",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
select = ["N", # pep8-naming
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "COM", # flake8-commas
    "T10", # flake8-debugger

    #    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "S", # flake8-bandit
    "W", # pycodestyle
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "NPY", # numpy
    "PERF", # Perflint
    #    "FURB", # refurb
    "RUF", # ruff

]

ignore = [
    'COM812',
    'PD901', # pandas-vet generic variable name df
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402", "S101"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["data_integration"]



[tool.ruff.lint.pydocstyle]
convention = "google"
# endregion
# region pytest
[tool.pytest.ini_options]
addopts = ["-m", "not deployed"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
markers = ["deployed: marks tests for testing the deployed application only"]
norecursedirs = ["app", "package_nonprod", "package_prod", "legacy"]

#endregion

[tool.coverage.run]
branch = true
omit = ["*/contract/suite/*"]
source = ["src"]
plugins = ["Cython.Coverage"]

[tool.coverage.report]
show_missing = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "if .*? == .DEBUG.",
    "if .*? == .INFO.",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

#endregion

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules",
    "**/__pycache__",
]
defineConstant = { DEBUG = true }
stubPath = "src/stubs"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"

executionEnvironments = [
  { root = "src/web", pythonVersion = "3.5", pythonPlatform = "Windows", extraPaths = [ "src/service_libs" ] },
  { root = "src/sdk", pythonVersion = "3.0", extraPaths = [ "src/backend" ] },
  { root = "src/tests", extraPaths = ["src/tests/e2e", "src/sdk" ]},
  { root = "src" }
]
