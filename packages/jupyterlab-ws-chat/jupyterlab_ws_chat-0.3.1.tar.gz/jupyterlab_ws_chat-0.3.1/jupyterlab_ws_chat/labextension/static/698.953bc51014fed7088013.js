"use strict";(self.webpackChunkjupyterlab_ws_chat=self.webpackChunkjupyterlab_ws_chat||[]).push([[698],{2698:(e,t,o)=>{o.r(t),o.d(t,{default:()=>p});var s=o(538),n=o(974),i=o(2607),r=o(31),a=o(7656),c=o(765),l=o(4074),d=o(2465),h=o(7262);class u extends s.ChatModel{constructor(e={}){var t;super(e),this._userId="",this._socket=null,this._sendResolverQueue=new Map,this._connectionInitialized=new h.PromiseDelegate,this.serverSettings=null!==(t=e.serverSettings)&&void 0!==t?t:d.ServerConnection.makeSettings(),this.name="chat"}get userId(){return this._userId}set userId(e){this._userId=e}async initialize(){this._initialize(),await this._connectionInitialized.promise}addMessage(e){return e.id=h.UUID.uuid4(),new Promise((t=>{var o;null===(o=this._socket)||void 0===o||o.send(JSON.stringify(e)),this._sendResolverQueue.set(e.id,t)}))}async getHistory(){let e={messages:[]};try{e=await async function(e="",t={}){const o=d.ServerConnection.makeSettings(),s=l.URLExt.join(o.baseUrl,"api/chat",e);let n;try{n=await d.ServerConnection.makeRequest(s,t,o)}catch(e){throw new d.ServerConnection.NetworkError(e)}let i=await n.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",n)}if(!n.ok)throw new d.ServerConnection.ResponseError(n,i.message||i);return i}("history",{method:"GET"})}catch(e){return Promise.reject(e)}return e}dispose(){super.dispose();const e=this._socket;e&&(this._socket=null,e.onopen=()=>{},e.onerror=()=>{},e.onmessage=()=>{},e.onclose=()=>{},e.close())}messageAdded(e){var t;"msg"===e.type?(e.sender.id===this.userId&&(null===(t=this._sendResolverQueue.get(e.id))||void 0===t||t(!0)),super.messageAdded(e)):"connection"===e.type&&(this.userId=e.client_id,this._connectionInitialized.resolve(!0))}_onClose(e){if(this._connectionInitialized.reject(new Error("Chat UI websocket disconnected")),console.error("Chat UI websocket disconnected"),1006===e.code){const e=1;console.info(`Will try to reconnect in ${e} s.`),setTimeout((async()=>await this.initialize()),1e3*e)}}_initialize(){if(this.isDisposed)return;console.log("Creating a new websocket connection for chat...");const{token:e,WebSocket:t,wsUrl:o}=this.serverSettings,s=l.URLExt.join(o,"api/chat")+(e?`?token=${encodeURIComponent(e)}`:""),n=this._socket=new t(s);n.onclose=e=>this._onClose(e),n.onerror=e=>console.error(e),n.onmessage=e=>e.data&&this.messageAdded(JSON.parse(e.data))}}const g="jupyterlab-ws-chat:chat",p=[{id:"jupyterlab-ws-chat:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:s.IAutocompletionRegistry,activate:e=>new s.AutocompletionRegistry},{id:g,description:"A chat extension for Jupyterlab",autoStart:!0,requires:[a.IRenderMimeRegistry],optional:[s.IAutocompletionRegistry,n.ILayoutRestorer,r.INotebookTracker,c.ISettingRegistry,i.IThemeManager],activate:async(e,t,o,n,i,r,a)=>{const c=new s.ActiveCellManager({tracker:i,shell:e.shell}),l=new u({commands:e.commands,activeCellManager:c});let d=!1,h=!0,p=!0,m=!0;function w(e){d=e.get("sendWithShiftEnter").composite,h=e.get("stackMessages").composite,p=e.get("unreadNotifications").composite,m=e.get("enableCodeToolbar").composite,l.config={sendWithShiftEnter:d,stackMessages:h,unreadNotifications:p,enableCodeToolbar:m}}Promise.all([e.restored,null==r?void 0:r.load(g)]).then((([,e])=>{e?(w(e),e.changed.connect(w)):console.warn("The SettingsRegistry is not loaded for the chat extension")})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)}));let y=null;try{await l.initialize(),y=(0,s.buildChatSidebar)({model:l,themeManager:a,rmRegistry:t,autocompletionRegistry:o})}catch(e){y=(0,s.buildErrorWidget)(a)}e.shell.add(y,"left",{rank:2e3}),n&&n.add(y,"jupyter-chat"),console.log("Chat extension initialized")}}]}}]);