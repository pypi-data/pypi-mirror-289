from .wrapper import Wrapper
from .genvalue import randint, randchar

def randlist_any(size, wrapgen, sorted=False, reverse=False):
    """Get a random list of length `size`, with elements generated by `wrapgen`.

    Args:
        `size`: Length of list.
        `wrapgen`: Wrapped generator for elements.
        `sorted`: `True` if the returned list is sorted. Defaults to `False`.
        `reverse`: `True` if the returned list is sorted in descending order. Defaults to `False`.
    """
    if not isinstance(wrapgen, Wrapper):
        raise TypeError(f"Second argument must have type <Wrapper>, not <{type(wrapgen).__name__}>.")
    res = [wrapgen() for _ in range(size)]
    if sorted:
        res.sort(reverse=reverse)
    return res

def randlist_uniqueint(size, a, b, sorted=False, reverse=False):
    """Get a random list of unique integers in inclusive range [lowerbound,upperbound]

    Args:
        `size`: Length of list.
        `a`: Lower bound of the range.
        `b`: Upper bound of the range.
        `sorted`: `True` if the returned list is sorted. Defaults to `False`.
        `reverse`: `True` if the returned list is sorted in descending order. Defaults to `False`.
    """
    if size > b-a+1:
        raise ValueError("Cannot generate a list of unique integers where the length is greater than the range.")
    hmap = {}
    res = []
    for _ in range(size):
        val = randint(a, b)
        res.append(hmap.get(val,val))
        hmap[val] = hmap.get(b,b)
        b -= 1
    if sorted:
        res.sort(reverse=reverse)
    return res

def randmatrix_any(numrow, numcol, wrapgen):
    """Get a random list of size `numrow` by `numcol`, with elements generated by `wrapgen`.

    Args:
        `numrow`: Number of rows.
        `numcol`: Number of columns.
        `wrapgen`: Wrapped generator for elements.
    """
    if not isinstance(wrapgen, Wrapper):
        raise TypeError(f"Second argument must have type <Wrapper>, not <{type(wrapgen).__name__}>.")
    return [[wrapgen() for _ in range(numcol)] for _ in range(numrow)]

def randstring(length, chars):
    """Get a random string of length `length` whose characters randomly chosen from `chars`.

    Args:
        `length`: Length of string.
        `chars`: List of characters.
    """
    generator = Wrapper(randchar, chars)
    return ''.join(generator() for _ in range(length))

def randlist_string(size, length, chars):
    """Get a random list of `size` strings of length `length` with characters from `chars`.

    Args:
        `size`: Length of list.
        `length`: Length of each string.
        `chars`: List of characters.
    """
    generator = Wrapper(randstring, length, chars)
    return [generator() for _ in range(size)]