####################
### Build System ###
####################

[build-system]
requires = [
  "hatchling",
  "hatch-semver"
]
build-backend = "hatchling.build"


###############
### Project ###
###############


[project]
name = "PyQtWaitingSpinner"
dynamic = ["version"]
description = "(Py)QtWaitingSpinner is a highly configurable, custom Qt widget for showing \"waiting\" or \"loading\" spinner icons in (Py)Qt(6) applications."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = [
  "qt",
  "qt6",
  "pyqt",
  "pyqt6",
  "widget",
  "spinner",
  "loading",
  "waiting",
]
authors = [
  { name = "Batticus", email = "myshorts.mail@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: X11 Applications :: Qt",
  "Framework :: Hatch",
  "Framework :: MkDocs",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: Microsoft :: Windows :: Windows 10",
  "Operating System :: OS Independent",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Widget Sets",
]
dependencies = [
  "PyQt6",
  "PyYAML",
]

[project.urls]
Documentation = "https://pyqtwaitingspinner.readthedocs.io/en/latest/"
Issues = "https://gitlab.com/Batticus/pyqtwaitingspinner/-/issues"
Homepage = "https://gitlab.com/Batticus/pyqtwaitingspinner"

# [project.optional-dependencies]
# test = [
#   "pytest",
#   "pytest-qt",
#   # "pytest-cov",
#   "coverage",
#   "ruff",
#   # "mccabe",
# ]

[project.scripts]
spinner-conf = "pyqtwaitingspinner.configurator:main"


################
### Coverage ###
################


[tool.coverage.run]
branch = true

[tool.coverage.report]
# See: https://coverage.readthedocs.io/en/7.5.4/config.html#report-show-missing
# &
# https://coverage.readthedocs.io/en/7.5.4/cmd.html#cmd-report
show_missing = true  # true (default) ~ Show missing lines.
skip_covered = true  # true (default) ~ Donâ€™t report files that are 100% covered

[tool.coverage.html]
directory = "reports/cov-html"

[tool.coverage.json]
output = "reports/cov-json.json"
pretty_print = false


############
### Ruff ###
############


[tool.ruff]
# target-version = "py37"
target-version = "py311"
line-length = 79

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore Union pattern
  "UP007",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.mccabe]
max-complexity = 5


#############
### Hatch ###
#############


[tool.hatch.version]
path = "pyqtwaitingspinner/__about__.py"
scheme = "semver"

[tool.hatch.build.targets.sdist]
exclude = [
  "/dist",
  "/site",
  "/vscode_task_scripts",
  "/tests",
  "/static",
  "/tdl",
  "/other",
  "/mkdocs_custom_theme",
  "/docs",
  "/__pycache__",
  "/.pytest_cache",
  "/.ruff_cache",
  "/.venv",
  "/.vscode"
]

[tool.hatch.build.targets.wheel]
exclude = [
  "/dist",
  "/site",
  "/vscode_task_scripts",
  "/tests",
  "/static",
  "/tdl",
  "/other",
  "/mkdocs_custom_theme",
  "/docs",
  "/__pycache__",
  "/.pytest_cache",
  "/.ruff_cache",
  "/.venv",
  "/.vscode"
]

[tool.hatch.envs.pyvers]
dependencies = [
  "pytest",
  "pytest-qt",
]

[tool.hatch.envs.tests]
dependencies = [
  "coverage",
  "pytest",
  # "pytest-cov",
  "pytest-qt",
  "ruff",
  "mccabe",
]

[tool.hatch.envs.docs]
dependencies = ["mkdocs"]

[tool.hatch.envs.pyvers.scripts]
run = "python -m pytest ./tests/"

[tool.hatch.envs.tests.scripts]
cov = "coverage run -m pytest ./tests/"
cov-report = "coverage report -m"
cov-report-html = "coverage html"
cov-report-json = "coverage json"
cov-basic = [
  "cov",
  "cov-report",
]
cov-html = [
  "cov-basic",
  "cov-report-html",
]
cov-json = [
  "cov-basic",
  "cov-report-json"
]
cov-full = [
  "cov-basic",
  "cov-report-html",
  "cov-report-json"
]
cov-clear = "coverage erase"
mc = [
  "python -m mccabe --min 5 ./pyqtwaitingspinner/spinner.py",
  "python -m mccabe --min 5 ./pyqtwaitingspinner/parameters.py",
  "python -m mccabe --min 5 ./pyqtwaitingspinner/configurator.py",
]
check = "ruff check ./pyqtwaitingspinner"
fix = "ruff check --fix ./pyqtwaitingspinner"

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"

[[tool.hatch.envs.pyvers.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[[tool.hatch.envs.tests.matrix]]
python = ["3.11"]

[[tool.hatch.envs.docs.matrix]]
python = ["3.11"]
