// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: attr_value.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_attr_5fvalue_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_attr_5fvalue_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_attr_5fvalue_2eproto;
namespace gs {
namespace rpc {
class AttrValue;
struct AttrValueDefaultTypeInternal;
extern AttrValueDefaultTypeInternal _AttrValue_default_instance_;
class AttrValue_ListValue;
struct AttrValue_ListValueDefaultTypeInternal;
extern AttrValue_ListValueDefaultTypeInternal _AttrValue_ListValue_default_instance_;
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class ChunkMeta;
struct ChunkMetaDefaultTypeInternal;
extern ChunkMetaDefaultTypeInternal _ChunkMeta_default_instance_;
class ChunkMeta_AttrEntry_DoNotUse;
struct ChunkMeta_AttrEntry_DoNotUseDefaultTypeInternal;
extern ChunkMeta_AttrEntry_DoNotUseDefaultTypeInternal _ChunkMeta_AttrEntry_DoNotUse_default_instance_;
class Chunk_AttrEntry_DoNotUse;
struct Chunk_AttrEntry_DoNotUseDefaultTypeInternal;
extern Chunk_AttrEntry_DoNotUseDefaultTypeInternal _Chunk_AttrEntry_DoNotUse_default_instance_;
class LargeAttrValue;
struct LargeAttrValueDefaultTypeInternal;
extern LargeAttrValueDefaultTypeInternal _LargeAttrValue_default_instance_;
class LargeAttrValue_ChunkList;
struct LargeAttrValue_ChunkListDefaultTypeInternal;
extern LargeAttrValue_ChunkListDefaultTypeInternal _LargeAttrValue_ChunkList_default_instance_;
class LargeAttrValue_ChunkMetaList;
struct LargeAttrValue_ChunkMetaListDefaultTypeInternal;
extern LargeAttrValue_ChunkMetaListDefaultTypeInternal _LargeAttrValue_ChunkMetaList_default_instance_;
class NameAttrList;
struct NameAttrListDefaultTypeInternal;
extern NameAttrListDefaultTypeInternal _NameAttrList_default_instance_;
class NameAttrList_AttrEntry_DoNotUse;
struct NameAttrList_AttrEntry_DoNotUseDefaultTypeInternal;
extern NameAttrList_AttrEntry_DoNotUseDefaultTypeInternal _NameAttrList_AttrEntry_DoNotUse_default_instance_;
}  // namespace rpc
}  // namespace gs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace gs {
namespace rpc {
enum AttrValue_NullValue : int {
  AttrValue_NullValue_NULL_VALUE = 0,
  AttrValue_NullValue_AttrValue_NullValue_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AttrValue_NullValue_AttrValue_NullValue_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AttrValue_NullValue_IsValid(int value);
extern const uint32_t AttrValue_NullValue_internal_data_[];
constexpr AttrValue_NullValue AttrValue_NullValue_NullValue_MIN = static_cast<AttrValue_NullValue>(0);
constexpr AttrValue_NullValue AttrValue_NullValue_NullValue_MAX = static_cast<AttrValue_NullValue>(0);
constexpr int AttrValue_NullValue_NullValue_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
AttrValue_NullValue_descriptor();
template <typename T>
const std::string& AttrValue_NullValue_Name(T value) {
  static_assert(std::is_same<T, AttrValue_NullValue>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NullValue_Name().");
  return AttrValue_NullValue_Name(static_cast<AttrValue_NullValue>(value));
}
template <>
inline const std::string& AttrValue_NullValue_Name(AttrValue_NullValue value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AttrValue_NullValue_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool AttrValue_NullValue_Parse(absl::string_view name, AttrValue_NullValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttrValue_NullValue>(
      AttrValue_NullValue_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AttrValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.AttrValue) */ {
 public:
  inline AttrValue() : AttrValue(nullptr) {}
  ~AttrValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttrValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline AttrValue(const AttrValue& from) : AttrValue(nullptr, from) {}
  inline AttrValue(AttrValue&& from) noexcept
      : AttrValue(nullptr, std::move(from)) {}
  inline AttrValue& operator=(const AttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrValue& operator=(AttrValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kNull = 1,
    kS = 2,
    kI = 3,
    kU = 4,
    kF = 5,
    kB = 6,
    kList = 11,
    kFunc = 12,
    VALUE_NOT_SET = 0,
  };
  static inline const AttrValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue*>(
        &_AttrValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AttrValue& a, AttrValue& b) { a.Swap(&b); }
  inline void Swap(AttrValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AttrValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttrValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttrValue& from) { AttrValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttrValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.AttrValue"; }

 protected:
  explicit AttrValue(::google::protobuf::Arena* arena);
  AttrValue(::google::protobuf::Arena* arena, const AttrValue& from);
  AttrValue(::google::protobuf::Arena* arena, AttrValue&& from) noexcept
      : AttrValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ListValue = AttrValue_ListValue;
  using NullValue = AttrValue_NullValue;
  static constexpr NullValue NULL_VALUE = AttrValue_NullValue_NULL_VALUE;
  static inline bool NullValue_IsValid(int value) {
    return AttrValue_NullValue_IsValid(value);
  }
  static constexpr NullValue NullValue_MIN = AttrValue_NullValue_NullValue_MIN;
  static constexpr NullValue NullValue_MAX = AttrValue_NullValue_NullValue_MAX;
  static constexpr int NullValue_ARRAYSIZE = AttrValue_NullValue_NullValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NullValue_descriptor() {
    return AttrValue_NullValue_descriptor();
  }
  template <typename T>
  static inline const std::string& NullValue_Name(T value) {
    return AttrValue_NullValue_Name(value);
  }
  static inline bool NullValue_Parse(absl::string_view name, NullValue* value) {
    return AttrValue_NullValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNullFieldNumber = 1,
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kUFieldNumber = 4,
    kFFieldNumber = 5,
    kBFieldNumber = 6,
    kListFieldNumber = 11,
    kFuncFieldNumber = 12,
  };
  // .gs.rpc.AttrValue.NullValue null = 1;
  bool has_null() const;
  void clear_null() ;
  ::gs::rpc::AttrValue_NullValue null() const;
  void set_null(::gs::rpc::AttrValue_NullValue value);

  private:
  ::gs::rpc::AttrValue_NullValue _internal_null() const;
  void _internal_set_null(::gs::rpc::AttrValue_NullValue value);

  public:
  // bytes s = 2;
  bool has_s() const;
  void clear_s() ;
  const std::string& s() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* value);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  // int64 i = 3;
  bool has_i() const;
  void clear_i() ;
  ::int64_t i() const;
  void set_i(::int64_t value);

  private:
  ::int64_t _internal_i() const;
  void _internal_set_i(::int64_t value);

  public:
  // uint64 u = 4;
  bool has_u() const;
  void clear_u() ;
  ::uint64_t u() const;
  void set_u(::uint64_t value);

  private:
  ::uint64_t _internal_u() const;
  void _internal_set_u(::uint64_t value);

  public:
  // float f = 5;
  bool has_f() const;
  void clear_f() ;
  float f() const;
  void set_f(float value);

  private:
  float _internal_f() const;
  void _internal_set_f(float value);

  public:
  // bool b = 6;
  bool has_b() const;
  void clear_b() ;
  bool b() const;
  void set_b(bool value);

  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);

  public:
  // .gs.rpc.AttrValue.ListValue list = 11;
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::gs::rpc::AttrValue_ListValue& list() const;
  PROTOBUF_NODISCARD ::gs::rpc::AttrValue_ListValue* release_list();
  ::gs::rpc::AttrValue_ListValue* mutable_list();
  void set_allocated_list(::gs::rpc::AttrValue_ListValue* value);
  void unsafe_arena_set_allocated_list(::gs::rpc::AttrValue_ListValue* value);
  ::gs::rpc::AttrValue_ListValue* unsafe_arena_release_list();

  private:
  const ::gs::rpc::AttrValue_ListValue& _internal_list() const;
  ::gs::rpc::AttrValue_ListValue* _internal_mutable_list();

  public:
  // .gs.rpc.NameAttrList func = 12;
  bool has_func() const;
  private:
  bool _internal_has_func() const;

  public:
  void clear_func() ;
  const ::gs::rpc::NameAttrList& func() const;
  PROTOBUF_NODISCARD ::gs::rpc::NameAttrList* release_func();
  ::gs::rpc::NameAttrList* mutable_func();
  void set_allocated_func(::gs::rpc::NameAttrList* value);
  void unsafe_arena_set_allocated_func(::gs::rpc::NameAttrList* value);
  ::gs::rpc::NameAttrList* unsafe_arena_release_func();

  private:
  const ::gs::rpc::NameAttrList& _internal_func() const;
  ::gs::rpc::NameAttrList* _internal_mutable_func();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.AttrValue)
 private:
  class _Internal;
  void set_has_null();
  void set_has_s();
  void set_has_i();
  void set_has_u();
  void set_has_f();
  void set_has_b();
  void set_has_list();
  void set_has_func();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AttrValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AttrValue& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      int null_;
      ::google::protobuf::internal::ArenaStringPtr s_;
      ::int64_t i_;
      ::uint64_t u_;
      float f_;
      bool b_;
      ::gs::rpc::AttrValue_ListValue* list_;
      ::gs::rpc::NameAttrList* func_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class AttrValue_ListValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.AttrValue.ListValue) */ {
 public:
  inline AttrValue_ListValue() : AttrValue_ListValue(nullptr) {}
  ~AttrValue_ListValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttrValue_ListValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline AttrValue_ListValue(const AttrValue_ListValue& from) : AttrValue_ListValue(nullptr, from) {}
  inline AttrValue_ListValue(AttrValue_ListValue&& from) noexcept
      : AttrValue_ListValue(nullptr, std::move(from)) {}
  inline AttrValue_ListValue& operator=(const AttrValue_ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrValue_ListValue& operator=(AttrValue_ListValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrValue_ListValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttrValue_ListValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue_ListValue*>(
        &_AttrValue_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AttrValue_ListValue& a, AttrValue_ListValue& b) { a.Swap(&b); }
  inline void Swap(AttrValue_ListValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrValue_ListValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrValue_ListValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AttrValue_ListValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttrValue_ListValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttrValue_ListValue& from) { AttrValue_ListValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttrValue_ListValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.AttrValue.ListValue"; }

 protected:
  explicit AttrValue_ListValue(::google::protobuf::Arena* arena);
  AttrValue_ListValue(::google::protobuf::Arena* arena, const AttrValue_ListValue& from);
  AttrValue_ListValue(::google::protobuf::Arena* arena, AttrValue_ListValue&& from) noexcept
      : AttrValue_ListValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kFuncFieldNumber = 9,
    kListFieldNumber = 10,
  };
  // repeated bytes s = 2;
  int s_size() const;
  private:
  int _internal_s_size() const;

  public:
  void clear_s() ;
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const void* value, std::size_t size);
  void set_s(int index, absl::string_view value);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const void* value, std::size_t size);
  void add_s(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& s() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_s();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_s() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_s();

  public:
  // repeated int64 i = 3 [packed = true];
  int i_size() const;
  private:
  int _internal_i_size() const;

  public:
  void clear_i() ;
  ::int64_t i(int index) const;
  void set_i(int index, ::int64_t value);
  void add_i(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& i() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_i();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_i() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_i();

  public:
  // repeated float f = 4 [packed = true];
  int f_size() const;
  private:
  int _internal_f_size() const;

  public:
  void clear_f() ;
  float f(int index) const;
  void set_f(int index, float value);
  void add_f(float value);
  const ::google::protobuf::RepeatedField<float>& f() const;
  ::google::protobuf::RepeatedField<float>* mutable_f();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f();

  public:
  // repeated bool b = 5 [packed = true];
  int b_size() const;
  private:
  int _internal_b_size() const;

  public:
  void clear_b() ;
  bool b(int index) const;
  void set_b(int index, bool value);
  void add_b(bool value);
  const ::google::protobuf::RepeatedField<bool>& b() const;
  ::google::protobuf::RepeatedField<bool>* mutable_b();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_b() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_b();

  public:
  // repeated .gs.rpc.NameAttrList func = 9;
  int func_size() const;
  private:
  int _internal_func_size() const;

  public:
  void clear_func() ;
  ::gs::rpc::NameAttrList* mutable_func(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>* mutable_func();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>& _internal_func() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>* _internal_mutable_func();
  public:
  const ::gs::rpc::NameAttrList& func(int index) const;
  ::gs::rpc::NameAttrList* add_func();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>& func() const;
  // repeated .gs.rpc.AttrValue.ListValue list = 10;
  int list_size() const;
  private:
  int _internal_list_size() const;

  public:
  void clear_list() ;
  ::gs::rpc::AttrValue_ListValue* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>* mutable_list();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>& _internal_list() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>* _internal_mutable_list();
  public:
  const ::gs::rpc::AttrValue_ListValue& list(int index) const;
  ::gs::rpc::AttrValue_ListValue* add_list();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>& list() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.AttrValue.ListValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AttrValue_ListValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AttrValue_ListValue& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> s_;
    ::google::protobuf::RepeatedField<::int64_t> i_;
    mutable ::google::protobuf::internal::CachedSize _i_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> f_;
    ::google::protobuf::RepeatedField<bool> b_;
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::NameAttrList > func_;
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::AttrValue_ListValue > list_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class NameAttrList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.NameAttrList) */ {
 public:
  inline NameAttrList() : NameAttrList(nullptr) {}
  ~NameAttrList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NameAttrList(
      ::google::protobuf::internal::ConstantInitialized);

  inline NameAttrList(const NameAttrList& from) : NameAttrList(nullptr, from) {}
  inline NameAttrList(NameAttrList&& from) noexcept
      : NameAttrList(nullptr, std::move(from)) {}
  inline NameAttrList& operator=(const NameAttrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameAttrList& operator=(NameAttrList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameAttrList& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameAttrList* internal_default_instance() {
    return reinterpret_cast<const NameAttrList*>(
        &_NameAttrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(NameAttrList& a, NameAttrList& b) { a.Swap(&b); }
  inline void Swap(NameAttrList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameAttrList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameAttrList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NameAttrList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NameAttrList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NameAttrList& from) { NameAttrList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NameAttrList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.NameAttrList"; }

 protected:
  explicit NameAttrList(::google::protobuf::Arena* arena);
  NameAttrList(::google::protobuf::Arena* arena, const NameAttrList& from);
  NameAttrList(::google::protobuf::Arena* arena, NameAttrList&& from) noexcept
      : NameAttrList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttrFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<int32, .gs.rpc.AttrValue> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;

  public:
  void clear_attr() ;
  const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& attr() const;
  ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* mutable_attr();

  private:
  const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& _internal_attr() const;
  ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* _internal_mutable_attr();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.NameAttrList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      32, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NameAttrList_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NameAttrList& from_msg);
    ::google::protobuf::internal::MapField<NameAttrList_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        attr_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class NameAttrList_AttrEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          NameAttrList_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      NameAttrList_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  NameAttrList_AttrEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NameAttrList_AttrEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NameAttrList_AttrEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NameAttrList_AttrEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NameAttrList_AttrEntry_DoNotUse*>(
        &_NameAttrList_AttrEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class ChunkMeta_AttrEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ChunkMeta_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ChunkMeta_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ChunkMeta_AttrEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkMeta_AttrEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ChunkMeta_AttrEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ChunkMeta_AttrEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ChunkMeta_AttrEntry_DoNotUse*>(
        &_ChunkMeta_AttrEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class Chunk_AttrEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Chunk_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Chunk_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  Chunk_AttrEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Chunk_AttrEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Chunk_AttrEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Chunk_AttrEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Chunk_AttrEntry_DoNotUse*>(
        &_Chunk_AttrEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class ChunkMeta final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.ChunkMeta) */ {
 public:
  inline ChunkMeta() : ChunkMeta(nullptr) {}
  ~ChunkMeta() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkMeta(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChunkMeta(const ChunkMeta& from) : ChunkMeta(nullptr, from) {}
  inline ChunkMeta(ChunkMeta&& from) noexcept
      : ChunkMeta(nullptr, std::move(from)) {}
  inline ChunkMeta& operator=(const ChunkMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkMeta& operator=(ChunkMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkMeta* internal_default_instance() {
    return reinterpret_cast<const ChunkMeta*>(
        &_ChunkMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ChunkMeta& a, ChunkMeta& b) { a.Swap(&b); }
  inline void Swap(ChunkMeta* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ChunkMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkMeta& from) { ChunkMeta::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChunkMeta* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.ChunkMeta"; }

 protected:
  explicit ChunkMeta(::google::protobuf::Arena* arena);
  ChunkMeta(::google::protobuf::Arena* arena, const ChunkMeta& from);
  ChunkMeta(::google::protobuf::Arena* arena, ChunkMeta&& from) noexcept
      : ChunkMeta(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttrFieldNumber = 3,
    kSizeFieldNumber = 1,
  };
  // map<int32, .gs.rpc.AttrValue> attr = 3;
  int attr_size() const;
  private:
  int _internal_attr_size() const;

  public:
  void clear_attr() ;
  const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& attr() const;
  ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* mutable_attr();

  private:
  const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& _internal_attr() const;
  ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* _internal_mutable_attr();

  public:
  // int64 size = 1;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.ChunkMeta)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ChunkMeta_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChunkMeta& from_msg);
    ::google::protobuf::internal::MapField<ChunkMeta_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        attr_;
    ::int64_t size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class Chunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Chunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline Chunk(const Chunk& from) : Chunk(nullptr, from) {}
  inline Chunk(Chunk&& from) noexcept
      : Chunk(nullptr, std::move(from)) {}
  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
        &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Chunk& a, Chunk& b) { a.Swap(&b); }
  inline void Swap(Chunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Chunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Chunk& from) { Chunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Chunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.Chunk"; }

 protected:
  explicit Chunk(::google::protobuf::Arena* arena);
  Chunk(::google::protobuf::Arena* arena, const Chunk& from);
  Chunk(::google::protobuf::Arena* arena, Chunk&& from) noexcept
      : Chunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttrFieldNumber = 2,
    kBufferFieldNumber = 1,
  };
  // map<int32, .gs.rpc.AttrValue> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;

  public:
  void clear_attr() ;
  const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& attr() const;
  ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* mutable_attr();

  private:
  const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& _internal_attr() const;
  ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* _internal_mutable_attr();

  public:
  // bytes buffer = 1;
  void clear_buffer() ;
  const std::string& buffer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_buffer(Arg_&& arg, Args_... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* value);

  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(
      const std::string& value);
  std::string* _internal_mutable_buffer();

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.Chunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Chunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Chunk& from_msg);
    ::google::protobuf::internal::MapField<Chunk_AttrEntry_DoNotUse, ::int32_t, ::gs::rpc::AttrValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        attr_;
    ::google::protobuf::internal::ArenaStringPtr buffer_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class LargeAttrValue_ChunkMetaList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.LargeAttrValue.ChunkMetaList) */ {
 public:
  inline LargeAttrValue_ChunkMetaList() : LargeAttrValue_ChunkMetaList(nullptr) {}
  ~LargeAttrValue_ChunkMetaList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LargeAttrValue_ChunkMetaList(
      ::google::protobuf::internal::ConstantInitialized);

  inline LargeAttrValue_ChunkMetaList(const LargeAttrValue_ChunkMetaList& from) : LargeAttrValue_ChunkMetaList(nullptr, from) {}
  inline LargeAttrValue_ChunkMetaList(LargeAttrValue_ChunkMetaList&& from) noexcept
      : LargeAttrValue_ChunkMetaList(nullptr, std::move(from)) {}
  inline LargeAttrValue_ChunkMetaList& operator=(const LargeAttrValue_ChunkMetaList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeAttrValue_ChunkMetaList& operator=(LargeAttrValue_ChunkMetaList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeAttrValue_ChunkMetaList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeAttrValue_ChunkMetaList* internal_default_instance() {
    return reinterpret_cast<const LargeAttrValue_ChunkMetaList*>(
        &_LargeAttrValue_ChunkMetaList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(LargeAttrValue_ChunkMetaList& a, LargeAttrValue_ChunkMetaList& b) { a.Swap(&b); }
  inline void Swap(LargeAttrValue_ChunkMetaList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeAttrValue_ChunkMetaList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargeAttrValue_ChunkMetaList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LargeAttrValue_ChunkMetaList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LargeAttrValue_ChunkMetaList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LargeAttrValue_ChunkMetaList& from) { LargeAttrValue_ChunkMetaList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LargeAttrValue_ChunkMetaList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.LargeAttrValue.ChunkMetaList"; }

 protected:
  explicit LargeAttrValue_ChunkMetaList(::google::protobuf::Arena* arena);
  LargeAttrValue_ChunkMetaList(::google::protobuf::Arena* arena, const LargeAttrValue_ChunkMetaList& from);
  LargeAttrValue_ChunkMetaList(::google::protobuf::Arena* arena, LargeAttrValue_ChunkMetaList&& from) noexcept
      : LargeAttrValue_ChunkMetaList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .gs.rpc.ChunkMeta items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::gs::rpc::ChunkMeta* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>* mutable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>* _internal_mutable_items();
  public:
  const ::gs::rpc::ChunkMeta& items(int index) const;
  ::gs::rpc::ChunkMeta* add_items();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>& items() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.LargeAttrValue.ChunkMetaList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LargeAttrValue_ChunkMetaList_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LargeAttrValue_ChunkMetaList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::ChunkMeta > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class LargeAttrValue_ChunkList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.LargeAttrValue.ChunkList) */ {
 public:
  inline LargeAttrValue_ChunkList() : LargeAttrValue_ChunkList(nullptr) {}
  ~LargeAttrValue_ChunkList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LargeAttrValue_ChunkList(
      ::google::protobuf::internal::ConstantInitialized);

  inline LargeAttrValue_ChunkList(const LargeAttrValue_ChunkList& from) : LargeAttrValue_ChunkList(nullptr, from) {}
  inline LargeAttrValue_ChunkList(LargeAttrValue_ChunkList&& from) noexcept
      : LargeAttrValue_ChunkList(nullptr, std::move(from)) {}
  inline LargeAttrValue_ChunkList& operator=(const LargeAttrValue_ChunkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeAttrValue_ChunkList& operator=(LargeAttrValue_ChunkList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeAttrValue_ChunkList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeAttrValue_ChunkList* internal_default_instance() {
    return reinterpret_cast<const LargeAttrValue_ChunkList*>(
        &_LargeAttrValue_ChunkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(LargeAttrValue_ChunkList& a, LargeAttrValue_ChunkList& b) { a.Swap(&b); }
  inline void Swap(LargeAttrValue_ChunkList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeAttrValue_ChunkList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargeAttrValue_ChunkList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LargeAttrValue_ChunkList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LargeAttrValue_ChunkList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LargeAttrValue_ChunkList& from) { LargeAttrValue_ChunkList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LargeAttrValue_ChunkList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.LargeAttrValue.ChunkList"; }

 protected:
  explicit LargeAttrValue_ChunkList(::google::protobuf::Arena* arena);
  LargeAttrValue_ChunkList(::google::protobuf::Arena* arena, const LargeAttrValue_ChunkList& from);
  LargeAttrValue_ChunkList(::google::protobuf::Arena* arena, LargeAttrValue_ChunkList&& from) noexcept
      : LargeAttrValue_ChunkList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .gs.rpc.Chunk items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::gs::rpc::Chunk* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>* mutable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>* _internal_mutable_items();
  public:
  const ::gs::rpc::Chunk& items(int index) const;
  ::gs::rpc::Chunk* add_items();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>& items() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.LargeAttrValue.ChunkList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LargeAttrValue_ChunkList_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LargeAttrValue_ChunkList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::Chunk > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class LargeAttrValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.LargeAttrValue) */ {
 public:
  inline LargeAttrValue() : LargeAttrValue(nullptr) {}
  ~LargeAttrValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LargeAttrValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline LargeAttrValue(const LargeAttrValue& from) : LargeAttrValue(nullptr, from) {}
  inline LargeAttrValue(LargeAttrValue&& from) noexcept
      : LargeAttrValue(nullptr, std::move(from)) {}
  inline LargeAttrValue& operator=(const LargeAttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeAttrValue& operator=(LargeAttrValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeAttrValue& default_instance() {
    return *internal_default_instance();
  }
  enum LargeValueCase {
    kChunkList = 1,
    kChunkMetaList = 2,
    LARGE_VALUE_NOT_SET = 0,
  };
  static inline const LargeAttrValue* internal_default_instance() {
    return reinterpret_cast<const LargeAttrValue*>(
        &_LargeAttrValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(LargeAttrValue& a, LargeAttrValue& b) { a.Swap(&b); }
  inline void Swap(LargeAttrValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeAttrValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LargeAttrValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LargeAttrValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LargeAttrValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LargeAttrValue& from) { LargeAttrValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LargeAttrValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.LargeAttrValue"; }

 protected:
  explicit LargeAttrValue(::google::protobuf::Arena* arena);
  LargeAttrValue(::google::protobuf::Arena* arena, const LargeAttrValue& from);
  LargeAttrValue(::google::protobuf::Arena* arena, LargeAttrValue&& from) noexcept
      : LargeAttrValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ChunkList = LargeAttrValue_ChunkList;
  using ChunkMetaList = LargeAttrValue_ChunkMetaList;

  // accessors -------------------------------------------------------
  enum : int {
    kChunkListFieldNumber = 1,
    kChunkMetaListFieldNumber = 2,
  };
  // .gs.rpc.LargeAttrValue.ChunkList chunk_list = 1;
  bool has_chunk_list() const;
  private:
  bool _internal_has_chunk_list() const;

  public:
  void clear_chunk_list() ;
  const ::gs::rpc::LargeAttrValue_ChunkList& chunk_list() const;
  PROTOBUF_NODISCARD ::gs::rpc::LargeAttrValue_ChunkList* release_chunk_list();
  ::gs::rpc::LargeAttrValue_ChunkList* mutable_chunk_list();
  void set_allocated_chunk_list(::gs::rpc::LargeAttrValue_ChunkList* value);
  void unsafe_arena_set_allocated_chunk_list(::gs::rpc::LargeAttrValue_ChunkList* value);
  ::gs::rpc::LargeAttrValue_ChunkList* unsafe_arena_release_chunk_list();

  private:
  const ::gs::rpc::LargeAttrValue_ChunkList& _internal_chunk_list() const;
  ::gs::rpc::LargeAttrValue_ChunkList* _internal_mutable_chunk_list();

  public:
  // .gs.rpc.LargeAttrValue.ChunkMetaList chunk_meta_list = 2;
  bool has_chunk_meta_list() const;
  private:
  bool _internal_has_chunk_meta_list() const;

  public:
  void clear_chunk_meta_list() ;
  const ::gs::rpc::LargeAttrValue_ChunkMetaList& chunk_meta_list() const;
  PROTOBUF_NODISCARD ::gs::rpc::LargeAttrValue_ChunkMetaList* release_chunk_meta_list();
  ::gs::rpc::LargeAttrValue_ChunkMetaList* mutable_chunk_meta_list();
  void set_allocated_chunk_meta_list(::gs::rpc::LargeAttrValue_ChunkMetaList* value);
  void unsafe_arena_set_allocated_chunk_meta_list(::gs::rpc::LargeAttrValue_ChunkMetaList* value);
  ::gs::rpc::LargeAttrValue_ChunkMetaList* unsafe_arena_release_chunk_meta_list();

  private:
  const ::gs::rpc::LargeAttrValue_ChunkMetaList& _internal_chunk_meta_list() const;
  ::gs::rpc::LargeAttrValue_ChunkMetaList* _internal_mutable_chunk_meta_list();

  public:
  void clear_large_value();
  LargeValueCase large_value_case() const;
  // @@protoc_insertion_point(class_scope:gs.rpc.LargeAttrValue)
 private:
  class _Internal;
  void set_has_chunk_list();
  void set_has_chunk_meta_list();
  inline bool has_large_value() const;
  inline void clear_has_large_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LargeAttrValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LargeAttrValue& from_msg);
    union LargeValueUnion {
      constexpr LargeValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::gs::rpc::LargeAttrValue_ChunkList* chunk_list_;
      ::gs::rpc::LargeAttrValue_ChunkMetaList* chunk_meta_list_;
    } large_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AttrValue_ListValue

// repeated bytes s = 2;
inline int AttrValue_ListValue::_internal_s_size() const {
  return _internal_s().size();
}
inline int AttrValue_ListValue::s_size() const {
  return _internal_s_size();
}
inline void AttrValue_ListValue::clear_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.s_.Clear();
}
inline std::string* AttrValue_ListValue::add_s()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_s()->Add();
  // @@protoc_insertion_point(field_add_mutable:gs.rpc.AttrValue.ListValue.s)
  return _s;
}
inline const std::string& AttrValue_ListValue::s(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.s)
  return _internal_s().Get(index);
}
inline std::string* AttrValue_ListValue::mutable_s(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.ListValue.s)
  return _internal_mutable_s()->Mutable(index);
}
inline void AttrValue_ListValue::set_s(int index, const std::string& value) {
  _internal_mutable_s()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, std::string&& value) {
  _internal_mutable_s()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_s()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_s()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, absl::string_view value) {
  _internal_mutable_s()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_s()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_s()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_s()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_s()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gs.rpc.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_s()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:gs.rpc.AttrValue.ListValue.s)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttrValue_ListValue::s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.s)
  return _internal_s();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttrValue_ListValue::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.s)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_s();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttrValue_ListValue::_internal_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.s_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttrValue_ListValue::_internal_mutable_s() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.s_;
}

// repeated int64 i = 3 [packed = true];
inline int AttrValue_ListValue::_internal_i_size() const {
  return _internal_i().size();
}
inline int AttrValue_ListValue::i_size() const {
  return _internal_i_size();
}
inline void AttrValue_ListValue::clear_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.i_.Clear();
}
inline ::int64_t AttrValue_ListValue::i(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.i)
  return _internal_i().Get(index);
}
inline void AttrValue_ListValue::set_i(int index, ::int64_t value) {
  _internal_mutable_i()->Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.i)
}
inline void AttrValue_ListValue::add_i(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_i()->Add(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.i)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AttrValue_ListValue::i() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.i)
  return _internal_i();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AttrValue_ListValue::mutable_i()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.i)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_i();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
AttrValue_ListValue::_internal_i() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.i_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AttrValue_ListValue::_internal_mutable_i() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.i_;
}

// repeated float f = 4 [packed = true];
inline int AttrValue_ListValue::_internal_f_size() const {
  return _internal_f().size();
}
inline int AttrValue_ListValue::f_size() const {
  return _internal_f_size();
}
inline void AttrValue_ListValue::clear_f() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_.Clear();
}
inline float AttrValue_ListValue::f(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.f)
  return _internal_f().Get(index);
}
inline void AttrValue_ListValue::set_f(int index, float value) {
  _internal_mutable_f()->Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.f)
}
inline void AttrValue_ListValue::add_f(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f()->Add(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.f)
}
inline const ::google::protobuf::RepeatedField<float>& AttrValue_ListValue::f() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.f)
  return _internal_f();
}
inline ::google::protobuf::RepeatedField<float>* AttrValue_ListValue::mutable_f()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.f)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f();
}
inline const ::google::protobuf::RepeatedField<float>&
AttrValue_ListValue::_internal_f() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_;
}
inline ::google::protobuf::RepeatedField<float>* AttrValue_ListValue::_internal_mutable_f() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_;
}

// repeated bool b = 5 [packed = true];
inline int AttrValue_ListValue::_internal_b_size() const {
  return _internal_b().size();
}
inline int AttrValue_ListValue::b_size() const {
  return _internal_b_size();
}
inline void AttrValue_ListValue::clear_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_.Clear();
}
inline bool AttrValue_ListValue::b(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.b)
  return _internal_b().Get(index);
}
inline void AttrValue_ListValue::set_b(int index, bool value) {
  _internal_mutable_b()->Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.ListValue.b)
}
inline void AttrValue_ListValue::add_b(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_b()->Add(value);
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.b)
}
inline const ::google::protobuf::RepeatedField<bool>& AttrValue_ListValue::b() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.b)
  return _internal_b();
}
inline ::google::protobuf::RepeatedField<bool>* AttrValue_ListValue::mutable_b()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.b)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_b();
}
inline const ::google::protobuf::RepeatedField<bool>&
AttrValue_ListValue::_internal_b() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.b_;
}
inline ::google::protobuf::RepeatedField<bool>* AttrValue_ListValue::_internal_mutable_b() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.b_;
}

// repeated .gs.rpc.NameAttrList func = 9;
inline int AttrValue_ListValue::_internal_func_size() const {
  return _internal_func().size();
}
inline int AttrValue_ListValue::func_size() const {
  return _internal_func_size();
}
inline void AttrValue_ListValue::clear_func() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.func_.Clear();
}
inline ::gs::rpc::NameAttrList* AttrValue_ListValue::mutable_func(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.ListValue.func)
  return _internal_mutable_func()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>* AttrValue_ListValue::mutable_func()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.func)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_func();
}
inline const ::gs::rpc::NameAttrList& AttrValue_ListValue::func(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.func)
  return _internal_func().Get(index);
}
inline ::gs::rpc::NameAttrList* AttrValue_ListValue::add_func() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::NameAttrList* _add = _internal_mutable_func()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.func)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>& AttrValue_ListValue::func() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.func)
  return _internal_func();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>&
AttrValue_ListValue::_internal_func() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.func_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::NameAttrList>*
AttrValue_ListValue::_internal_mutable_func() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.func_;
}

// repeated .gs.rpc.AttrValue.ListValue list = 10;
inline int AttrValue_ListValue::_internal_list_size() const {
  return _internal_list().size();
}
inline int AttrValue_ListValue::list_size() const {
  return _internal_list_size();
}
inline void AttrValue_ListValue::clear_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.list_.Clear();
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue_ListValue::mutable_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.ListValue.list)
  return _internal_mutable_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>* AttrValue_ListValue::mutable_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.AttrValue.ListValue.list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_list();
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue_ListValue::list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.ListValue.list)
  return _internal_list().Get(index);
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue_ListValue::add_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::AttrValue_ListValue* _add = _internal_mutable_list()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.AttrValue.ListValue.list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>& AttrValue_ListValue::list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.AttrValue.ListValue.list)
  return _internal_list();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>&
AttrValue_ListValue::_internal_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.list_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::AttrValue_ListValue>*
AttrValue_ListValue::_internal_mutable_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.list_;
}

// -------------------------------------------------------------------

// AttrValue

// .gs.rpc.AttrValue.NullValue null = 1;
inline bool AttrValue::has_null() const {
  return value_case() == kNull;
}
inline void AttrValue::set_has_null() {
  _impl_._oneof_case_[0] = kNull;
}
inline void AttrValue::clear_null() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kNull) {
    _impl_.value_.null_ = 0;
    clear_has_value();
  }
}
inline ::gs::rpc::AttrValue_NullValue AttrValue::null() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.null)
  return _internal_null();
}
inline void AttrValue::set_null(::gs::rpc::AttrValue_NullValue value) {
  if (value_case() != kNull) {
    clear_value();
    set_has_null();
  }
  _impl_.value_.null_ = value;
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.null)
}
inline ::gs::rpc::AttrValue_NullValue AttrValue::_internal_null() const {
  if (value_case() == kNull) {
    return static_cast<::gs::rpc::AttrValue_NullValue>(_impl_.value_.null_);
  }
  return static_cast<::gs::rpc::AttrValue_NullValue>(0);
}

// bytes s = 2;
inline bool AttrValue::has_s() const {
  return value_case() == kS;
}
inline void AttrValue::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void AttrValue::clear_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kS) {
    _impl_.value_.s_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttrValue::s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttrValue::set_s(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kS) {
    clear_value();

    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  _impl_.value_.s_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.s)
}
inline std::string* AttrValue::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.s)
  return _s;
}
inline const std::string& AttrValue::_internal_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kS) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.s_.Get();
}
inline void AttrValue::_internal_set_s(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kS) {
    clear_value();

    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  _impl_.value_.s_.Set(value, GetArena());
}
inline std::string* AttrValue::_internal_mutable_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kS) {
    clear_value();

    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  return _impl_.value_.s_.Mutable( GetArena());
}
inline std::string* AttrValue::release_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.AttrValue.s)
  if (value_case() != kS) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.s_.Release();
}
inline void AttrValue::set_allocated_s(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_s();
    _impl_.value_.s_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.AttrValue.s)
}

// int64 i = 3;
inline bool AttrValue::has_i() const {
  return value_case() == kI;
}
inline void AttrValue::set_has_i() {
  _impl_._oneof_case_[0] = kI;
}
inline void AttrValue::clear_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kI) {
    _impl_.value_.i_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t AttrValue::i() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.i)
  return _internal_i();
}
inline void AttrValue::set_i(::int64_t value) {
  if (value_case() != kI) {
    clear_value();
    set_has_i();
  }
  _impl_.value_.i_ = value;
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.i)
}
inline ::int64_t AttrValue::_internal_i() const {
  if (value_case() == kI) {
    return _impl_.value_.i_;
  }
  return ::int64_t{0};
}

// uint64 u = 4;
inline bool AttrValue::has_u() const {
  return value_case() == kU;
}
inline void AttrValue::set_has_u() {
  _impl_._oneof_case_[0] = kU;
}
inline void AttrValue::clear_u() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kU) {
    _impl_.value_.u_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t AttrValue::u() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.u)
  return _internal_u();
}
inline void AttrValue::set_u(::uint64_t value) {
  if (value_case() != kU) {
    clear_value();
    set_has_u();
  }
  _impl_.value_.u_ = value;
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.u)
}
inline ::uint64_t AttrValue::_internal_u() const {
  if (value_case() == kU) {
    return _impl_.value_.u_;
  }
  return ::uint64_t{0u};
}

// float f = 5;
inline bool AttrValue::has_f() const {
  return value_case() == kF;
}
inline void AttrValue::set_has_f() {
  _impl_._oneof_case_[0] = kF;
}
inline void AttrValue::clear_f() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kF) {
    _impl_.value_.f_ = 0;
    clear_has_value();
  }
}
inline float AttrValue::f() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.f)
  return _internal_f();
}
inline void AttrValue::set_f(float value) {
  if (value_case() != kF) {
    clear_value();
    set_has_f();
  }
  _impl_.value_.f_ = value;
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.f)
}
inline float AttrValue::_internal_f() const {
  if (value_case() == kF) {
    return _impl_.value_.f_;
  }
  return 0;
}

// bool b = 6;
inline bool AttrValue::has_b() const {
  return value_case() == kB;
}
inline void AttrValue::set_has_b() {
  _impl_._oneof_case_[0] = kB;
}
inline void AttrValue::clear_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kB) {
    _impl_.value_.b_ = false;
    clear_has_value();
  }
}
inline bool AttrValue::b() const {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.b)
  return _internal_b();
}
inline void AttrValue::set_b(bool value) {
  if (value_case() != kB) {
    clear_value();
    set_has_b();
  }
  _impl_.value_.b_ = value;
  // @@protoc_insertion_point(field_set:gs.rpc.AttrValue.b)
}
inline bool AttrValue::_internal_b() const {
  if (value_case() == kB) {
    return _impl_.value_.b_;
  }
  return false;
}

// .gs.rpc.AttrValue.ListValue list = 11;
inline bool AttrValue::has_list() const {
  return value_case() == kList;
}
inline bool AttrValue::_internal_has_list() const {
  return value_case() == kList;
}
inline void AttrValue::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void AttrValue::clear_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kList) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.list_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.list_);
    }
    clear_has_value();
  }
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::release_list() {
  // @@protoc_insertion_point(field_release:gs.rpc.AttrValue.list)
  if (value_case() == kList) {
    clear_has_value();
    auto* temp = _impl_.value_.list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue::_internal_list() const {
  return value_case() == kList ? *_impl_.value_.list_ : reinterpret_cast<::gs::rpc::AttrValue_ListValue&>(::gs::rpc::_AttrValue_ListValue_default_instance_);
}
inline const ::gs::rpc::AttrValue_ListValue& AttrValue::list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.list)
  return _internal_list();
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.AttrValue.list)
  if (value_case() == kList) {
    clear_has_value();
    auto* temp = _impl_.value_.list_;
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_list(::gs::rpc::AttrValue_ListValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_list();
    _impl_.value_.list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.AttrValue.list)
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::_internal_mutable_list() {
  if (value_case() != kList) {
    clear_value();
    set_has_list();
    _impl_.value_.list_ =
        ::google::protobuf::Message::DefaultConstruct<::gs::rpc::AttrValue_ListValue>(GetArena());
  }
  return _impl_.value_.list_;
}
inline ::gs::rpc::AttrValue_ListValue* AttrValue::mutable_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::gs::rpc::AttrValue_ListValue* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.list)
  return _msg;
}

// .gs.rpc.NameAttrList func = 12;
inline bool AttrValue::has_func() const {
  return value_case() == kFunc;
}
inline bool AttrValue::_internal_has_func() const {
  return value_case() == kFunc;
}
inline void AttrValue::set_has_func() {
  _impl_._oneof_case_[0] = kFunc;
}
inline void AttrValue::clear_func() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFunc) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.func_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.func_);
    }
    clear_has_value();
  }
}
inline ::gs::rpc::NameAttrList* AttrValue::release_func() {
  // @@protoc_insertion_point(field_release:gs.rpc.AttrValue.func)
  if (value_case() == kFunc) {
    clear_has_value();
    auto* temp = _impl_.value_.func_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::NameAttrList& AttrValue::_internal_func() const {
  return value_case() == kFunc ? *_impl_.value_.func_ : reinterpret_cast<::gs::rpc::NameAttrList&>(::gs::rpc::_NameAttrList_default_instance_);
}
inline const ::gs::rpc::NameAttrList& AttrValue::func() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.AttrValue.func)
  return _internal_func();
}
inline ::gs::rpc::NameAttrList* AttrValue::unsafe_arena_release_func() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.AttrValue.func)
  if (value_case() == kFunc) {
    clear_has_value();
    auto* temp = _impl_.value_.func_;
    _impl_.value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_func(::gs::rpc::NameAttrList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_func();
    _impl_.value_.func_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.AttrValue.func)
}
inline ::gs::rpc::NameAttrList* AttrValue::_internal_mutable_func() {
  if (value_case() != kFunc) {
    clear_value();
    set_has_func();
    _impl_.value_.func_ =
        ::google::protobuf::Message::DefaultConstruct<::gs::rpc::NameAttrList>(GetArena());
  }
  return _impl_.value_.func_;
}
inline ::gs::rpc::NameAttrList* AttrValue::mutable_func() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::gs::rpc::NameAttrList* _msg = _internal_mutable_func();
  // @@protoc_insertion_point(field_mutable:gs.rpc.AttrValue.func)
  return _msg;
}

inline bool AttrValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttrValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AttrValue::ValueCase AttrValue::value_case() const {
  return AttrValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NameAttrList

// string name = 1;
inline void NameAttrList::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NameAttrList::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.NameAttrList.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameAttrList::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.NameAttrList.name)
}
inline std::string* NameAttrList::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gs.rpc.NameAttrList.name)
  return _s;
}
inline const std::string& NameAttrList::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NameAttrList::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NameAttrList::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NameAttrList::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.NameAttrList.name)
  return _impl_.name_.Release();
}
inline void NameAttrList::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.NameAttrList.name)
}

// map<int32, .gs.rpc.AttrValue> attr = 2;
inline int NameAttrList::_internal_attr_size() const {
  return _internal_attr().size();
}
inline int NameAttrList::attr_size() const {
  return _internal_attr_size();
}
inline void NameAttrList::clear_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attr_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& NameAttrList::_internal_attr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attr_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& NameAttrList::attr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:gs.rpc.NameAttrList.attr)
  return _internal_attr();
}
inline ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* NameAttrList::_internal_mutable_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attr_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* NameAttrList::mutable_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.NameAttrList.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Chunk

// bytes buffer = 1;
inline void Chunk::clear_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.ClearToEmpty();
}
inline const std::string& Chunk::buffer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.Chunk.buffer)
  return _internal_buffer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Chunk::set_buffer(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.Chunk.buffer)
}
inline std::string* Chunk::mutable_buffer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:gs.rpc.Chunk.buffer)
  return _s;
}
inline const std::string& Chunk::_internal_buffer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.buffer_.Get();
}
inline void Chunk::_internal_set_buffer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.Set(value, GetArena());
}
inline std::string* Chunk::_internal_mutable_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.buffer_.Mutable( GetArena());
}
inline std::string* Chunk::release_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.Chunk.buffer)
  return _impl_.buffer_.Release();
}
inline void Chunk::set_allocated_buffer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.buffer_.IsDefault()) {
          _impl_.buffer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.Chunk.buffer)
}

// map<int32, .gs.rpc.AttrValue> attr = 2;
inline int Chunk::_internal_attr_size() const {
  return _internal_attr().size();
}
inline int Chunk::attr_size() const {
  return _internal_attr_size();
}
inline void Chunk::clear_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attr_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& Chunk::_internal_attr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attr_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& Chunk::attr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:gs.rpc.Chunk.attr)
  return _internal_attr();
}
inline ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* Chunk::_internal_mutable_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attr_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* Chunk::mutable_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.Chunk.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChunkMeta

// int64 size = 1;
inline void ChunkMeta::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t ChunkMeta::size() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ChunkMeta.size)
  return _internal_size();
}
inline void ChunkMeta::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ChunkMeta.size)
}
inline ::int64_t ChunkMeta::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void ChunkMeta::_internal_set_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// map<int32, .gs.rpc.AttrValue> attr = 3;
inline int ChunkMeta::_internal_attr_size() const {
  return _internal_attr().size();
}
inline int ChunkMeta::attr_size() const {
  return _internal_attr_size();
}
inline void ChunkMeta::clear_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attr_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& ChunkMeta::_internal_attr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attr_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>& ChunkMeta::attr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:gs.rpc.ChunkMeta.attr)
  return _internal_attr();
}
inline ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* ChunkMeta::_internal_mutable_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attr_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::gs::rpc::AttrValue>* ChunkMeta::mutable_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.ChunkMeta.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// LargeAttrValue_ChunkList

// repeated .gs.rpc.Chunk items = 1;
inline int LargeAttrValue_ChunkList::_internal_items_size() const {
  return _internal_items().size();
}
inline int LargeAttrValue_ChunkList::items_size() const {
  return _internal_items_size();
}
inline void LargeAttrValue_ChunkList::clear_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.items_.Clear();
}
inline ::gs::rpc::Chunk* LargeAttrValue_ChunkList::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.ChunkList.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>* LargeAttrValue_ChunkList::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.LargeAttrValue.ChunkList.items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_items();
}
inline const ::gs::rpc::Chunk& LargeAttrValue_ChunkList::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.ChunkList.items)
  return _internal_items().Get(index);
}
inline ::gs::rpc::Chunk* LargeAttrValue_ChunkList::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::Chunk* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.LargeAttrValue.ChunkList.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>& LargeAttrValue_ChunkList::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.LargeAttrValue.ChunkList.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>&
LargeAttrValue_ChunkList::_internal_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::Chunk>*
LargeAttrValue_ChunkList::_internal_mutable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// LargeAttrValue_ChunkMetaList

// repeated .gs.rpc.ChunkMeta items = 1;
inline int LargeAttrValue_ChunkMetaList::_internal_items_size() const {
  return _internal_items().size();
}
inline int LargeAttrValue_ChunkMetaList::items_size() const {
  return _internal_items_size();
}
inline void LargeAttrValue_ChunkMetaList::clear_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.items_.Clear();
}
inline ::gs::rpc::ChunkMeta* LargeAttrValue_ChunkMetaList::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>* LargeAttrValue_ChunkMetaList::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_items();
}
inline const ::gs::rpc::ChunkMeta& LargeAttrValue_ChunkMetaList::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _internal_items().Get(index);
}
inline ::gs::rpc::ChunkMeta* LargeAttrValue_ChunkMetaList::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::ChunkMeta* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>& LargeAttrValue_ChunkMetaList::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.LargeAttrValue.ChunkMetaList.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>&
LargeAttrValue_ChunkMetaList::_internal_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::ChunkMeta>*
LargeAttrValue_ChunkMetaList::_internal_mutable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// LargeAttrValue

// .gs.rpc.LargeAttrValue.ChunkList chunk_list = 1;
inline bool LargeAttrValue::has_chunk_list() const {
  return large_value_case() == kChunkList;
}
inline bool LargeAttrValue::_internal_has_chunk_list() const {
  return large_value_case() == kChunkList;
}
inline void LargeAttrValue::set_has_chunk_list() {
  _impl_._oneof_case_[0] = kChunkList;
}
inline void LargeAttrValue::clear_chunk_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (large_value_case() == kChunkList) {
    if (GetArena() == nullptr) {
      delete _impl_.large_value_.chunk_list_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.large_value_.chunk_list_);
    }
    clear_has_large_value();
  }
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::release_chunk_list() {
  // @@protoc_insertion_point(field_release:gs.rpc.LargeAttrValue.chunk_list)
  if (large_value_case() == kChunkList) {
    clear_has_large_value();
    auto* temp = _impl_.large_value_.chunk_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.large_value_.chunk_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::LargeAttrValue_ChunkList& LargeAttrValue::_internal_chunk_list() const {
  return large_value_case() == kChunkList ? *_impl_.large_value_.chunk_list_ : reinterpret_cast<::gs::rpc::LargeAttrValue_ChunkList&>(::gs::rpc::_LargeAttrValue_ChunkList_default_instance_);
}
inline const ::gs::rpc::LargeAttrValue_ChunkList& LargeAttrValue::chunk_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.chunk_list)
  return _internal_chunk_list();
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::unsafe_arena_release_chunk_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.LargeAttrValue.chunk_list)
  if (large_value_case() == kChunkList) {
    clear_has_large_value();
    auto* temp = _impl_.large_value_.chunk_list_;
    _impl_.large_value_.chunk_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LargeAttrValue::unsafe_arena_set_allocated_chunk_list(::gs::rpc::LargeAttrValue_ChunkList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_large_value();
  if (value) {
    set_has_chunk_list();
    _impl_.large_value_.chunk_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.LargeAttrValue.chunk_list)
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::_internal_mutable_chunk_list() {
  if (large_value_case() != kChunkList) {
    clear_large_value();
    set_has_chunk_list();
    _impl_.large_value_.chunk_list_ =
        ::google::protobuf::Message::DefaultConstruct<::gs::rpc::LargeAttrValue_ChunkList>(GetArena());
  }
  return _impl_.large_value_.chunk_list_;
}
inline ::gs::rpc::LargeAttrValue_ChunkList* LargeAttrValue::mutable_chunk_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::gs::rpc::LargeAttrValue_ChunkList* _msg = _internal_mutable_chunk_list();
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.chunk_list)
  return _msg;
}

// .gs.rpc.LargeAttrValue.ChunkMetaList chunk_meta_list = 2;
inline bool LargeAttrValue::has_chunk_meta_list() const {
  return large_value_case() == kChunkMetaList;
}
inline bool LargeAttrValue::_internal_has_chunk_meta_list() const {
  return large_value_case() == kChunkMetaList;
}
inline void LargeAttrValue::set_has_chunk_meta_list() {
  _impl_._oneof_case_[0] = kChunkMetaList;
}
inline void LargeAttrValue::clear_chunk_meta_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (large_value_case() == kChunkMetaList) {
    if (GetArena() == nullptr) {
      delete _impl_.large_value_.chunk_meta_list_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.large_value_.chunk_meta_list_);
    }
    clear_has_large_value();
  }
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::release_chunk_meta_list() {
  // @@protoc_insertion_point(field_release:gs.rpc.LargeAttrValue.chunk_meta_list)
  if (large_value_case() == kChunkMetaList) {
    clear_has_large_value();
    auto* temp = _impl_.large_value_.chunk_meta_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.large_value_.chunk_meta_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gs::rpc::LargeAttrValue_ChunkMetaList& LargeAttrValue::_internal_chunk_meta_list() const {
  return large_value_case() == kChunkMetaList ? *_impl_.large_value_.chunk_meta_list_ : reinterpret_cast<::gs::rpc::LargeAttrValue_ChunkMetaList&>(::gs::rpc::_LargeAttrValue_ChunkMetaList_default_instance_);
}
inline const ::gs::rpc::LargeAttrValue_ChunkMetaList& LargeAttrValue::chunk_meta_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.LargeAttrValue.chunk_meta_list)
  return _internal_chunk_meta_list();
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::unsafe_arena_release_chunk_meta_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gs.rpc.LargeAttrValue.chunk_meta_list)
  if (large_value_case() == kChunkMetaList) {
    clear_has_large_value();
    auto* temp = _impl_.large_value_.chunk_meta_list_;
    _impl_.large_value_.chunk_meta_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LargeAttrValue::unsafe_arena_set_allocated_chunk_meta_list(::gs::rpc::LargeAttrValue_ChunkMetaList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_large_value();
  if (value) {
    set_has_chunk_meta_list();
    _impl_.large_value_.chunk_meta_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.LargeAttrValue.chunk_meta_list)
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::_internal_mutable_chunk_meta_list() {
  if (large_value_case() != kChunkMetaList) {
    clear_large_value();
    set_has_chunk_meta_list();
    _impl_.large_value_.chunk_meta_list_ =
        ::google::protobuf::Message::DefaultConstruct<::gs::rpc::LargeAttrValue_ChunkMetaList>(GetArena());
  }
  return _impl_.large_value_.chunk_meta_list_;
}
inline ::gs::rpc::LargeAttrValue_ChunkMetaList* LargeAttrValue::mutable_chunk_meta_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::gs::rpc::LargeAttrValue_ChunkMetaList* _msg = _internal_mutable_chunk_meta_list();
  // @@protoc_insertion_point(field_mutable:gs.rpc.LargeAttrValue.chunk_meta_list)
  return _msg;
}

inline bool LargeAttrValue::has_large_value() const {
  return large_value_case() != LARGE_VALUE_NOT_SET;
}
inline void LargeAttrValue::clear_has_large_value() {
  _impl_._oneof_case_[0] = LARGE_VALUE_NOT_SET;
}
inline LargeAttrValue::LargeValueCase LargeAttrValue::large_value_case() const {
  return LargeAttrValue::LargeValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace gs


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::gs::rpc::AttrValue_NullValue> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::AttrValue_NullValue>() {
  return ::gs::rpc::AttrValue_NullValue_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto_2epb_2eh
