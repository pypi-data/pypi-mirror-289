// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: graph_def.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_5fdef_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_graph_5fdef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "schema_common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_graph_5fdef_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_5fdef_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_graph_5fdef_2eproto;
namespace gs {
namespace rpc {
namespace graph {
class GraphDefPb;
struct GraphDefPbDefaultTypeInternal;
extern GraphDefPbDefaultTypeInternal _GraphDefPb_default_instance_;
class GraphDefPb_PropertyNameToIdEntry_DoNotUse;
struct GraphDefPb_PropertyNameToIdEntry_DoNotUseDefaultTypeInternal;
extern GraphDefPb_PropertyNameToIdEntry_DoNotUseDefaultTypeInternal _GraphDefPb_PropertyNameToIdEntry_DoNotUse_default_instance_;
class GrootInfoPb;
struct GrootInfoPbDefaultTypeInternal;
extern GrootInfoPbDefaultTypeInternal _GrootInfoPb_default_instance_;
class MutableGraphInfoPb;
struct MutableGraphInfoPbDefaultTypeInternal;
extern MutableGraphInfoPbDefaultTypeInternal _MutableGraphInfoPb_default_instance_;
class VineyardInfoPb;
struct VineyardInfoPbDefaultTypeInternal;
extern VineyardInfoPbDefaultTypeInternal _VineyardInfoPb_default_instance_;
}  // namespace graph
}  // namespace rpc
}  // namespace gs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace gs {
namespace rpc {
namespace graph {
enum GraphTypePb : int {
  UNKNOWN_TYPE = 0,
  IMMUTABLE_EDGECUT = 1,
  DYNAMIC_PROPERTY = 2,
  DYNAMIC_PROJECTED = 3,
  ARROW_PROPERTY = 4,
  ARROW_PROJECTED = 5,
  PERSISTENT_STORE = 6,
  ARROW_FLATTENED = 7,
  GraphTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GraphTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GraphTypePb_IsValid(int value);
extern const uint32_t GraphTypePb_internal_data_[];
constexpr GraphTypePb GraphTypePb_MIN = static_cast<GraphTypePb>(0);
constexpr GraphTypePb GraphTypePb_MAX = static_cast<GraphTypePb>(7);
constexpr int GraphTypePb_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
GraphTypePb_descriptor();
template <typename T>
const std::string& GraphTypePb_Name(T value) {
  static_assert(std::is_same<T, GraphTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GraphTypePb_Name().");
  return GraphTypePb_Name(static_cast<GraphTypePb>(value));
}
template <>
inline const std::string& GraphTypePb_Name(GraphTypePb value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GraphTypePb_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool GraphTypePb_Parse(absl::string_view name, GraphTypePb* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GraphTypePb>(
      GraphTypePb_descriptor(), name, value);
}
enum VertexMapTypePb : int {
  UNKNOWN_VM_TYPE = 0,
  GLOBAL_VERTEX_MAP = 1,
  LOCAL_VERTEX_MAP = 2,
  VertexMapTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VertexMapTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VertexMapTypePb_IsValid(int value);
extern const uint32_t VertexMapTypePb_internal_data_[];
constexpr VertexMapTypePb VertexMapTypePb_MIN = static_cast<VertexMapTypePb>(0);
constexpr VertexMapTypePb VertexMapTypePb_MAX = static_cast<VertexMapTypePb>(2);
constexpr int VertexMapTypePb_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VertexMapTypePb_descriptor();
template <typename T>
const std::string& VertexMapTypePb_Name(T value) {
  static_assert(std::is_same<T, VertexMapTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VertexMapTypePb_Name().");
  return VertexMapTypePb_Name(static_cast<VertexMapTypePb>(value));
}
template <>
inline const std::string& VertexMapTypePb_Name(VertexMapTypePb value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VertexMapTypePb_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VertexMapTypePb_Parse(absl::string_view name, VertexMapTypePb* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VertexMapTypePb>(
      VertexMapTypePb_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VineyardInfoPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.VineyardInfoPb) */ {
 public:
  inline VineyardInfoPb() : VineyardInfoPb(nullptr) {}
  ~VineyardInfoPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VineyardInfoPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline VineyardInfoPb(const VineyardInfoPb& from) : VineyardInfoPb(nullptr, from) {}
  inline VineyardInfoPb(VineyardInfoPb&& from) noexcept
      : VineyardInfoPb(nullptr, std::move(from)) {}
  inline VineyardInfoPb& operator=(const VineyardInfoPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline VineyardInfoPb& operator=(VineyardInfoPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VineyardInfoPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const VineyardInfoPb* internal_default_instance() {
    return reinterpret_cast<const VineyardInfoPb*>(
        &_VineyardInfoPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VineyardInfoPb& a, VineyardInfoPb& b) { a.Swap(&b); }
  inline void Swap(VineyardInfoPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VineyardInfoPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VineyardInfoPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VineyardInfoPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VineyardInfoPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VineyardInfoPb& from) { VineyardInfoPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VineyardInfoPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.VineyardInfoPb"; }

 protected:
  explicit VineyardInfoPb(::google::protobuf::Arena* arena);
  VineyardInfoPb(::google::protobuf::Arena* arena, const VineyardInfoPb& from);
  VineyardInfoPb(::google::protobuf::Arena* arena, VineyardInfoPb&& from) noexcept
      : VineyardInfoPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFragmentsFieldNumber = 10,
    kSchemaPathFieldNumber = 5,
    kPropertySchemaJsonFieldNumber = 8,
    kOidTypeFieldNumber = 1,
    kVidTypeFieldNumber = 2,
    kVdataTypeFieldNumber = 3,
    kEdataTypeFieldNumber = 4,
    kVineyardIdFieldNumber = 7,
    kGenerateEidFieldNumber = 6,
    kRetainOidFieldNumber = 11,
    kVertexMapTypeFieldNumber = 9,
  };
  // repeated int64 fragments = 10;
  int fragments_size() const;
  private:
  int _internal_fragments_size() const;

  public:
  void clear_fragments() ;
  ::int64_t fragments(int index) const;
  void set_fragments(int index, ::int64_t value);
  void add_fragments(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& fragments() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_fragments();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_fragments() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_fragments();

  public:
  // string schema_path = 5;
  void clear_schema_path() ;
  const std::string& schema_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_path(Arg_&& arg, Args_... args);
  std::string* mutable_schema_path();
  PROTOBUF_NODISCARD std::string* release_schema_path();
  void set_allocated_schema_path(std::string* value);

  private:
  const std::string& _internal_schema_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_path(
      const std::string& value);
  std::string* _internal_mutable_schema_path();

  public:
  // string property_schema_json = 8;
  void clear_property_schema_json() ;
  const std::string& property_schema_json() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property_schema_json(Arg_&& arg, Args_... args);
  std::string* mutable_property_schema_json();
  PROTOBUF_NODISCARD std::string* release_property_schema_json();
  void set_allocated_property_schema_json(std::string* value);

  private:
  const std::string& _internal_property_schema_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_schema_json(
      const std::string& value);
  std::string* _internal_mutable_property_schema_json();

  public:
  // .gs.rpc.graph.DataTypePb oid_type = 1;
  void clear_oid_type() ;
  ::gs::rpc::graph::DataTypePb oid_type() const;
  void set_oid_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_oid_type() const;
  void _internal_set_oid_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb vid_type = 2;
  void clear_vid_type() ;
  ::gs::rpc::graph::DataTypePb vid_type() const;
  void set_vid_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_vid_type() const;
  void _internal_set_vid_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb vdata_type = 3;
  void clear_vdata_type() ;
  ::gs::rpc::graph::DataTypePb vdata_type() const;
  void set_vdata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_vdata_type() const;
  void _internal_set_vdata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb edata_type = 4;
  void clear_edata_type() ;
  ::gs::rpc::graph::DataTypePb edata_type() const;
  void set_edata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_edata_type() const;
  void _internal_set_edata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // int64 vineyard_id = 7;
  void clear_vineyard_id() ;
  ::int64_t vineyard_id() const;
  void set_vineyard_id(::int64_t value);

  private:
  ::int64_t _internal_vineyard_id() const;
  void _internal_set_vineyard_id(::int64_t value);

  public:
  // bool generate_eid = 6;
  void clear_generate_eid() ;
  bool generate_eid() const;
  void set_generate_eid(bool value);

  private:
  bool _internal_generate_eid() const;
  void _internal_set_generate_eid(bool value);

  public:
  // bool retain_oid = 11;
  void clear_retain_oid() ;
  bool retain_oid() const;
  void set_retain_oid(bool value);

  private:
  bool _internal_retain_oid() const;
  void _internal_set_retain_oid(bool value);

  public:
  // .gs.rpc.graph.VertexMapTypePb vertex_map_type = 9;
  void clear_vertex_map_type() ;
  ::gs::rpc::graph::VertexMapTypePb vertex_map_type() const;
  void set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value);

  private:
  ::gs::rpc::graph::VertexMapTypePb _internal_vertex_map_type() const;
  void _internal_set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.VineyardInfoPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      75, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VineyardInfoPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VineyardInfoPb& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> fragments_;
    mutable ::google::protobuf::internal::CachedSize _fragments_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr schema_path_;
    ::google::protobuf::internal::ArenaStringPtr property_schema_json_;
    int oid_type_;
    int vid_type_;
    int vdata_type_;
    int edata_type_;
    ::int64_t vineyard_id_;
    bool generate_eid_;
    bool retain_oid_;
    int vertex_map_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};
// -------------------------------------------------------------------

class MutableGraphInfoPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.MutableGraphInfoPb) */ {
 public:
  inline MutableGraphInfoPb() : MutableGraphInfoPb(nullptr) {}
  ~MutableGraphInfoPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MutableGraphInfoPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline MutableGraphInfoPb(const MutableGraphInfoPb& from) : MutableGraphInfoPb(nullptr, from) {}
  inline MutableGraphInfoPb(MutableGraphInfoPb&& from) noexcept
      : MutableGraphInfoPb(nullptr, std::move(from)) {}
  inline MutableGraphInfoPb& operator=(const MutableGraphInfoPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutableGraphInfoPb& operator=(MutableGraphInfoPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutableGraphInfoPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutableGraphInfoPb* internal_default_instance() {
    return reinterpret_cast<const MutableGraphInfoPb*>(
        &_MutableGraphInfoPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MutableGraphInfoPb& a, MutableGraphInfoPb& b) { a.Swap(&b); }
  inline void Swap(MutableGraphInfoPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutableGraphInfoPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutableGraphInfoPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MutableGraphInfoPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MutableGraphInfoPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MutableGraphInfoPb& from) { MutableGraphInfoPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MutableGraphInfoPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.MutableGraphInfoPb"; }

 protected:
  explicit MutableGraphInfoPb(::google::protobuf::Arena* arena);
  MutableGraphInfoPb(::google::protobuf::Arena* arena, const MutableGraphInfoPb& from);
  MutableGraphInfoPb(::google::protobuf::Arena* arena, MutableGraphInfoPb&& from) noexcept
      : MutableGraphInfoPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPropertySchemaJsonFieldNumber = 3,
    kVdataTypeFieldNumber = 1,
    kEdataTypeFieldNumber = 2,
  };
  // string property_schema_json = 3;
  void clear_property_schema_json() ;
  const std::string& property_schema_json() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property_schema_json(Arg_&& arg, Args_... args);
  std::string* mutable_property_schema_json();
  PROTOBUF_NODISCARD std::string* release_property_schema_json();
  void set_allocated_property_schema_json(std::string* value);

  private:
  const std::string& _internal_property_schema_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_schema_json(
      const std::string& value);
  std::string* _internal_mutable_property_schema_json();

  public:
  // .gs.rpc.graph.DataTypePb vdata_type = 1;
  void clear_vdata_type() ;
  ::gs::rpc::graph::DataTypePb vdata_type() const;
  void set_vdata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_vdata_type() const;
  void _internal_set_vdata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb edata_type = 2;
  void clear_edata_type() ;
  ::gs::rpc::graph::DataTypePb edata_type() const;
  void set_edata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_edata_type() const;
  void _internal_set_edata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.MutableGraphInfoPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MutableGraphInfoPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MutableGraphInfoPb& from_msg);
    ::google::protobuf::internal::ArenaStringPtr property_schema_json_;
    int vdata_type_;
    int edata_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};
// -------------------------------------------------------------------

class GrootInfoPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.GrootInfoPb) */ {
 public:
  inline GrootInfoPb() : GrootInfoPb(nullptr) {}
  ~GrootInfoPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GrootInfoPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline GrootInfoPb(const GrootInfoPb& from) : GrootInfoPb(nullptr, from) {}
  inline GrootInfoPb(GrootInfoPb&& from) noexcept
      : GrootInfoPb(nullptr, std::move(from)) {}
  inline GrootInfoPb& operator=(const GrootInfoPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrootInfoPb& operator=(GrootInfoPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrootInfoPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrootInfoPb* internal_default_instance() {
    return reinterpret_cast<const GrootInfoPb*>(
        &_GrootInfoPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GrootInfoPb& a, GrootInfoPb& b) { a.Swap(&b); }
  inline void Swap(GrootInfoPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrootInfoPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrootInfoPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GrootInfoPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GrootInfoPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GrootInfoPb& from) { GrootInfoPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GrootInfoPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.GrootInfoPb"; }

 protected:
  explicit GrootInfoPb(::google::protobuf::Arena* arena);
  GrootInfoPb(::google::protobuf::Arena* arena, const GrootInfoPb& from);
  GrootInfoPb(::google::protobuf::Arena* arena, GrootInfoPb&& from) noexcept
      : GrootInfoPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLastLabelIdFieldNumber = 1,
    kLastPropertyIdFieldNumber = 2,
    kLastTableIdFieldNumber = 3,
  };
  // int32 last_label_id = 1;
  void clear_last_label_id() ;
  ::int32_t last_label_id() const;
  void set_last_label_id(::int32_t value);

  private:
  ::int32_t _internal_last_label_id() const;
  void _internal_set_last_label_id(::int32_t value);

  public:
  // int32 last_property_id = 2;
  void clear_last_property_id() ;
  ::int32_t last_property_id() const;
  void set_last_property_id(::int32_t value);

  private:
  ::int32_t _internal_last_property_id() const;
  void _internal_set_last_property_id(::int32_t value);

  public:
  // int64 last_table_id = 3;
  void clear_last_table_id() ;
  ::int64_t last_table_id() const;
  void set_last_table_id(::int64_t value);

  private:
  ::int64_t _internal_last_table_id() const;
  void _internal_set_last_table_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.GrootInfoPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GrootInfoPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GrootInfoPb& from_msg);
    ::int32_t last_label_id_;
    ::int32_t last_property_id_;
    ::int64_t last_table_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};
// -------------------------------------------------------------------

class GraphDefPb_PropertyNameToIdEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GraphDefPb_PropertyNameToIdEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GraphDefPb_PropertyNameToIdEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  GraphDefPb_PropertyNameToIdEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphDefPb_PropertyNameToIdEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GraphDefPb_PropertyNameToIdEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GraphDefPb_PropertyNameToIdEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GraphDefPb_PropertyNameToIdEntry_DoNotUse*>(
        &_GraphDefPb_PropertyNameToIdEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_graph_5fdef_2eproto;
};
// -------------------------------------------------------------------

class GraphDefPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.GraphDefPb) */ {
 public:
  inline GraphDefPb() : GraphDefPb(nullptr) {}
  ~GraphDefPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphDefPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline GraphDefPb(const GraphDefPb& from) : GraphDefPb(nullptr, from) {}
  inline GraphDefPb(GraphDefPb&& from) noexcept
      : GraphDefPb(nullptr, std::move(from)) {}
  inline GraphDefPb& operator=(const GraphDefPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDefPb& operator=(GraphDefPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphDefPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphDefPb* internal_default_instance() {
    return reinterpret_cast<const GraphDefPb*>(
        &_GraphDefPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GraphDefPb& a, GraphDefPb& b) { a.Swap(&b); }
  inline void Swap(GraphDefPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDefPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphDefPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GraphDefPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GraphDefPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GraphDefPb& from) { GraphDefPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GraphDefPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.GraphDefPb"; }

 protected:
  explicit GraphDefPb(::google::protobuf::Arena* arena);
  GraphDefPb(::google::protobuf::Arena* arena, const GraphDefPb& from);
  GraphDefPb(::google::protobuf::Arena* arena, GraphDefPb&& from) noexcept
      : GraphDefPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeDefsFieldNumber = 5,
    kEdgeKindsFieldNumber = 6,
    kPropertyNameToIdFieldNumber = 7,
    kKeyFieldNumber = 2,
    kExtensionFieldNumber = 8,
    kVersionFieldNumber = 1,
    kGraphTypeFieldNumber = 3,
    kDirectedFieldNumber = 4,
    kIsMultigraphFieldNumber = 9,
    kCompactEdgesFieldNumber = 10,
    kUsePerfectHashFieldNumber = 11,
  };
  // repeated .gs.rpc.graph.TypeDefPb type_defs = 5;
  int type_defs_size() const;
  private:
  int _internal_type_defs_size() const;

  public:
  void clear_type_defs() ;
  ::gs::rpc::graph::TypeDefPb* mutable_type_defs(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>* mutable_type_defs();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>& _internal_type_defs() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>* _internal_mutable_type_defs();
  public:
  const ::gs::rpc::graph::TypeDefPb& type_defs(int index) const;
  ::gs::rpc::graph::TypeDefPb* add_type_defs();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>& type_defs() const;
  // repeated .gs.rpc.graph.EdgeKindPb edge_kinds = 6;
  int edge_kinds_size() const;
  private:
  int _internal_edge_kinds_size() const;

  public:
  void clear_edge_kinds() ;
  ::gs::rpc::graph::EdgeKindPb* mutable_edge_kinds(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>* mutable_edge_kinds();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>& _internal_edge_kinds() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>* _internal_mutable_edge_kinds();
  public:
  const ::gs::rpc::graph::EdgeKindPb& edge_kinds(int index) const;
  ::gs::rpc::graph::EdgeKindPb* add_edge_kinds();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>& edge_kinds() const;
  // map<string, int32> property_name_to_id = 7;
  int property_name_to_id_size() const;
  private:
  int _internal_property_name_to_id_size() const;

  public:
  void clear_property_name_to_id() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& property_name_to_id() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_property_name_to_id();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_property_name_to_id() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_property_name_to_id();

  public:
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .google.protobuf.Any extension = 8;
  bool has_extension() const;
  void clear_extension() ;
  const ::google::protobuf::Any& extension() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_extension();
  ::google::protobuf::Any* mutable_extension();
  void set_allocated_extension(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_extension(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_extension();

  private:
  const ::google::protobuf::Any& _internal_extension() const;
  ::google::protobuf::Any* _internal_mutable_extension();

  public:
  // int64 version = 1;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // .gs.rpc.graph.GraphTypePb graph_type = 3;
  void clear_graph_type() ;
  ::gs::rpc::graph::GraphTypePb graph_type() const;
  void set_graph_type(::gs::rpc::graph::GraphTypePb value);

  private:
  ::gs::rpc::graph::GraphTypePb _internal_graph_type() const;
  void _internal_set_graph_type(::gs::rpc::graph::GraphTypePb value);

  public:
  // bool directed = 4;
  void clear_directed() ;
  bool directed() const;
  void set_directed(bool value);

  private:
  bool _internal_directed() const;
  void _internal_set_directed(bool value);

  public:
  // bool is_multigraph = 9;
  void clear_is_multigraph() ;
  bool is_multigraph() const;
  void set_is_multigraph(bool value);

  private:
  bool _internal_is_multigraph() const;
  void _internal_set_is_multigraph(bool value);

  public:
  // bool compact_edges = 10;
  void clear_compact_edges() ;
  bool compact_edges() const;
  void set_compact_edges(bool value);

  private:
  bool _internal_compact_edges() const;
  void _internal_set_compact_edges(bool value);

  public:
  // bool use_perfect_hash = 11;
  void clear_use_perfect_hash() ;
  bool use_perfect_hash() const;
  void set_use_perfect_hash(bool value);

  private:
  bool _internal_use_perfect_hash() const;
  void _internal_set_use_perfect_hash(bool value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.GraphDefPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 4,
      62, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GraphDefPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GraphDefPb& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::graph::TypeDefPb > type_defs_;
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::graph::EdgeKindPb > edge_kinds_;
    ::google::protobuf::internal::MapField<GraphDefPb_PropertyNameToIdEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        property_name_to_id_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::Any* extension_;
    ::int64_t version_;
    int graph_type_;
    bool directed_;
    bool is_multigraph_;
    bool compact_edges_;
    bool use_perfect_hash_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GrootInfoPb

// int32 last_label_id = 1;
inline void GrootInfoPb::clear_last_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_label_id_ = 0;
}
inline ::int32_t GrootInfoPb::last_label_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GrootInfoPb.last_label_id)
  return _internal_last_label_id();
}
inline void GrootInfoPb::set_last_label_id(::int32_t value) {
  _internal_set_last_label_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GrootInfoPb.last_label_id)
}
inline ::int32_t GrootInfoPb::_internal_last_label_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_label_id_;
}
inline void GrootInfoPb::_internal_set_last_label_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_label_id_ = value;
}

// int32 last_property_id = 2;
inline void GrootInfoPb::clear_last_property_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_property_id_ = 0;
}
inline ::int32_t GrootInfoPb::last_property_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GrootInfoPb.last_property_id)
  return _internal_last_property_id();
}
inline void GrootInfoPb::set_last_property_id(::int32_t value) {
  _internal_set_last_property_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GrootInfoPb.last_property_id)
}
inline ::int32_t GrootInfoPb::_internal_last_property_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_property_id_;
}
inline void GrootInfoPb::_internal_set_last_property_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_property_id_ = value;
}

// int64 last_table_id = 3;
inline void GrootInfoPb::clear_last_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_table_id_ = ::int64_t{0};
}
inline ::int64_t GrootInfoPb::last_table_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GrootInfoPb.last_table_id)
  return _internal_last_table_id();
}
inline void GrootInfoPb::set_last_table_id(::int64_t value) {
  _internal_set_last_table_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GrootInfoPb.last_table_id)
}
inline ::int64_t GrootInfoPb::_internal_last_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_table_id_;
}
inline void GrootInfoPb::_internal_set_last_table_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_table_id_ = value;
}

// -------------------------------------------------------------------

// VineyardInfoPb

// .gs.rpc.graph.DataTypePb oid_type = 1;
inline void VineyardInfoPb::clear_oid_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.oid_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::oid_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.oid_type)
  return _internal_oid_type();
}
inline void VineyardInfoPb::set_oid_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_oid_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.oid_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_oid_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.oid_type_);
}
inline void VineyardInfoPb::_internal_set_oid_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.oid_type_ = value;
}

// .gs.rpc.graph.DataTypePb vid_type = 2;
inline void VineyardInfoPb::clear_vid_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vid_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::vid_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vid_type)
  return _internal_vid_type();
}
inline void VineyardInfoPb::set_vid_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_vid_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vid_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_vid_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.vid_type_);
}
inline void VineyardInfoPb::_internal_set_vid_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vid_type_ = value;
}

// .gs.rpc.graph.DataTypePb vdata_type = 3;
inline void VineyardInfoPb::clear_vdata_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::vdata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vdata_type)
  return _internal_vdata_type();
}
inline void VineyardInfoPb::set_vdata_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_vdata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vdata_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_vdata_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.vdata_type_);
}
inline void VineyardInfoPb::_internal_set_vdata_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdata_type_ = value;
}

// .gs.rpc.graph.DataTypePb edata_type = 4;
inline void VineyardInfoPb::clear_edata_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::edata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.edata_type)
  return _internal_edata_type();
}
inline void VineyardInfoPb::set_edata_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_edata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.edata_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_edata_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.edata_type_);
}
inline void VineyardInfoPb::_internal_set_edata_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edata_type_ = value;
}

// string schema_path = 5;
inline void VineyardInfoPb::clear_schema_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.schema_path_.ClearToEmpty();
}
inline const std::string& VineyardInfoPb::schema_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.schema_path)
  return _internal_schema_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VineyardInfoPb::set_schema_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.schema_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.schema_path)
}
inline std::string* VineyardInfoPb::mutable_schema_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_path();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.VineyardInfoPb.schema_path)
  return _s;
}
inline const std::string& VineyardInfoPb::_internal_schema_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.schema_path_.Get();
}
inline void VineyardInfoPb::_internal_set_schema_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.schema_path_.Set(value, GetArena());
}
inline std::string* VineyardInfoPb::_internal_mutable_schema_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.schema_path_.Mutable( GetArena());
}
inline std::string* VineyardInfoPb::release_schema_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.VineyardInfoPb.schema_path)
  return _impl_.schema_path_.Release();
}
inline void VineyardInfoPb::set_allocated_schema_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.schema_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_path_.IsDefault()) {
          _impl_.schema_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.VineyardInfoPb.schema_path)
}

// bool generate_eid = 6;
inline void VineyardInfoPb::clear_generate_eid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generate_eid_ = false;
}
inline bool VineyardInfoPb::generate_eid() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.generate_eid)
  return _internal_generate_eid();
}
inline void VineyardInfoPb::set_generate_eid(bool value) {
  _internal_set_generate_eid(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.generate_eid)
}
inline bool VineyardInfoPb::_internal_generate_eid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generate_eid_;
}
inline void VineyardInfoPb::_internal_set_generate_eid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generate_eid_ = value;
}

// int64 vineyard_id = 7;
inline void VineyardInfoPb::clear_vineyard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vineyard_id_ = ::int64_t{0};
}
inline ::int64_t VineyardInfoPb::vineyard_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vineyard_id)
  return _internal_vineyard_id();
}
inline void VineyardInfoPb::set_vineyard_id(::int64_t value) {
  _internal_set_vineyard_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vineyard_id)
}
inline ::int64_t VineyardInfoPb::_internal_vineyard_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vineyard_id_;
}
inline void VineyardInfoPb::_internal_set_vineyard_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vineyard_id_ = value;
}

// string property_schema_json = 8;
inline void VineyardInfoPb::clear_property_schema_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.ClearToEmpty();
}
inline const std::string& VineyardInfoPb::property_schema_json() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.property_schema_json)
  return _internal_property_schema_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VineyardInfoPb::set_property_schema_json(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.property_schema_json)
}
inline std::string* VineyardInfoPb::mutable_property_schema_json() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property_schema_json();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.VineyardInfoPb.property_schema_json)
  return _s;
}
inline const std::string& VineyardInfoPb::_internal_property_schema_json() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.property_schema_json_.Get();
}
inline void VineyardInfoPb::_internal_set_property_schema_json(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.Set(value, GetArena());
}
inline std::string* VineyardInfoPb::_internal_mutable_property_schema_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.property_schema_json_.Mutable( GetArena());
}
inline std::string* VineyardInfoPb::release_property_schema_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.VineyardInfoPb.property_schema_json)
  return _impl_.property_schema_json_.Release();
}
inline void VineyardInfoPb::set_allocated_property_schema_json(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_schema_json_.IsDefault()) {
          _impl_.property_schema_json_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.VineyardInfoPb.property_schema_json)
}

// .gs.rpc.graph.VertexMapTypePb vertex_map_type = 9;
inline void VineyardInfoPb::clear_vertex_map_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertex_map_type_ = 0;
}
inline ::gs::rpc::graph::VertexMapTypePb VineyardInfoPb::vertex_map_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vertex_map_type)
  return _internal_vertex_map_type();
}
inline void VineyardInfoPb::set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value) {
  _internal_set_vertex_map_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vertex_map_type)
}
inline ::gs::rpc::graph::VertexMapTypePb VineyardInfoPb::_internal_vertex_map_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::VertexMapTypePb>(_impl_.vertex_map_type_);
}
inline void VineyardInfoPb::_internal_set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertex_map_type_ = value;
}

// repeated int64 fragments = 10;
inline int VineyardInfoPb::_internal_fragments_size() const {
  return _internal_fragments().size();
}
inline int VineyardInfoPb::fragments_size() const {
  return _internal_fragments_size();
}
inline void VineyardInfoPb::clear_fragments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fragments_.Clear();
}
inline ::int64_t VineyardInfoPb::fragments(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.fragments)
  return _internal_fragments().Get(index);
}
inline void VineyardInfoPb::set_fragments(int index, ::int64_t value) {
  _internal_mutable_fragments()->Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.fragments)
}
inline void VineyardInfoPb::add_fragments(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_fragments()->Add(value);
  // @@protoc_insertion_point(field_add:gs.rpc.graph.VineyardInfoPb.fragments)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& VineyardInfoPb::fragments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.VineyardInfoPb.fragments)
  return _internal_fragments();
}
inline ::google::protobuf::RepeatedField<::int64_t>* VineyardInfoPb::mutable_fragments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.VineyardInfoPb.fragments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fragments();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
VineyardInfoPb::_internal_fragments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fragments_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* VineyardInfoPb::_internal_mutable_fragments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fragments_;
}

// bool retain_oid = 11;
inline void VineyardInfoPb::clear_retain_oid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retain_oid_ = false;
}
inline bool VineyardInfoPb::retain_oid() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.retain_oid)
  return _internal_retain_oid();
}
inline void VineyardInfoPb::set_retain_oid(bool value) {
  _internal_set_retain_oid(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.retain_oid)
}
inline bool VineyardInfoPb::_internal_retain_oid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retain_oid_;
}
inline void VineyardInfoPb::_internal_set_retain_oid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retain_oid_ = value;
}

// -------------------------------------------------------------------

// MutableGraphInfoPb

// .gs.rpc.graph.DataTypePb vdata_type = 1;
inline void MutableGraphInfoPb::clear_vdata_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::vdata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.MutableGraphInfoPb.vdata_type)
  return _internal_vdata_type();
}
inline void MutableGraphInfoPb::set_vdata_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_vdata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.MutableGraphInfoPb.vdata_type)
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::_internal_vdata_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.vdata_type_);
}
inline void MutableGraphInfoPb::_internal_set_vdata_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdata_type_ = value;
}

// .gs.rpc.graph.DataTypePb edata_type = 2;
inline void MutableGraphInfoPb::clear_edata_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::edata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.MutableGraphInfoPb.edata_type)
  return _internal_edata_type();
}
inline void MutableGraphInfoPb::set_edata_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_edata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.MutableGraphInfoPb.edata_type)
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::_internal_edata_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.edata_type_);
}
inline void MutableGraphInfoPb::_internal_set_edata_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edata_type_ = value;
}

// string property_schema_json = 3;
inline void MutableGraphInfoPb::clear_property_schema_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.ClearToEmpty();
}
inline const std::string& MutableGraphInfoPb::property_schema_json() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
  return _internal_property_schema_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MutableGraphInfoPb::set_property_schema_json(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
}
inline std::string* MutableGraphInfoPb::mutable_property_schema_json() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property_schema_json();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
  return _s;
}
inline const std::string& MutableGraphInfoPb::_internal_property_schema_json() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.property_schema_json_.Get();
}
inline void MutableGraphInfoPb::_internal_set_property_schema_json(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.Set(value, GetArena());
}
inline std::string* MutableGraphInfoPb::_internal_mutable_property_schema_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.property_schema_json_.Mutable( GetArena());
}
inline std::string* MutableGraphInfoPb::release_property_schema_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
  return _impl_.property_schema_json_.Release();
}
inline void MutableGraphInfoPb::set_allocated_property_schema_json(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_schema_json_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_schema_json_.IsDefault()) {
          _impl_.property_schema_json_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GraphDefPb

// int64 version = 1;
inline void GraphDefPb::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t GraphDefPb::version() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.version)
  return _internal_version();
}
inline void GraphDefPb::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.version)
}
inline ::int64_t GraphDefPb::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void GraphDefPb::_internal_set_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// string key = 2;
inline void GraphDefPb::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GraphDefPb::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphDefPb::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.key)
}
inline std::string* GraphDefPb::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.key)
  return _s;
}
inline const std::string& GraphDefPb::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void GraphDefPb::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GraphDefPb::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GraphDefPb::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.GraphDefPb.key)
  return _impl_.key_.Release();
}
inline void GraphDefPb::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.GraphDefPb.key)
}

// .gs.rpc.graph.GraphTypePb graph_type = 3;
inline void GraphDefPb::clear_graph_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.graph_type_ = 0;
}
inline ::gs::rpc::graph::GraphTypePb GraphDefPb::graph_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.graph_type)
  return _internal_graph_type();
}
inline void GraphDefPb::set_graph_type(::gs::rpc::graph::GraphTypePb value) {
  _internal_set_graph_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.graph_type)
}
inline ::gs::rpc::graph::GraphTypePb GraphDefPb::_internal_graph_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::GraphTypePb>(_impl_.graph_type_);
}
inline void GraphDefPb::_internal_set_graph_type(::gs::rpc::graph::GraphTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.graph_type_ = value;
}

// bool directed = 4;
inline void GraphDefPb::clear_directed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directed_ = false;
}
inline bool GraphDefPb::directed() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.directed)
  return _internal_directed();
}
inline void GraphDefPb::set_directed(bool value) {
  _internal_set_directed(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.directed)
}
inline bool GraphDefPb::_internal_directed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.directed_;
}
inline void GraphDefPb::_internal_set_directed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directed_ = value;
}

// repeated .gs.rpc.graph.TypeDefPb type_defs = 5;
inline int GraphDefPb::_internal_type_defs_size() const {
  return _internal_type_defs().size();
}
inline int GraphDefPb::type_defs_size() const {
  return _internal_type_defs_size();
}
inline ::gs::rpc::graph::TypeDefPb* GraphDefPb::mutable_type_defs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_mutable_type_defs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>* GraphDefPb::mutable_type_defs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.GraphDefPb.type_defs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_type_defs();
}
inline const ::gs::rpc::graph::TypeDefPb& GraphDefPb::type_defs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_type_defs().Get(index);
}
inline ::gs::rpc::graph::TypeDefPb* GraphDefPb::add_type_defs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::graph::TypeDefPb* _add = _internal_mutable_type_defs()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.graph.GraphDefPb.type_defs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>& GraphDefPb::type_defs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_type_defs();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>&
GraphDefPb::_internal_type_defs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_defs_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>*
GraphDefPb::_internal_mutable_type_defs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.type_defs_;
}

// repeated .gs.rpc.graph.EdgeKindPb edge_kinds = 6;
inline int GraphDefPb::_internal_edge_kinds_size() const {
  return _internal_edge_kinds().size();
}
inline int GraphDefPb::edge_kinds_size() const {
  return _internal_edge_kinds_size();
}
inline ::gs::rpc::graph::EdgeKindPb* GraphDefPb::mutable_edge_kinds(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_mutable_edge_kinds()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>* GraphDefPb::mutable_edge_kinds()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.GraphDefPb.edge_kinds)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_edge_kinds();
}
inline const ::gs::rpc::graph::EdgeKindPb& GraphDefPb::edge_kinds(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_edge_kinds().Get(index);
}
inline ::gs::rpc::graph::EdgeKindPb* GraphDefPb::add_edge_kinds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::graph::EdgeKindPb* _add = _internal_mutable_edge_kinds()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>& GraphDefPb::edge_kinds() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_edge_kinds();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>&
GraphDefPb::_internal_edge_kinds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.edge_kinds_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>*
GraphDefPb::_internal_mutable_edge_kinds() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.edge_kinds_;
}

// map<string, int32> property_name_to_id = 7;
inline int GraphDefPb::_internal_property_name_to_id_size() const {
  return _internal_property_name_to_id().size();
}
inline int GraphDefPb::property_name_to_id_size() const {
  return _internal_property_name_to_id_size();
}
inline void GraphDefPb::clear_property_name_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_name_to_id_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GraphDefPb::_internal_property_name_to_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.property_name_to_id_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GraphDefPb::property_name_to_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:gs.rpc.graph.GraphDefPb.property_name_to_id)
  return _internal_property_name_to_id();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GraphDefPb::_internal_mutable_property_name_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.property_name_to_id_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GraphDefPb::mutable_property_name_to_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.graph.GraphDefPb.property_name_to_id)
  return _internal_mutable_property_name_to_id();
}

// .google.protobuf.Any extension = 8;
inline bool GraphDefPb::has_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extension_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& GraphDefPb::_internal_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& GraphDefPb::extension() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.extension)
  return _internal_extension();
}
inline void GraphDefPb::unsafe_arena_set_allocated_extension(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extension_);
  }
  _impl_.extension_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.GraphDefPb.extension)
}
inline ::google::protobuf::Any* GraphDefPb::release_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.extension_;
  _impl_.extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* GraphDefPb::unsafe_arena_release_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.GraphDefPb.extension)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.extension_;
  _impl_.extension_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* GraphDefPb::_internal_mutable_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.extension_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.extension_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.extension_;
}
inline ::google::protobuf::Any* GraphDefPb::mutable_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.extension)
  return _msg;
}
inline void GraphDefPb::set_allocated_extension(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extension_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extension_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.GraphDefPb.extension)
}

// bool is_multigraph = 9;
inline void GraphDefPb::clear_is_multigraph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_multigraph_ = false;
}
inline bool GraphDefPb::is_multigraph() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.is_multigraph)
  return _internal_is_multigraph();
}
inline void GraphDefPb::set_is_multigraph(bool value) {
  _internal_set_is_multigraph(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.is_multigraph)
}
inline bool GraphDefPb::_internal_is_multigraph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_multigraph_;
}
inline void GraphDefPb::_internal_set_is_multigraph(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_multigraph_ = value;
}

// bool compact_edges = 10;
inline void GraphDefPb::clear_compact_edges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compact_edges_ = false;
}
inline bool GraphDefPb::compact_edges() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.compact_edges)
  return _internal_compact_edges();
}
inline void GraphDefPb::set_compact_edges(bool value) {
  _internal_set_compact_edges(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.compact_edges)
}
inline bool GraphDefPb::_internal_compact_edges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compact_edges_;
}
inline void GraphDefPb::_internal_set_compact_edges(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compact_edges_ = value;
}

// bool use_perfect_hash = 11;
inline void GraphDefPb::clear_use_perfect_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_perfect_hash_ = false;
}
inline bool GraphDefPb::use_perfect_hash() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.use_perfect_hash)
  return _internal_use_perfect_hash();
}
inline void GraphDefPb::set_use_perfect_hash(bool value) {
  _internal_set_use_perfect_hash(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.use_perfect_hash)
}
inline bool GraphDefPb::_internal_use_perfect_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_perfect_hash_;
}
inline void GraphDefPb::_internal_set_use_perfect_hash(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_perfect_hash_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace rpc
}  // namespace gs


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::gs::rpc::graph::GraphTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::GraphTypePb>() {
  return ::gs::rpc::graph::GraphTypePb_descriptor();
}
template <>
struct is_proto_enum<::gs::rpc::graph::VertexMapTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::VertexMapTypePb>() {
  return ::gs::rpc::graph::VertexMapTypePb_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_graph_5fdef_2eproto_2epb_2eh
