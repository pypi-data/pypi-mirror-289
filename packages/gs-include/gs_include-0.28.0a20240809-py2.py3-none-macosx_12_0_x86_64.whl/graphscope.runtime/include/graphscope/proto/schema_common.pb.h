// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: schema_common.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_5fcommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_schema_5fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_schema_5fcommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_5fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_schema_5fcommon_2eproto;
namespace gs {
namespace rpc {
namespace graph {
class EdgeKindPb;
struct EdgeKindPbDefaultTypeInternal;
extern EdgeKindPbDefaultTypeInternal _EdgeKindPb_default_instance_;
class LabelIdPb;
struct LabelIdPbDefaultTypeInternal;
extern LabelIdPbDefaultTypeInternal _LabelIdPb_default_instance_;
class PropertyDefPb;
struct PropertyDefPbDefaultTypeInternal;
extern PropertyDefPbDefaultTypeInternal _PropertyDefPb_default_instance_;
class PropertyValuePb;
struct PropertyValuePbDefaultTypeInternal;
extern PropertyValuePbDefaultTypeInternal _PropertyValuePb_default_instance_;
class TypeDefPb;
struct TypeDefPbDefaultTypeInternal;
extern TypeDefPbDefaultTypeInternal _TypeDefPb_default_instance_;
}  // namespace graph
}  // namespace rpc
}  // namespace gs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace gs {
namespace rpc {
namespace graph {
enum TypeEnumPb : int {
  VERTEX = 0,
  EDGE = 1,
  TypeEnumPb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TypeEnumPb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TypeEnumPb_IsValid(int value);
extern const uint32_t TypeEnumPb_internal_data_[];
constexpr TypeEnumPb TypeEnumPb_MIN = static_cast<TypeEnumPb>(0);
constexpr TypeEnumPb TypeEnumPb_MAX = static_cast<TypeEnumPb>(1);
constexpr int TypeEnumPb_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
TypeEnumPb_descriptor();
template <typename T>
const std::string& TypeEnumPb_Name(T value) {
  static_assert(std::is_same<T, TypeEnumPb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TypeEnumPb_Name().");
  return TypeEnumPb_Name(static_cast<TypeEnumPb>(value));
}
template <>
inline const std::string& TypeEnumPb_Name(TypeEnumPb value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TypeEnumPb_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TypeEnumPb_Parse(absl::string_view name, TypeEnumPb* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TypeEnumPb>(
      TypeEnumPb_descriptor(), name, value);
}
enum DataTypePb : int {
  UNKNOWN = 0,
  BOOL = 1,
  CHAR = 2,
  SHORT = 3,
  INT = 4,
  LONG = 5,
  FLOAT = 6,
  DOUBLE = 7,
  STRING = 8,
  BYTES = 9,
  INT_LIST = 10,
  LONG_LIST = 11,
  FLOAT_LIST = 12,
  DOUBLE_LIST = 13,
  STRING_LIST = 14,
  NULLVALUE = 15,
  UINT = 16,
  ULONG = 17,
  DYNAMIC = 18,
  DATE32 = 19,
  DATE64 = 20,
  TIME32_S = 21,
  TIME32_MS = 22,
  TIME32_US = 23,
  TIME32_NS = 24,
  TIME64_S = 25,
  TIME64_MS = 26,
  TIME64_US = 27,
  TIME64_NS = 28,
  TIMESTAMP_S = 29,
  TIMESTAMP_MS = 30,
  TIMESTAMP_US = 31,
  TIMESTAMP_NS = 32,
  DataTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataTypePb_IsValid(int value);
extern const uint32_t DataTypePb_internal_data_[];
constexpr DataTypePb DataTypePb_MIN = static_cast<DataTypePb>(0);
constexpr DataTypePb DataTypePb_MAX = static_cast<DataTypePb>(32);
constexpr int DataTypePb_ARRAYSIZE = 32 + 1;
const ::google::protobuf::EnumDescriptor*
DataTypePb_descriptor();
template <typename T>
const std::string& DataTypePb_Name(T value) {
  static_assert(std::is_same<T, DataTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataTypePb_Name().");
  return DataTypePb_Name(static_cast<DataTypePb>(value));
}
template <>
inline const std::string& DataTypePb_Name(DataTypePb value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataTypePb_descriptor,
                                                 0, 32>(
      static_cast<int>(value));
}
inline bool DataTypePb_Parse(absl::string_view name, DataTypePb* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataTypePb>(
      DataTypePb_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PropertyValuePb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.PropertyValuePb) */ {
 public:
  inline PropertyValuePb() : PropertyValuePb(nullptr) {}
  ~PropertyValuePb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyValuePb(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyValuePb(const PropertyValuePb& from) : PropertyValuePb(nullptr, from) {}
  inline PropertyValuePb(PropertyValuePb&& from) noexcept
      : PropertyValuePb(nullptr, std::move(from)) {}
  inline PropertyValuePb& operator=(const PropertyValuePb& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValuePb& operator=(PropertyValuePb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyValuePb& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyValuePb* internal_default_instance() {
    return reinterpret_cast<const PropertyValuePb*>(
        &_PropertyValuePb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PropertyValuePb& a, PropertyValuePb& b) { a.Swap(&b); }
  inline void Swap(PropertyValuePb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyValuePb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyValuePb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PropertyValuePb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyValuePb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyValuePb& from) { PropertyValuePb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PropertyValuePb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.PropertyValuePb"; }

 protected:
  explicit PropertyValuePb(::google::protobuf::Arena* arena);
  PropertyValuePb(::google::protobuf::Arena* arena, const PropertyValuePb& from);
  PropertyValuePb(::google::protobuf::Arena* arena, PropertyValuePb&& from) noexcept
      : PropertyValuePb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValFieldNumber = 2,
    kDataTypeFieldNumber = 1,
  };
  // bytes val = 2;
  void clear_val() ;
  const std::string& val() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_val(Arg_&& arg, Args_... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* value);

  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(
      const std::string& value);
  std::string* _internal_mutable_val();

  public:
  // .gs.rpc.graph.DataTypePb data_type = 1;
  void clear_data_type() ;
  ::gs::rpc::graph::DataTypePb data_type() const;
  void set_data_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_data_type() const;
  void _internal_set_data_type(::gs::rpc::graph::DataTypePb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.PropertyValuePb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PropertyValuePb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyValuePb& from_msg);
    ::google::protobuf::internal::ArenaStringPtr val_;
    int data_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schema_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class LabelIdPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.LabelIdPb) */ {
 public:
  inline LabelIdPb() : LabelIdPb(nullptr) {}
  ~LabelIdPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LabelIdPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline LabelIdPb(const LabelIdPb& from) : LabelIdPb(nullptr, from) {}
  inline LabelIdPb(LabelIdPb&& from) noexcept
      : LabelIdPb(nullptr, std::move(from)) {}
  inline LabelIdPb& operator=(const LabelIdPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelIdPb& operator=(LabelIdPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelIdPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelIdPb* internal_default_instance() {
    return reinterpret_cast<const LabelIdPb*>(
        &_LabelIdPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LabelIdPb& a, LabelIdPb& b) { a.Swap(&b); }
  inline void Swap(LabelIdPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelIdPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelIdPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LabelIdPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LabelIdPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LabelIdPb& from) { LabelIdPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LabelIdPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.LabelIdPb"; }

 protected:
  explicit LabelIdPb(::google::protobuf::Arena* arena);
  LabelIdPb(::google::protobuf::Arena* arena, const LabelIdPb& from);
  LabelIdPb(::google::protobuf::Arena* arena, LabelIdPb&& from) noexcept
      : LabelIdPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.LabelIdPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LabelIdPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LabelIdPb& from_msg);
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schema_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class PropertyDefPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.PropertyDefPb) */ {
 public:
  inline PropertyDefPb() : PropertyDefPb(nullptr) {}
  ~PropertyDefPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyDefPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyDefPb(const PropertyDefPb& from) : PropertyDefPb(nullptr, from) {}
  inline PropertyDefPb(PropertyDefPb&& from) noexcept
      : PropertyDefPb(nullptr, std::move(from)) {}
  inline PropertyDefPb& operator=(const PropertyDefPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyDefPb& operator=(PropertyDefPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyDefPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyDefPb* internal_default_instance() {
    return reinterpret_cast<const PropertyDefPb*>(
        &_PropertyDefPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PropertyDefPb& a, PropertyDefPb& b) { a.Swap(&b); }
  inline void Swap(PropertyDefPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyDefPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyDefPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PropertyDefPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyDefPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyDefPb& from) { PropertyDefPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PropertyDefPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.PropertyDefPb"; }

 protected:
  explicit PropertyDefPb(::google::protobuf::Arena* arena);
  PropertyDefPb(::google::protobuf::Arena* arena, const PropertyDefPb& from);
  PropertyDefPb(::google::protobuf::Arena* arena, PropertyDefPb&& from) noexcept
      : PropertyDefPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kCommentFieldNumber = 7,
    kDefaultValueFieldNumber = 5,
    kIdFieldNumber = 1,
    kInnerIdFieldNumber = 2,
    kDataTypeFieldNumber = 4,
    kPkFieldNumber = 6,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string comment = 7;
  void clear_comment() ;
  const std::string& comment() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comment(Arg_&& arg, Args_... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* value);

  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(
      const std::string& value);
  std::string* _internal_mutable_comment();

  public:
  // .gs.rpc.graph.PropertyValuePb default_value = 5;
  bool has_default_value() const;
  void clear_default_value() ;
  const ::gs::rpc::graph::PropertyValuePb& default_value() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::PropertyValuePb* release_default_value();
  ::gs::rpc::graph::PropertyValuePb* mutable_default_value();
  void set_allocated_default_value(::gs::rpc::graph::PropertyValuePb* value);
  void unsafe_arena_set_allocated_default_value(::gs::rpc::graph::PropertyValuePb* value);
  ::gs::rpc::graph::PropertyValuePb* unsafe_arena_release_default_value();

  private:
  const ::gs::rpc::graph::PropertyValuePb& _internal_default_value() const;
  ::gs::rpc::graph::PropertyValuePb* _internal_mutable_default_value();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 inner_id = 2;
  void clear_inner_id() ;
  ::int32_t inner_id() const;
  void set_inner_id(::int32_t value);

  private:
  ::int32_t _internal_inner_id() const;
  void _internal_set_inner_id(::int32_t value);

  public:
  // .gs.rpc.graph.DataTypePb data_type = 4;
  void clear_data_type() ;
  ::gs::rpc::graph::DataTypePb data_type() const;
  void set_data_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_data_type() const;
  void _internal_set_data_type(::gs::rpc::graph::DataTypePb value);

  public:
  // bool pk = 6;
  void clear_pk() ;
  bool pk() const;
  void set_pk(bool value);

  private:
  bool _internal_pk() const;
  void _internal_set_pk(bool value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.PropertyDefPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      46, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PropertyDefPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyDefPb& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr comment_;
    ::gs::rpc::graph::PropertyValuePb* default_value_;
    ::int32_t id_;
    ::int32_t inner_id_;
    int data_type_;
    bool pk_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schema_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class EdgeKindPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.EdgeKindPb) */ {
 public:
  inline EdgeKindPb() : EdgeKindPb(nullptr) {}
  ~EdgeKindPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EdgeKindPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline EdgeKindPb(const EdgeKindPb& from) : EdgeKindPb(nullptr, from) {}
  inline EdgeKindPb(EdgeKindPb&& from) noexcept
      : EdgeKindPb(nullptr, std::move(from)) {}
  inline EdgeKindPb& operator=(const EdgeKindPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeKindPb& operator=(EdgeKindPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeKindPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeKindPb* internal_default_instance() {
    return reinterpret_cast<const EdgeKindPb*>(
        &_EdgeKindPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(EdgeKindPb& a, EdgeKindPb& b) { a.Swap(&b); }
  inline void Swap(EdgeKindPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeKindPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeKindPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EdgeKindPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EdgeKindPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EdgeKindPb& from) { EdgeKindPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EdgeKindPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.EdgeKindPb"; }

 protected:
  explicit EdgeKindPb(::google::protobuf::Arena* arena);
  EdgeKindPb(::google::protobuf::Arena* arena, const EdgeKindPb& from);
  EdgeKindPb(::google::protobuf::Arena* arena, EdgeKindPb&& from) noexcept
      : EdgeKindPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEdgeLabelFieldNumber = 1,
    kSrcVertexLabelFieldNumber = 3,
    kDstVertexLabelFieldNumber = 5,
    kEdgeLabelIdFieldNumber = 2,
    kSrcVertexLabelIdFieldNumber = 4,
    kDstVertexLabelIdFieldNumber = 6,
  };
  // string edge_label = 1;
  void clear_edge_label() ;
  const std::string& edge_label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_edge_label(Arg_&& arg, Args_... args);
  std::string* mutable_edge_label();
  PROTOBUF_NODISCARD std::string* release_edge_label();
  void set_allocated_edge_label(std::string* value);

  private:
  const std::string& _internal_edge_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge_label(
      const std::string& value);
  std::string* _internal_mutable_edge_label();

  public:
  // string src_vertex_label = 3;
  void clear_src_vertex_label() ;
  const std::string& src_vertex_label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_src_vertex_label(Arg_&& arg, Args_... args);
  std::string* mutable_src_vertex_label();
  PROTOBUF_NODISCARD std::string* release_src_vertex_label();
  void set_allocated_src_vertex_label(std::string* value);

  private:
  const std::string& _internal_src_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_vertex_label(
      const std::string& value);
  std::string* _internal_mutable_src_vertex_label();

  public:
  // string dst_vertex_label = 5;
  void clear_dst_vertex_label() ;
  const std::string& dst_vertex_label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dst_vertex_label(Arg_&& arg, Args_... args);
  std::string* mutable_dst_vertex_label();
  PROTOBUF_NODISCARD std::string* release_dst_vertex_label();
  void set_allocated_dst_vertex_label(std::string* value);

  private:
  const std::string& _internal_dst_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_vertex_label(
      const std::string& value);
  std::string* _internal_mutable_dst_vertex_label();

  public:
  // .gs.rpc.graph.LabelIdPb edge_label_id = 2;
  bool has_edge_label_id() const;
  void clear_edge_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& edge_label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_edge_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_edge_label_id();
  void set_allocated_edge_label_id(::gs::rpc::graph::LabelIdPb* value);
  void unsafe_arena_set_allocated_edge_label_id(::gs::rpc::graph::LabelIdPb* value);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_edge_label_id();

  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_edge_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_edge_label_id();

  public:
  // .gs.rpc.graph.LabelIdPb src_vertex_label_id = 4;
  bool has_src_vertex_label_id() const;
  void clear_src_vertex_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& src_vertex_label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_src_vertex_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_src_vertex_label_id();
  void set_allocated_src_vertex_label_id(::gs::rpc::graph::LabelIdPb* value);
  void unsafe_arena_set_allocated_src_vertex_label_id(::gs::rpc::graph::LabelIdPb* value);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_src_vertex_label_id();

  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_src_vertex_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_src_vertex_label_id();

  public:
  // .gs.rpc.graph.LabelIdPb dst_vertex_label_id = 6;
  bool has_dst_vertex_label_id() const;
  void clear_dst_vertex_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& dst_vertex_label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_dst_vertex_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_dst_vertex_label_id();
  void set_allocated_dst_vertex_label_id(::gs::rpc::graph::LabelIdPb* value);
  void unsafe_arena_set_allocated_dst_vertex_label_id(::gs::rpc::graph::LabelIdPb* value);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_dst_vertex_label_id();

  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_dst_vertex_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_dst_vertex_label_id();

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.EdgeKindPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EdgeKindPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EdgeKindPb& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr edge_label_;
    ::google::protobuf::internal::ArenaStringPtr src_vertex_label_;
    ::google::protobuf::internal::ArenaStringPtr dst_vertex_label_;
    ::gs::rpc::graph::LabelIdPb* edge_label_id_;
    ::gs::rpc::graph::LabelIdPb* src_vertex_label_id_;
    ::gs::rpc::graph::LabelIdPb* dst_vertex_label_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schema_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class TypeDefPb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gs.rpc.graph.TypeDefPb) */ {
 public:
  inline TypeDefPb() : TypeDefPb(nullptr) {}
  ~TypeDefPb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TypeDefPb(
      ::google::protobuf::internal::ConstantInitialized);

  inline TypeDefPb(const TypeDefPb& from) : TypeDefPb(nullptr, from) {}
  inline TypeDefPb(TypeDefPb&& from) noexcept
      : TypeDefPb(nullptr, std::move(from)) {}
  inline TypeDefPb& operator=(const TypeDefPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeDefPb& operator=(TypeDefPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypeDefPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeDefPb* internal_default_instance() {
    return reinterpret_cast<const TypeDefPb*>(
        &_TypeDefPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TypeDefPb& a, TypeDefPb& b) { a.Swap(&b); }
  inline void Swap(TypeDefPb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeDefPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeDefPb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TypeDefPb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TypeDefPb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TypeDefPb& from) { TypeDefPb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TypeDefPb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gs.rpc.graph.TypeDefPb"; }

 protected:
  explicit TypeDefPb(::google::protobuf::Arena* arena);
  TypeDefPb(::google::protobuf::Arena* arena, const TypeDefPb& from);
  TypeDefPb(::google::protobuf::Arena* arena, TypeDefPb&& from) noexcept
      : TypeDefPb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPropsFieldNumber = 5,
    kLabelFieldNumber = 2,
    kCommentFieldNumber = 6,
    kLabelIdFieldNumber = 3,
    kVersionIdFieldNumber = 1,
    kTypeEnumFieldNumber = 4,
  };
  // repeated .gs.rpc.graph.PropertyDefPb props = 5;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::gs::rpc::graph::PropertyDefPb* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>* mutable_props();

  private:
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>& _internal_props() const;
  ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>* _internal_mutable_props();
  public:
  const ::gs::rpc::graph::PropertyDefPb& props(int index) const;
  ::gs::rpc::graph::PropertyDefPb* add_props();
  const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>& props() const;
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string comment = 6;
  void clear_comment() ;
  const std::string& comment() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comment(Arg_&& arg, Args_... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* value);

  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(
      const std::string& value);
  std::string* _internal_mutable_comment();

  public:
  // .gs.rpc.graph.LabelIdPb label_id = 3;
  bool has_label_id() const;
  void clear_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_label_id();
  void set_allocated_label_id(::gs::rpc::graph::LabelIdPb* value);
  void unsafe_arena_set_allocated_label_id(::gs::rpc::graph::LabelIdPb* value);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_label_id();

  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_label_id();

  public:
  // int32 version_id = 1;
  void clear_version_id() ;
  ::int32_t version_id() const;
  void set_version_id(::int32_t value);

  private:
  ::int32_t _internal_version_id() const;
  void _internal_set_version_id(::int32_t value);

  public:
  // .gs.rpc.graph.TypeEnumPb type_enum = 4;
  void clear_type_enum() ;
  ::gs::rpc::graph::TypeEnumPb type_enum() const;
  void set_type_enum(::gs::rpc::graph::TypeEnumPb value);

  private:
  ::gs::rpc::graph::TypeEnumPb _internal_type_enum() const;
  void _internal_set_type_enum(::gs::rpc::graph::TypeEnumPb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.TypeDefPb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TypeDefPb_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TypeDefPb& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::gs::rpc::graph::PropertyDefPb > props_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr comment_;
    ::gs::rpc::graph::LabelIdPb* label_id_;
    ::int32_t version_id_;
    int type_enum_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schema_5fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LabelIdPb

// int32 id = 1;
inline void LabelIdPb::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t LabelIdPb::id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.LabelIdPb.id)
  return _internal_id();
}
inline void LabelIdPb::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.LabelIdPb.id)
}
inline ::int32_t LabelIdPb::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void LabelIdPb::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// PropertyValuePb

// .gs.rpc.graph.DataTypePb data_type = 1;
inline void PropertyValuePb::clear_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb PropertyValuePb::data_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyValuePb.data_type)
  return _internal_data_type();
}
inline void PropertyValuePb::set_data_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyValuePb.data_type)
}
inline ::gs::rpc::graph::DataTypePb PropertyValuePb::_internal_data_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.data_type_);
}
inline void PropertyValuePb::_internal_set_data_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = value;
}

// bytes val = 2;
inline void PropertyValuePb::clear_val() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.val_.ClearToEmpty();
}
inline const std::string& PropertyValuePb::val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyValuePb.val)
  return _internal_val();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyValuePb::set_val(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.val_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyValuePb.val)
}
inline std::string* PropertyValuePb::mutable_val() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyValuePb.val)
  return _s;
}
inline const std::string& PropertyValuePb::_internal_val() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.val_.Get();
}
inline void PropertyValuePb::_internal_set_val(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.val_.Set(value, GetArena());
}
inline std::string* PropertyValuePb::_internal_mutable_val() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.val_.Mutable( GetArena());
}
inline std::string* PropertyValuePb::release_val() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyValuePb.val)
  return _impl_.val_.Release();
}
inline void PropertyValuePb::set_allocated_val(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.val_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.val_.IsDefault()) {
          _impl_.val_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyValuePb.val)
}

// -------------------------------------------------------------------

// EdgeKindPb

// string edge_label = 1;
inline void EdgeKindPb::clear_edge_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_label_.ClearToEmpty();
}
inline const std::string& EdgeKindPb::edge_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.edge_label)
  return _internal_edge_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeKindPb::set_edge_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.EdgeKindPb.edge_label)
}
inline std::string* EdgeKindPb::mutable_edge_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_edge_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.edge_label)
  return _s;
}
inline const std::string& EdgeKindPb::_internal_edge_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.edge_label_.Get();
}
inline void EdgeKindPb::_internal_set_edge_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_label_.Set(value, GetArena());
}
inline std::string* EdgeKindPb::_internal_mutable_edge_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.edge_label_.Mutable( GetArena());
}
inline std::string* EdgeKindPb::release_edge_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.edge_label)
  return _impl_.edge_label_.Release();
}
inline void EdgeKindPb::set_allocated_edge_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.edge_label_.IsDefault()) {
          _impl_.edge_label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.edge_label)
}

// .gs.rpc.graph.LabelIdPb edge_label_id = 2;
inline bool EdgeKindPb::has_edge_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edge_label_id_ != nullptr);
  return value;
}
inline void EdgeKindPb::clear_edge_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edge_label_id_ != nullptr) _impl_.edge_label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::_internal_edge_label_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.edge_label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::edge_label_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.edge_label_id)
  return _internal_edge_label_id();
}
inline void EdgeKindPb::unsafe_arena_set_allocated_edge_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edge_label_id_);
  }
  _impl_.edge_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.EdgeKindPb.edge_label_id)
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::release_edge_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* released = _impl_.edge_label_id_;
  _impl_.edge_label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::unsafe_arena_release_edge_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.edge_label_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.edge_label_id_;
  _impl_.edge_label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::_internal_mutable_edge_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edge_label_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::gs::rpc::graph::LabelIdPb>(GetArena());
    _impl_.edge_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(p);
  }
  return _impl_.edge_label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::mutable_edge_label_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_edge_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.edge_label_id)
  return _msg;
}
inline void EdgeKindPb::set_allocated_edge_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.edge_label_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.edge_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.edge_label_id)
}

// string src_vertex_label = 3;
inline void EdgeKindPb::clear_src_vertex_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_vertex_label_.ClearToEmpty();
}
inline const std::string& EdgeKindPb::src_vertex_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.src_vertex_label)
  return _internal_src_vertex_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeKindPb::set_src_vertex_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_vertex_label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.EdgeKindPb.src_vertex_label)
}
inline std::string* EdgeKindPb::mutable_src_vertex_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_src_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.src_vertex_label)
  return _s;
}
inline const std::string& EdgeKindPb::_internal_src_vertex_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.src_vertex_label_.Get();
}
inline void EdgeKindPb::_internal_set_src_vertex_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_vertex_label_.Set(value, GetArena());
}
inline std::string* EdgeKindPb::_internal_mutable_src_vertex_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.src_vertex_label_.Mutable( GetArena());
}
inline std::string* EdgeKindPb::release_src_vertex_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.src_vertex_label)
  return _impl_.src_vertex_label_.Release();
}
inline void EdgeKindPb::set_allocated_src_vertex_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_vertex_label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.src_vertex_label_.IsDefault()) {
          _impl_.src_vertex_label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.src_vertex_label)
}

// .gs.rpc.graph.LabelIdPb src_vertex_label_id = 4;
inline bool EdgeKindPb::has_src_vertex_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_vertex_label_id_ != nullptr);
  return value;
}
inline void EdgeKindPb::clear_src_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.src_vertex_label_id_ != nullptr) _impl_.src_vertex_label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::_internal_src_vertex_label_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.src_vertex_label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::src_vertex_label_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
  return _internal_src_vertex_label_id();
}
inline void EdgeKindPb::unsafe_arena_set_allocated_src_vertex_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.src_vertex_label_id_);
  }
  _impl_.src_vertex_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::release_src_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gs::rpc::graph::LabelIdPb* released = _impl_.src_vertex_label_id_;
  _impl_.src_vertex_label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::unsafe_arena_release_src_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.src_vertex_label_id_;
  _impl_.src_vertex_label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::_internal_mutable_src_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.src_vertex_label_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::gs::rpc::graph::LabelIdPb>(GetArena());
    _impl_.src_vertex_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(p);
  }
  return _impl_.src_vertex_label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::mutable_src_vertex_label_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_src_vertex_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
  return _msg;
}
inline void EdgeKindPb::set_allocated_src_vertex_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.src_vertex_label_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.src_vertex_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
}

// string dst_vertex_label = 5;
inline void EdgeKindPb::clear_dst_vertex_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dst_vertex_label_.ClearToEmpty();
}
inline const std::string& EdgeKindPb::dst_vertex_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
  return _internal_dst_vertex_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeKindPb::set_dst_vertex_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dst_vertex_label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
}
inline std::string* EdgeKindPb::mutable_dst_vertex_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dst_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
  return _s;
}
inline const std::string& EdgeKindPb::_internal_dst_vertex_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dst_vertex_label_.Get();
}
inline void EdgeKindPb::_internal_set_dst_vertex_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dst_vertex_label_.Set(value, GetArena());
}
inline std::string* EdgeKindPb::_internal_mutable_dst_vertex_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dst_vertex_label_.Mutable( GetArena());
}
inline std::string* EdgeKindPb::release_dst_vertex_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
  return _impl_.dst_vertex_label_.Release();
}
inline void EdgeKindPb::set_allocated_dst_vertex_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dst_vertex_label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dst_vertex_label_.IsDefault()) {
          _impl_.dst_vertex_label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
}

// .gs.rpc.graph.LabelIdPb dst_vertex_label_id = 6;
inline bool EdgeKindPb::has_dst_vertex_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_vertex_label_id_ != nullptr);
  return value;
}
inline void EdgeKindPb::clear_dst_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dst_vertex_label_id_ != nullptr) _impl_.dst_vertex_label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::_internal_dst_vertex_label_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.dst_vertex_label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::dst_vertex_label_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
  return _internal_dst_vertex_label_id();
}
inline void EdgeKindPb::unsafe_arena_set_allocated_dst_vertex_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dst_vertex_label_id_);
  }
  _impl_.dst_vertex_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::release_dst_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gs::rpc::graph::LabelIdPb* released = _impl_.dst_vertex_label_id_;
  _impl_.dst_vertex_label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::unsafe_arena_release_dst_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.dst_vertex_label_id_;
  _impl_.dst_vertex_label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::_internal_mutable_dst_vertex_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dst_vertex_label_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::gs::rpc::graph::LabelIdPb>(GetArena());
    _impl_.dst_vertex_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(p);
  }
  return _impl_.dst_vertex_label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::mutable_dst_vertex_label_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_dst_vertex_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
  return _msg;
}
inline void EdgeKindPb::set_allocated_dst_vertex_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.dst_vertex_label_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dst_vertex_label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
}

// -------------------------------------------------------------------

// PropertyDefPb

// int32 id = 1;
inline void PropertyDefPb::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t PropertyDefPb::id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.id)
  return _internal_id();
}
inline void PropertyDefPb::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.id)
}
inline ::int32_t PropertyDefPb::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void PropertyDefPb::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int32 inner_id = 2;
inline void PropertyDefPb::clear_inner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inner_id_ = 0;
}
inline ::int32_t PropertyDefPb::inner_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.inner_id)
  return _internal_inner_id();
}
inline void PropertyDefPb::set_inner_id(::int32_t value) {
  _internal_set_inner_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.inner_id)
}
inline ::int32_t PropertyDefPb::_internal_inner_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inner_id_;
}
inline void PropertyDefPb::_internal_set_inner_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inner_id_ = value;
}

// string name = 3;
inline void PropertyDefPb::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PropertyDefPb::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDefPb::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.name)
}
inline std::string* PropertyDefPb::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyDefPb.name)
  return _s;
}
inline const std::string& PropertyDefPb::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void PropertyDefPb::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PropertyDefPb::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PropertyDefPb::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyDefPb.name)
  return _impl_.name_.Release();
}
inline void PropertyDefPb::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyDefPb.name)
}

// .gs.rpc.graph.DataTypePb data_type = 4;
inline void PropertyDefPb::clear_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb PropertyDefPb::data_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.data_type)
  return _internal_data_type();
}
inline void PropertyDefPb::set_data_type(::gs::rpc::graph::DataTypePb value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.data_type)
}
inline ::gs::rpc::graph::DataTypePb PropertyDefPb::_internal_data_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.data_type_);
}
inline void PropertyDefPb::_internal_set_data_type(::gs::rpc::graph::DataTypePb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = value;
}

// .gs.rpc.graph.PropertyValuePb default_value = 5;
inline bool PropertyDefPb::has_default_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_value_ != nullptr);
  return value;
}
inline void PropertyDefPb::clear_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.default_value_ != nullptr) _impl_.default_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gs::rpc::graph::PropertyValuePb& PropertyDefPb::_internal_default_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::gs::rpc::graph::PropertyValuePb* p = _impl_.default_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::PropertyValuePb&>(::gs::rpc::graph::_PropertyValuePb_default_instance_);
}
inline const ::gs::rpc::graph::PropertyValuePb& PropertyDefPb::default_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.default_value)
  return _internal_default_value();
}
inline void PropertyDefPb::unsafe_arena_set_allocated_default_value(::gs::rpc::graph::PropertyValuePb* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_value_);
  }
  _impl_.default_value_ = reinterpret_cast<::gs::rpc::graph::PropertyValuePb*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.PropertyDefPb.default_value)
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::release_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::PropertyValuePb* released = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::unsafe_arena_release_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyDefPb.default_value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::PropertyValuePb* temp = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::_internal_mutable_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.default_value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::gs::rpc::graph::PropertyValuePb>(GetArena());
    _impl_.default_value_ = reinterpret_cast<::gs::rpc::graph::PropertyValuePb*>(p);
  }
  return _impl_.default_value_;
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::mutable_default_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::gs::rpc::graph::PropertyValuePb* _msg = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyDefPb.default_value)
  return _msg;
}
inline void PropertyDefPb::set_allocated_default_value(::gs::rpc::graph::PropertyValuePb* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.default_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.default_value_ = reinterpret_cast<::gs::rpc::graph::PropertyValuePb*>(value);
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyDefPb.default_value)
}

// bool pk = 6;
inline void PropertyDefPb::clear_pk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pk_ = false;
}
inline bool PropertyDefPb::pk() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.pk)
  return _internal_pk();
}
inline void PropertyDefPb::set_pk(bool value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.pk)
}
inline bool PropertyDefPb::_internal_pk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pk_;
}
inline void PropertyDefPb::_internal_set_pk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pk_ = value;
}

// string comment = 7;
inline void PropertyDefPb::clear_comment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& PropertyDefPb::comment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.comment)
  return _internal_comment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDefPb::set_comment(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.comment)
}
inline std::string* PropertyDefPb::mutable_comment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyDefPb.comment)
  return _s;
}
inline const std::string& PropertyDefPb::_internal_comment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.comment_.Get();
}
inline void PropertyDefPb::_internal_set_comment(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.Set(value, GetArena());
}
inline std::string* PropertyDefPb::_internal_mutable_comment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.comment_.Mutable( GetArena());
}
inline std::string* PropertyDefPb::release_comment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyDefPb.comment)
  return _impl_.comment_.Release();
}
inline void PropertyDefPb::set_allocated_comment(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comment_.IsDefault()) {
          _impl_.comment_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyDefPb.comment)
}

// -------------------------------------------------------------------

// TypeDefPb

// int32 version_id = 1;
inline void TypeDefPb::clear_version_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_id_ = 0;
}
inline ::int32_t TypeDefPb::version_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.version_id)
  return _internal_version_id();
}
inline void TypeDefPb::set_version_id(::int32_t value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.version_id)
}
inline ::int32_t TypeDefPb::_internal_version_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_id_;
}
inline void TypeDefPb::_internal_set_version_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_id_ = value;
}

// string label = 2;
inline void TypeDefPb::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& TypeDefPb::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TypeDefPb::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.label)
}
inline std::string* TypeDefPb::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.label)
  return _s;
}
inline const std::string& TypeDefPb::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void TypeDefPb::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* TypeDefPb::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* TypeDefPb::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.TypeDefPb.label)
  return _impl_.label_.Release();
}
inline void TypeDefPb::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.TypeDefPb.label)
}

// .gs.rpc.graph.LabelIdPb label_id = 3;
inline bool TypeDefPb::has_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_id_ != nullptr);
  return value;
}
inline void TypeDefPb::clear_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_id_ != nullptr) _impl_.label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gs::rpc::graph::LabelIdPb& TypeDefPb::_internal_label_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& TypeDefPb::label_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.label_id)
  return _internal_label_id();
}
inline void TypeDefPb::unsafe_arena_set_allocated_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.label_id_);
  }
  _impl_.label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.TypeDefPb.label_id)
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::release_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* released = _impl_.label_id_;
  _impl_.label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::unsafe_arena_release_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.TypeDefPb.label_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.label_id_;
  _impl_.label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::_internal_mutable_label_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::gs::rpc::graph::LabelIdPb>(GetArena());
    _impl_.label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(p);
  }
  return _impl_.label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::mutable_label_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.label_id)
  return _msg;
}
inline void TypeDefPb::set_allocated_label_id(::gs::rpc::graph::LabelIdPb* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.label_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.label_id_ = reinterpret_cast<::gs::rpc::graph::LabelIdPb*>(value);
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.TypeDefPb.label_id)
}

// .gs.rpc.graph.TypeEnumPb type_enum = 4;
inline void TypeDefPb::clear_type_enum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_enum_ = 0;
}
inline ::gs::rpc::graph::TypeEnumPb TypeDefPb::type_enum() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.type_enum)
  return _internal_type_enum();
}
inline void TypeDefPb::set_type_enum(::gs::rpc::graph::TypeEnumPb value) {
  _internal_set_type_enum(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.type_enum)
}
inline ::gs::rpc::graph::TypeEnumPb TypeDefPb::_internal_type_enum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::gs::rpc::graph::TypeEnumPb>(_impl_.type_enum_);
}
inline void TypeDefPb::_internal_set_type_enum(::gs::rpc::graph::TypeEnumPb value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_enum_ = value;
}

// repeated .gs.rpc.graph.PropertyDefPb props = 5;
inline int TypeDefPb::_internal_props_size() const {
  return _internal_props().size();
}
inline int TypeDefPb::props_size() const {
  return _internal_props_size();
}
inline void TypeDefPb::clear_props() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.props_.Clear();
}
inline ::gs::rpc::graph::PropertyDefPb* TypeDefPb::mutable_props(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>* TypeDefPb::mutable_props()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.TypeDefPb.props)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_props();
}
inline const ::gs::rpc::graph::PropertyDefPb& TypeDefPb::props(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.props)
  return _internal_props().Get(index);
}
inline ::gs::rpc::graph::PropertyDefPb* TypeDefPb::add_props() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::gs::rpc::graph::PropertyDefPb* _add = _internal_mutable_props()->Add();
  // @@protoc_insertion_point(field_add:gs.rpc.graph.TypeDefPb.props)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>& TypeDefPb::props() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.TypeDefPb.props)
  return _internal_props();
}
inline const ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>&
TypeDefPb::_internal_props() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.props_;
}
inline ::google::protobuf::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>*
TypeDefPb::_internal_mutable_props() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.props_;
}

// string comment = 6;
inline void TypeDefPb::clear_comment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& TypeDefPb::comment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.comment)
  return _internal_comment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TypeDefPb::set_comment(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.comment)
}
inline std::string* TypeDefPb::mutable_comment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.comment)
  return _s;
}
inline const std::string& TypeDefPb::_internal_comment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.comment_.Get();
}
inline void TypeDefPb::_internal_set_comment(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.Set(value, GetArena());
}
inline std::string* TypeDefPb::_internal_mutable_comment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.comment_.Mutable( GetArena());
}
inline std::string* TypeDefPb::release_comment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:gs.rpc.graph.TypeDefPb.comment)
  return _impl_.comment_.Release();
}
inline void TypeDefPb::set_allocated_comment(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comment_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comment_.IsDefault()) {
          _impl_.comment_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.TypeDefPb.comment)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace rpc
}  // namespace gs


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::gs::rpc::graph::TypeEnumPb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::TypeEnumPb>() {
  return ::gs::rpc::graph::TypeEnumPb_descriptor();
}
template <>
struct is_proto_enum<::gs::rpc::graph::DataTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::DataTypePb>() {
  return ::gs::rpc::graph::DataTypePb_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_schema_5fcommon_2eproto_2epb_2eh
