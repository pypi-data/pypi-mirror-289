# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import Dict, Any, List


class AccountContext(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        user_token: str = None,
    ):
        self.account_id = account_id
        self.user_token = user_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        if self.user_token is not None:
            result['userToken'] = self.user_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        if m.get('userToken') is not None:
            self.user_token = m.get('userToken')
        return self


class HttpHeader(TeaModel):
    def __init__(
        self,
        header: Dict[str, str] = None,
        account: AccountContext = None,
    ):
        self.header = header
        self.account = account

    def validate(self):
        self.validate_required(self.header, 'header')
        self.validate_required(self.account, 'account')
        if self.account:
            self.account.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header is not None:
            result['header'] = self.header
        if self.account is not None:
            result['account'] = self.account.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('header') is not None:
            self.header = m.get('header')
        if m.get('account') is not None:
            temp_model = AccountContext()
            self.account = temp_model.from_map(m['account'])
        return self


class TenantContext(TeaModel):
    def __init__(
        self,
        tenant_id: str = None,
    ):
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class AmpContext(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        app_ip: str = None,
        action: str = None,
        version: str = None,
        request_id: str = None,
        acs_host: str = None,
        acs_product: str = None,
        user_agent: str = None,
        eagle_eye_trace_id: int = None,
        accept_language: str = None,
        client_vpc_id: str = None,
        client_port: str = None,
    ):
        self.access_key_id = access_key_id
        self.app_ip = app_ip
        self.action = action
        self.version = version
        self.request_id = request_id
        self.acs_host = acs_host
        self.acs_product = acs_product
        self.user_agent = user_agent
        self.eagle_eye_trace_id = eagle_eye_trace_id
        self.accept_language = accept_language
        self.client_vpc_id = client_vpc_id
        self.client_port = client_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['accessKeyId'] = self.access_key_id
        if self.app_ip is not None:
            result['app_ip'] = self.app_ip
        if self.action is not None:
            result['Action'] = self.action
        if self.version is not None:
            result['Version'] = self.version
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.acs_host is not None:
            result['AcsHost'] = self.acs_host
        if self.acs_product is not None:
            result['AcsProduct'] = self.acs_product
        if self.user_agent is not None:
            result['UserAgent'] = self.user_agent
        if self.eagle_eye_trace_id is not None:
            result['eagleEyeTraceId'] = self.eagle_eye_trace_id
        if self.accept_language is not None:
            result['AcceptLanguage'] = self.accept_language
        if self.client_vpc_id is not None:
            result['ClientVpcId'] = self.client_vpc_id
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accessKeyId') is not None:
            self.access_key_id = m.get('accessKeyId')
        if m.get('app_ip') is not None:
            self.app_ip = m.get('app_ip')
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('AcsHost') is not None:
            self.acs_host = m.get('AcsHost')
        if m.get('AcsProduct') is not None:
            self.acs_product = m.get('AcsProduct')
        if m.get('UserAgent') is not None:
            self.user_agent = m.get('UserAgent')
        if m.get('eagleEyeTraceId') is not None:
            self.eagle_eye_trace_id = m.get('eagleEyeTraceId')
        if m.get('AcceptLanguage') is not None:
            self.accept_language = m.get('AcceptLanguage')
        if m.get('ClientVpcId') is not None:
            self.client_vpc_id = m.get('ClientVpcId')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        return self


class GatewayContext(TeaModel):
    def __init__(
        self,
        tenant_context: TenantContext = None,
        account_context: AccountContext = None,
        amp_context: AmpContext = None,
        access_key_id: str = None,
        request_id: str = None,
        eagle_eye_trace_id: int = None,
        acs_host: str = None,
        app_ip: str = None,
        action: str = None,
        version: str = None,
        acs_product: str = None,
        user_agent: str = None,
        accept_language: str = None,
        client_vpc_id: str = None,
        client_port: str = None,
    ):
        self.tenant_context = tenant_context
        self.account_context = account_context
        self.amp_context = amp_context
        self.access_key_id = access_key_id
        self.request_id = request_id
        self.eagle_eye_trace_id = eagle_eye_trace_id
        self.acs_host = acs_host
        self.app_ip = app_ip
        self.action = action
        self.version = version
        self.acs_product = acs_product
        self.user_agent = user_agent
        self.accept_language = accept_language
        self.client_vpc_id = client_vpc_id
        self.client_port = client_port

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()
        if self.account_context:
            self.account_context.validate()
        if self.amp_context:
            self.amp_context.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['tenantContext'] = self.tenant_context.to_map()
        if self.account_context is not None:
            result['accountContext'] = self.account_context.to_map()
        if self.amp_context is not None:
            result['ampContext'] = self.amp_context.to_map()
        if self.access_key_id is not None:
            result['accessKeyId'] = self.access_key_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.eagle_eye_trace_id is not None:
            result['eagleEyeTraceId'] = self.eagle_eye_trace_id
        if self.acs_host is not None:
            result['AcsHost'] = self.acs_host
        if self.app_ip is not None:
            result['app_ip'] = self.app_ip
        if self.action is not None:
            result['Action'] = self.action
        if self.version is not None:
            result['Version'] = self.version
        if self.acs_product is not None:
            result['AcsProduct'] = self.acs_product
        if self.user_agent is not None:
            result['UserAgent'] = self.user_agent
        if self.accept_language is not None:
            result['AcceptLanguage'] = self.accept_language
        if self.client_vpc_id is not None:
            result['ClientVpcId'] = self.client_vpc_id
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('tenantContext') is not None:
            temp_model = TenantContext()
            self.tenant_context = temp_model.from_map(m['tenantContext'])
        if m.get('accountContext') is not None:
            temp_model = AccountContext()
            self.account_context = temp_model.from_map(m['accountContext'])
        if m.get('ampContext') is not None:
            temp_model = AmpContext()
            self.amp_context = temp_model.from_map(m['ampContext'])
        if m.get('accessKeyId') is not None:
            self.access_key_id = m.get('accessKeyId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('eagleEyeTraceId') is not None:
            self.eagle_eye_trace_id = m.get('eagleEyeTraceId')
        if m.get('AcsHost') is not None:
            self.acs_host = m.get('AcsHost')
        if m.get('app_ip') is not None:
            self.app_ip = m.get('app_ip')
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('AcsProduct') is not None:
            self.acs_product = m.get('AcsProduct')
        if m.get('UserAgent') is not None:
            self.user_agent = m.get('UserAgent')
        if m.get('AcceptLanguage') is not None:
            self.accept_language = m.get('AcceptLanguage')
        if m.get('ClientVpcId') is not None:
            self.client_vpc_id = m.get('ClientVpcId')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        return self


class ChatScenegroupMemberAddRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
        user_ids: str = None,
    ):
        self.open_conversation_id = open_conversation_id
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class AddScenegroupMemberRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupMemberAddRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupMemberAddRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupMemberAddResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExChatScenegroupMemberAddResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupMemberAddResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupMemberAddResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupMemberAddResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupMemberAddResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupMemberAddResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class AddScenegroupMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupMemberAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupMemberAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchQueryGroupMemberRequest(TeaModel):
    def __init__(
        self,
        cool_app_code: str = None,
        open_conversation_id: str = None,
        max_results: int = None,
        next_token: str = None,
    ):
        self.cool_app_code = cool_app_code
        self.open_conversation_id = open_conversation_id
        self.max_results = max_results
        self.next_token = next_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cool_app_code is not None:
            result['coolAppCode'] = self.cool_app_code
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('coolAppCode') is not None:
            self.cool_app_code = m.get('coolAppCode')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class BatchQueryGroupMemberRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: BatchQueryGroupMemberRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = BatchQueryGroupMemberRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class BatchQueryGroupMemberResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        has_more: bool = None,
        member_user_ids: List[str] = None,
        next_token: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.has_more = has_more
        self.member_user_ids = member_user_ids
        self.next_token = next_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.member_user_ids is not None:
            result['memberUserIds'] = self.member_user_ids
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('memberUserIds') is not None:
            self.member_user_ids = m.get('memberUserIds')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class ObjectResultExBatchQueryGroupMemberResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: BatchQueryGroupMemberResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = BatchQueryGroupMemberResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExBatchQueryGroupMemberResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExBatchQueryGroupMemberResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExBatchQueryGroupMemberResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class BatchQueryGroupMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExBatchQueryGroupMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExBatchQueryGroupMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckUserIsGroupMemberRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
    ):
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class CheckUserIsGroupMemberRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CheckUserIsGroupMemberRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CheckUserIsGroupMemberRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CheckUserIsGroupMemberResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExCheckUserIsGroupMemberResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CheckUserIsGroupMemberResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CheckUserIsGroupMemberResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCheckUserIsGroupMemberResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCheckUserIsGroupMemberResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCheckUserIsGroupMemberResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CheckUserIsGroupMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCheckUserIsGroupMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCheckUserIsGroupMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CloseTopboxRequest(TeaModel):
    def __init__(
        self,
        conversation_type: int = None,
        cool_app_code: str = None,
        group_template_id: str = None,
        open_conversation_id: str = None,
        out_track_id: str = None,
        robot_code: str = None,
    ):
        self.conversation_type = conversation_type
        self.cool_app_code = cool_app_code
        self.group_template_id = group_template_id
        self.open_conversation_id = open_conversation_id
        self.out_track_id = out_track_id
        self.robot_code = robot_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_type is not None:
            result['conversationType'] = self.conversation_type
        if self.cool_app_code is not None:
            result['coolAppCode'] = self.cool_app_code
        if self.group_template_id is not None:
            result['groupTemplateId'] = self.group_template_id
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.out_track_id is not None:
            result['outTrackId'] = self.out_track_id
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conversationType') is not None:
            self.conversation_type = m.get('conversationType')
        if m.get('coolAppCode') is not None:
            self.cool_app_code = m.get('coolAppCode')
        if m.get('groupTemplateId') is not None:
            self.group_template_id = m.get('groupTemplateId')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('outTrackId') is not None:
            self.out_track_id = m.get('outTrackId')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        return self


class CloseTopboxRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CloseTopboxRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CloseTopboxRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CloseTopboxResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExCloseTopboxResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CloseTopboxResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CloseTopboxResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCloseTopboxResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCloseTopboxResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCloseTopboxResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CloseTopboxResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCloseTopboxResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCloseTopboxResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChatScenegroupCreateRequest(TeaModel):
    def __init__(
        self,
        add_friend_forbidden: int = None,
        all_members_can_create_calendar: int = None,
        all_members_can_create_mcs_conf: int = None,
        chat_banned_type: int = None,
        group_email_disabled: int = None,
        group_live_switch: int = None,
        icon: str = None,
        management_type: int = None,
        members_to_admin_chat: int = None,
        mention_all_authority: int = None,
        only_admin_can_ding: int = None,
        only_admin_can_set_msg_top: int = None,
        searchable: int = None,
        show_history_type: int = None,
        subadmin_ids: str = None,
        template_id: str = None,
        title: str = None,
        user_ids: str = None,
        uuid: str = None,
        validation_type: int = None,
    ):
        self.add_friend_forbidden = add_friend_forbidden
        self.all_members_can_create_calendar = all_members_can_create_calendar
        self.all_members_can_create_mcs_conf = all_members_can_create_mcs_conf
        self.chat_banned_type = chat_banned_type
        self.group_email_disabled = group_email_disabled
        self.group_live_switch = group_live_switch
        self.icon = icon
        self.management_type = management_type
        self.members_to_admin_chat = members_to_admin_chat
        self.mention_all_authority = mention_all_authority
        self.only_admin_can_ding = only_admin_can_ding
        self.only_admin_can_set_msg_top = only_admin_can_set_msg_top
        self.searchable = searchable
        self.show_history_type = show_history_type
        self.subadmin_ids = subadmin_ids
        self.template_id = template_id
        self.title = title
        self.user_ids = user_ids
        self.uuid = uuid
        self.validation_type = validation_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_friend_forbidden is not None:
            result['addFriendForbidden'] = self.add_friend_forbidden
        if self.all_members_can_create_calendar is not None:
            result['allMembersCanCreateCalendar'] = self.all_members_can_create_calendar
        if self.all_members_can_create_mcs_conf is not None:
            result['allMembersCanCreateMcsConf'] = self.all_members_can_create_mcs_conf
        if self.chat_banned_type is not None:
            result['chatBannedType'] = self.chat_banned_type
        if self.group_email_disabled is not None:
            result['groupEmailDisabled'] = self.group_email_disabled
        if self.group_live_switch is not None:
            result['groupLiveSwitch'] = self.group_live_switch
        if self.icon is not None:
            result['icon'] = self.icon
        if self.management_type is not None:
            result['managementType'] = self.management_type
        if self.members_to_admin_chat is not None:
            result['membersToAdminChat'] = self.members_to_admin_chat
        if self.mention_all_authority is not None:
            result['mentionAllAuthority'] = self.mention_all_authority
        if self.only_admin_can_ding is not None:
            result['onlyAdminCanDing'] = self.only_admin_can_ding
        if self.only_admin_can_set_msg_top is not None:
            result['onlyAdminCanSetMsgTop'] = self.only_admin_can_set_msg_top
        if self.searchable is not None:
            result['searchable'] = self.searchable
        if self.show_history_type is not None:
            result['showHistoryType'] = self.show_history_type
        if self.subadmin_ids is not None:
            result['subadminIds'] = self.subadmin_ids
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.title is not None:
            result['title'] = self.title
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        if self.uuid is not None:
            result['uuid'] = self.uuid
        if self.validation_type is not None:
            result['validationType'] = self.validation_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('addFriendForbidden') is not None:
            self.add_friend_forbidden = m.get('addFriendForbidden')
        if m.get('allMembersCanCreateCalendar') is not None:
            self.all_members_can_create_calendar = m.get('allMembersCanCreateCalendar')
        if m.get('allMembersCanCreateMcsConf') is not None:
            self.all_members_can_create_mcs_conf = m.get('allMembersCanCreateMcsConf')
        if m.get('chatBannedType') is not None:
            self.chat_banned_type = m.get('chatBannedType')
        if m.get('groupEmailDisabled') is not None:
            self.group_email_disabled = m.get('groupEmailDisabled')
        if m.get('groupLiveSwitch') is not None:
            self.group_live_switch = m.get('groupLiveSwitch')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('managementType') is not None:
            self.management_type = m.get('managementType')
        if m.get('membersToAdminChat') is not None:
            self.members_to_admin_chat = m.get('membersToAdminChat')
        if m.get('mentionAllAuthority') is not None:
            self.mention_all_authority = m.get('mentionAllAuthority')
        if m.get('onlyAdminCanDing') is not None:
            self.only_admin_can_ding = m.get('onlyAdminCanDing')
        if m.get('onlyAdminCanSetMsgTop') is not None:
            self.only_admin_can_set_msg_top = m.get('onlyAdminCanSetMsgTop')
        if m.get('searchable') is not None:
            self.searchable = m.get('searchable')
        if m.get('showHistoryType') is not None:
            self.show_history_type = m.get('showHistoryType')
        if m.get('subadminIds') is not None:
            self.subadmin_ids = m.get('subadminIds')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        if m.get('uuid') is not None:
            self.uuid = m.get('uuid')
        if m.get('validationType') is not None:
            self.validation_type = m.get('validationType')
        return self


class CreateScenegroupRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupCreateRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupCreateRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupCreateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        open_conversation_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class ObjectResultExChatScenegroupCreateResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupCreateResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupCreateResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupCreateResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupCreateResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupCreateResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateScenegroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupCreateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTopboxRequestCardData(TeaModel):
    def __init__(
        self,
        card_param_map: Dict[str, Any] = None,
    ):
        self.card_param_map = card_param_map

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_param_map is not None:
            result['cardParamMap'] = self.card_param_map
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cardParamMap') is not None:
            self.card_param_map = m.get('cardParamMap')
        return self


class CreateTopboxRequestCardSettings(TeaModel):
    def __init__(
        self,
        pull_strategy: bool = None,
    ):
        self.pull_strategy = pull_strategy

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pull_strategy is not None:
            result['pullStrategy'] = self.pull_strategy
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pullStrategy') is not None:
            self.pull_strategy = m.get('pullStrategy')
        return self


class CreateTopboxRequest(TeaModel):
    def __init__(
        self,
        callback_route_key: str = None,
        card_data: CreateTopboxRequestCardData = None,
        card_settings: CreateTopboxRequestCardSettings = None,
        card_template_id: str = None,
        conversation_type: int = None,
        cool_app_code: str = None,
        expired_time: int = None,
        group_template_id: str = None,
        open_conversation_id: str = None,
        out_track_id: str = None,
        platforms: str = None,
        receiver_user_id_list: List[str] = None,
        robot_code: str = None,
        user_id_private_data_map: Dict[str, Any] = None,
    ):
        self.callback_route_key = callback_route_key
        self.card_data = card_data
        self.card_settings = card_settings
        self.card_template_id = card_template_id
        self.conversation_type = conversation_type
        self.cool_app_code = cool_app_code
        self.expired_time = expired_time
        self.group_template_id = group_template_id
        self.open_conversation_id = open_conversation_id
        self.out_track_id = out_track_id
        self.platforms = platforms
        self.receiver_user_id_list = receiver_user_id_list
        self.robot_code = robot_code
        self.user_id_private_data_map = user_id_private_data_map

    def validate(self):
        if self.card_data:
            self.card_data.validate()
        if self.card_settings:
            self.card_settings.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callback_route_key is not None:
            result['callbackRouteKey'] = self.callback_route_key
        if self.card_data is not None:
            result['cardData'] = self.card_data.to_map()
        if self.card_settings is not None:
            result['cardSettings'] = self.card_settings.to_map()
        if self.card_template_id is not None:
            result['cardTemplateId'] = self.card_template_id
        if self.conversation_type is not None:
            result['conversationType'] = self.conversation_type
        if self.cool_app_code is not None:
            result['coolAppCode'] = self.cool_app_code
        if self.expired_time is not None:
            result['expiredTime'] = self.expired_time
        if self.group_template_id is not None:
            result['groupTemplateId'] = self.group_template_id
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.out_track_id is not None:
            result['outTrackId'] = self.out_track_id
        if self.platforms is not None:
            result['platforms'] = self.platforms
        if self.receiver_user_id_list is not None:
            result['receiverUserIdList'] = self.receiver_user_id_list
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        if self.user_id_private_data_map is not None:
            result['userIdPrivateDataMap'] = self.user_id_private_data_map
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('callbackRouteKey') is not None:
            self.callback_route_key = m.get('callbackRouteKey')
        if m.get('cardData') is not None:
            temp_model = CreateTopboxRequestCardData()
            self.card_data = temp_model.from_map(m['cardData'])
        if m.get('cardSettings') is not None:
            temp_model = CreateTopboxRequestCardSettings()
            self.card_settings = temp_model.from_map(m['cardSettings'])
        if m.get('cardTemplateId') is not None:
            self.card_template_id = m.get('cardTemplateId')
        if m.get('conversationType') is not None:
            self.conversation_type = m.get('conversationType')
        if m.get('coolAppCode') is not None:
            self.cool_app_code = m.get('coolAppCode')
        if m.get('expiredTime') is not None:
            self.expired_time = m.get('expiredTime')
        if m.get('groupTemplateId') is not None:
            self.group_template_id = m.get('groupTemplateId')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('outTrackId') is not None:
            self.out_track_id = m.get('outTrackId')
        if m.get('platforms') is not None:
            self.platforms = m.get('platforms')
        if m.get('receiverUserIdList') is not None:
            self.receiver_user_id_list = m.get('receiverUserIdList')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        if m.get('userIdPrivateDataMap') is not None:
            self.user_id_private_data_map = m.get('userIdPrivateDataMap')
        return self


class CreateTopboxRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateTopboxRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateTopboxRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateTopboxResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExCreateTopboxResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateTopboxResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateTopboxResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateTopboxResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateTopboxResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateTopboxResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateTopboxResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateTopboxResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateTopboxResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChatScenegroupMemberDeleteRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
        user_ids: str = None,
    ):
        self.open_conversation_id = open_conversation_id
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class DeleteScenegroupMemberRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupMemberDeleteRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupMemberDeleteRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupMemberDeleteResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExChatScenegroupMemberDeleteResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupMemberDeleteResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupMemberDeleteResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupMemberDeleteResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupMemberDeleteResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupMemberDeleteResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteScenegroupMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupMemberDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupMemberDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInnerGroupMembersRequest(TeaModel):
    def __init__(
        self,
        max_results: int = None,
        next_token: str = None,
        open_conversation_id: str = None,
    ):
        self.max_results = max_results
        self.next_token = next_token
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class GetInnerGroupMembersRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetInnerGroupMembersRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetInnerGroupMembersRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetInnerGroupMembersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        has_more: bool = None,
        next_token: str = None,
        user_ids: List[str] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.has_more = has_more
        self.next_token = next_token
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class ObjectResultExGetInnerGroupMembersResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetInnerGroupMembersResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetInnerGroupMembersResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetInnerGroupMembersResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetInnerGroupMembersResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetInnerGroupMembersResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetInnerGroupMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetInnerGroupMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetInnerGroupMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNewestInnerGroupsRequest(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class GetNewestInnerGroupsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetNewestInnerGroupsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetNewestInnerGroupsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetNewestInnerGroupsResponseBodyGetNewestInnerGroupsResponseBodyGroupInfos(TeaModel):
    def __init__(
        self,
        icon: str = None,
        member_amount: str = None,
        open_conversation_id: str = None,
        title: str = None,
    ):
        self.icon = icon
        self.member_amount = member_amount
        self.open_conversation_id = open_conversation_id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['icon'] = self.icon
        if self.member_amount is not None:
            result['memberAmount'] = self.member_amount
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('memberAmount') is not None:
            self.member_amount = m.get('memberAmount')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class GetNewestInnerGroupsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        group_infos: List[GetNewestInnerGroupsResponseBodyGetNewestInnerGroupsResponseBodyGroupInfos] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.group_infos = group_infos

    def validate(self):
        if self.group_infos:
            for k in self.group_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['groupInfos'] = []
        if self.group_infos is not None:
            for k in self.group_infos:
                result['groupInfos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.group_infos = []
        if m.get('groupInfos') is not None:
            for k in m.get('groupInfos'):
                temp_model = GetNewestInnerGroupsResponseBodyGetNewestInnerGroupsResponseBodyGroupInfos()
                self.group_infos.append(temp_model.from_map(k))
        return self


class ObjectResultExGetNewestInnerGroupsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetNewestInnerGroupsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetNewestInnerGroupsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetNewestInnerGroupsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetNewestInnerGroupsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetNewestInnerGroupsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetNewestInnerGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetNewestInnerGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetNewestInnerGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSceneGroupInfoRequest(TeaModel):
    def __init__(
        self,
        cool_app_code: str = None,
        open_conversation_id: str = None,
    ):
        self.cool_app_code = cool_app_code
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cool_app_code is not None:
            result['coolAppCode'] = self.cool_app_code
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('coolAppCode') is not None:
            self.cool_app_code = m.get('coolAppCode')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class GetSceneGroupInfoRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetSceneGroupInfoRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetSceneGroupInfoRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetSceneGroupInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        group_url: str = None,
        icon: str = None,
        open_conversation_id: str = None,
        owner_user_id: str = None,
        status: int = None,
        template_id: str = None,
        title: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.group_url = group_url
        self.icon = icon
        self.open_conversation_id = open_conversation_id
        self.owner_user_id = owner_user_id
        self.status = status
        self.template_id = template_id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.group_url is not None:
            result['groupUrl'] = self.group_url
        if self.icon is not None:
            result['icon'] = self.icon
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.owner_user_id is not None:
            result['ownerUserId'] = self.owner_user_id
        if self.status is not None:
            result['status'] = self.status
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('groupUrl') is not None:
            self.group_url = m.get('groupUrl')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('ownerUserId') is not None:
            self.owner_user_id = m.get('ownerUserId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ObjectResultExGetSceneGroupInfoResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetSceneGroupInfoResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetSceneGroupInfoResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetSceneGroupInfoResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetSceneGroupInfoResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetSceneGroupInfoResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetSceneGroupInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetSceneGroupInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetSceneGroupInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChatScenegroupGetRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
    ):
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class GetScenegroupRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupGetRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupGetRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupGetResponseBodyManagementOptions(TeaModel):
    def __init__(
        self,
        chat_banned_type: str = None,
        management_type: str = None,
        mention_all_authority: str = None,
        searchable: str = None,
        show_history_type: str = None,
        validation_type: str = None,
    ):
        self.chat_banned_type = chat_banned_type
        self.management_type = management_type
        self.mention_all_authority = mention_all_authority
        self.searchable = searchable
        self.show_history_type = show_history_type
        self.validation_type = validation_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chat_banned_type is not None:
            result['chatBannedType'] = self.chat_banned_type
        if self.management_type is not None:
            result['managementType'] = self.management_type
        if self.mention_all_authority is not None:
            result['mentionAllAuthority'] = self.mention_all_authority
        if self.searchable is not None:
            result['searchable'] = self.searchable
        if self.show_history_type is not None:
            result['showHistoryType'] = self.show_history_type
        if self.validation_type is not None:
            result['validationType'] = self.validation_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('chatBannedType') is not None:
            self.chat_banned_type = m.get('chatBannedType')
        if m.get('managementType') is not None:
            self.management_type = m.get('managementType')
        if m.get('mentionAllAuthority') is not None:
            self.mention_all_authority = m.get('mentionAllAuthority')
        if m.get('searchable') is not None:
            self.searchable = m.get('searchable')
        if m.get('showHistoryType') is not None:
            self.show_history_type = m.get('showHistoryType')
        if m.get('validationType') is not None:
            self.validation_type = m.get('validationType')
        return self


class ChatScenegroupGetResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        group_url: str = None,
        icon: str = None,
        management_options: ChatScenegroupGetResponseBodyManagementOptions = None,
        open_conversation_id: str = None,
        owner_staff_id: str = None,
        sub_admin_staff_ids: List[str] = None,
        template_id: str = None,
        title: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.group_url = group_url
        self.icon = icon
        self.management_options = management_options
        self.open_conversation_id = open_conversation_id
        self.owner_staff_id = owner_staff_id
        self.sub_admin_staff_ids = sub_admin_staff_ids
        self.template_id = template_id
        self.title = title

    def validate(self):
        if self.management_options:
            self.management_options.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.group_url is not None:
            result['groupUrl'] = self.group_url
        if self.icon is not None:
            result['icon'] = self.icon
        if self.management_options is not None:
            result['managementOptions'] = self.management_options.to_map()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.owner_staff_id is not None:
            result['ownerStaffId'] = self.owner_staff_id
        if self.sub_admin_staff_ids is not None:
            result['subAdminStaffIds'] = self.sub_admin_staff_ids
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('groupUrl') is not None:
            self.group_url = m.get('groupUrl')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('managementOptions') is not None:
            temp_model = ChatScenegroupGetResponseBodyManagementOptions()
            self.management_options = temp_model.from_map(m['managementOptions'])
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('ownerStaffId') is not None:
            self.owner_staff_id = m.get('ownerStaffId')
        if m.get('subAdminStaffIds') is not None:
            self.sub_admin_staff_ids = m.get('subAdminStaffIds')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ObjectResultExChatScenegroupGetResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupGetResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupGetResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupGetResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupGetResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupGetResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetScenegroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupGetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupGetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryGroupMuteStatusRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
    ):
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class QueryGroupMuteStatusRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryGroupMuteStatusRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryGroupMuteStatusRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryGroupMuteStatusResponseBodyQueryGroupMuteStatusResponseBodyUserMuteResult(TeaModel):
    def __init__(
        self,
        mute_end_time: int = None,
        mute_start_time: int = None,
        user_mute_mode: bool = None,
    ):
        self.mute_end_time = mute_end_time
        self.mute_start_time = mute_start_time
        self.user_mute_mode = user_mute_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mute_end_time is not None:
            result['muteEndTime'] = self.mute_end_time
        if self.mute_start_time is not None:
            result['muteStartTime'] = self.mute_start_time
        if self.user_mute_mode is not None:
            result['userMuteMode'] = self.user_mute_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('muteEndTime') is not None:
            self.mute_end_time = m.get('muteEndTime')
        if m.get('muteStartTime') is not None:
            self.mute_start_time = m.get('muteStartTime')
        if m.get('userMuteMode') is not None:
            self.user_mute_mode = m.get('userMuteMode')
        return self


class QueryGroupMuteStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        group_mute_mode: bool = None,
        user_mute_result: QueryGroupMuteStatusResponseBodyQueryGroupMuteStatusResponseBodyUserMuteResult = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.group_mute_mode = group_mute_mode
        self.user_mute_result = user_mute_result

    def validate(self):
        if self.user_mute_result:
            self.user_mute_result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.group_mute_mode is not None:
            result['groupMuteMode'] = self.group_mute_mode
        if self.user_mute_result is not None:
            result['userMuteResult'] = self.user_mute_result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('groupMuteMode') is not None:
            self.group_mute_mode = m.get('groupMuteMode')
        if m.get('userMuteResult') is not None:
            temp_model = QueryGroupMuteStatusResponseBodyQueryGroupMuteStatusResponseBodyUserMuteResult()
            self.user_mute_result = temp_model.from_map(m['userMuteResult'])
        return self


class ObjectResultExQueryGroupMuteStatusResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryGroupMuteStatusResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryGroupMuteStatusResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryGroupMuteStatusResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryGroupMuteStatusResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryGroupMuteStatusResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryGroupMuteStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryGroupMuteStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryGroupMuteStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySceneGroupTemplateRobotRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
        robot_code: str = None,
    ):
        self.open_conversation_id = open_conversation_id
        self.robot_code = robot_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        return self


class QuerySceneGroupTemplateRobotRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QuerySceneGroupTemplateRobotRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QuerySceneGroupTemplateRobotRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QuerySceneGroupTemplateRobotResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        user_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class ObjectResultExQuerySceneGroupTemplateRobotResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QuerySceneGroupTemplateRobotResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QuerySceneGroupTemplateRobotResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQuerySceneGroupTemplateRobotResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQuerySceneGroupTemplateRobotResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQuerySceneGroupTemplateRobotResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QuerySceneGroupTemplateRobotResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQuerySceneGroupTemplateRobotResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQuerySceneGroupTemplateRobotResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchInnerGroupsRequest(TeaModel):
    def __init__(
        self,
        max_results: int = None,
        search_key: str = None,
    ):
        self.max_results = max_results
        self.search_key = search_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.search_key is not None:
            result['searchKey'] = self.search_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('searchKey') is not None:
            self.search_key = m.get('searchKey')
        return self


class SearchInnerGroupsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SearchInnerGroupsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SearchInnerGroupsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SearchInnerGroupsResponseBodySearchInnerGroupsResponseBodyGroupInfos(TeaModel):
    def __init__(
        self,
        icon: str = None,
        member_amount: str = None,
        open_conversation_id: str = None,
        title: str = None,
    ):
        self.icon = icon
        self.member_amount = member_amount
        self.open_conversation_id = open_conversation_id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['icon'] = self.icon
        if self.member_amount is not None:
            result['memberAmount'] = self.member_amount
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('memberAmount') is not None:
            self.member_amount = m.get('memberAmount')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class SearchInnerGroupsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        group_infos: List[SearchInnerGroupsResponseBodySearchInnerGroupsResponseBodyGroupInfos] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.group_infos = group_infos

    def validate(self):
        if self.group_infos:
            for k in self.group_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['groupInfos'] = []
        if self.group_infos is not None:
            for k in self.group_infos:
                result['groupInfos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.group_infos = []
        if m.get('groupInfos') is not None:
            for k in m.get('groupInfos'):
                temp_model = SearchInnerGroupsResponseBodySearchInnerGroupsResponseBodyGroupInfos()
                self.group_infos.append(temp_model.from_map(k))
        return self


class ObjectResultExSearchInnerGroupsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SearchInnerGroupsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SearchInnerGroupsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSearchInnerGroupsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSearchInnerGroupsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSearchInnerGroupsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SearchInnerGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSearchInnerGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSearchInnerGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChatScenegroupMessageSendRequest(TeaModel):
    def __init__(
        self,
        at_users: str = None,
        is_at_all: bool = None,
        msg_media_id_param_map: str = None,
        msg_param_map: str = None,
        msg_template_id: str = None,
        receiver_user_ids: str = None,
        robot_code: str = None,
        target_open_conversation_id: str = None,
    ):
        self.at_users = at_users
        self.is_at_all = is_at_all
        self.msg_media_id_param_map = msg_media_id_param_map
        self.msg_param_map = msg_param_map
        self.msg_template_id = msg_template_id
        self.receiver_user_ids = receiver_user_ids
        self.robot_code = robot_code
        self.target_open_conversation_id = target_open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.at_users is not None:
            result['atUsers'] = self.at_users
        if self.is_at_all is not None:
            result['isAtAll'] = self.is_at_all
        if self.msg_media_id_param_map is not None:
            result['msgMediaIdParamMap'] = self.msg_media_id_param_map
        if self.msg_param_map is not None:
            result['msgParamMap'] = self.msg_param_map
        if self.msg_template_id is not None:
            result['msgTemplateId'] = self.msg_template_id
        if self.receiver_user_ids is not None:
            result['receiverUserIds'] = self.receiver_user_ids
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        if self.target_open_conversation_id is not None:
            result['targetOpenConversationId'] = self.target_open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('atUsers') is not None:
            self.at_users = m.get('atUsers')
        if m.get('isAtAll') is not None:
            self.is_at_all = m.get('isAtAll')
        if m.get('msgMediaIdParamMap') is not None:
            self.msg_media_id_param_map = m.get('msgMediaIdParamMap')
        if m.get('msgParamMap') is not None:
            self.msg_param_map = m.get('msgParamMap')
        if m.get('msgTemplateId') is not None:
            self.msg_template_id = m.get('msgTemplateId')
        if m.get('receiverUserIds') is not None:
            self.receiver_user_ids = m.get('receiverUserIds')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        if m.get('targetOpenConversationId') is not None:
            self.target_open_conversation_id = m.get('targetOpenConversationId')
        return self


class SendScencegroupMessageRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupMessageSendRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupMessageSendRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupMessageSendResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        open_msg_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.open_msg_id = open_msg_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.open_msg_id is not None:
            result['openMsgId'] = self.open_msg_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('openMsgId') is not None:
            self.open_msg_id = m.get('openMsgId')
        return self


class ObjectResultExChatScenegroupMessageSendResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupMessageSendResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupMessageSendResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupMessageSendResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupMessageSendResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupMessageSendResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SendScencegroupMessageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupMessageSendResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupMessageSendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChatScenegroupTemplateStartOrStopRequest(TeaModel):
    def __init__(
        self,
        mode: int = None,
        open_conversation_id: str = None,
        template_id: str = None,
    ):
        self.mode = mode
        self.open_conversation_id = open_conversation_id
        self.template_id = template_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mode is not None:
            result['mode'] = self.mode
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('mode') is not None:
            self.mode = m.get('mode')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        return self


class StartOrStopScenegroupTemplateRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupTemplateStartOrStopRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupTemplateStartOrStopRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupTemplateStartOrStopResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExChatScenegroupTemplateStartOrStopResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupTemplateStartOrStopResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupTemplateStartOrStopResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupTemplateStartOrStopResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupTemplateStartOrStopResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupTemplateStartOrStopResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class StartOrStopScenegroupTemplateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupTemplateStartOrStopResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupTemplateStartOrStopResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateGroupSubAdminRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
        role: int = None,
        user_ids: List[str] = None,
    ):
        self.open_conversation_id = open_conversation_id
        self.role = role
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.role is not None:
            result['role'] = self.role
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class UpdateGroupSubAdminRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateGroupSubAdminRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateGroupSubAdminRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateGroupSubAdminResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExUpdateGroupSubAdminResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateGroupSubAdminResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateGroupSubAdminResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateGroupSubAdminResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateGroupSubAdminResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateGroupSubAdminResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateGroupSubAdminResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateGroupSubAdminResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateGroupSubAdminResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMemberBanWordsRequest(TeaModel):
    def __init__(
        self,
        mute_duration: int = None,
        mute_status: int = None,
        open_conversation_id: str = None,
        user_ids: List[str] = None,
    ):
        self.mute_duration = mute_duration
        self.mute_status = mute_status
        self.open_conversation_id = open_conversation_id
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mute_duration is not None:
            result['muteDuration'] = self.mute_duration
        if self.mute_status is not None:
            result['muteStatus'] = self.mute_status
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('muteDuration') is not None:
            self.mute_duration = m.get('muteDuration')
        if m.get('muteStatus') is not None:
            self.mute_status = m.get('muteStatus')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class UpdateMemberBanWordsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateMemberBanWordsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateMemberBanWordsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateMemberBanWordsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExUpdateMemberBanWordsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateMemberBanWordsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateMemberBanWordsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateMemberBanWordsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateMemberBanWordsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateMemberBanWordsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateMemberBanWordsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateMemberBanWordsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateMemberBanWordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMemberGroupNickRequest(TeaModel):
    def __init__(
        self,
        group_nick: str = None,
        open_conversation_id: str = None,
        user_id: str = None,
    ):
        self.group_nick = group_nick
        self.open_conversation_id = open_conversation_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_nick is not None:
            result['groupNick'] = self.group_nick
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupNick') is not None:
            self.group_nick = m.get('groupNick')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class UpdateMemberGroupNickRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateMemberGroupNickRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateMemberGroupNickRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateMemberGroupNickResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExUpdateMemberGroupNickResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateMemberGroupNickResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateMemberGroupNickResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateMemberGroupNickResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateMemberGroupNickResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateMemberGroupNickResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateMemberGroupNickResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateMemberGroupNickResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateMemberGroupNickResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChatScenegroupUpdateRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: int = None,
        plugin_customize_verify: int = None,
        owner_user_id: str = None,
        add_friend_forbidden: int = None,
        all_members_can_create_calendar: int = None,
        all_members_can_create_mcs_conf: int = None,
        chat_banned_type: int = None,
        group_email_disabled: int = None,
        group_live_switch: int = None,
        icon: str = None,
        management_type: int = None,
        members_to_admin_chat: int = None,
        mention_all_authority: int = None,
        only_admin_can_ding: int = None,
        only_admin_can_set_msg_top: int = None,
        searchable: int = None,
        show_history_type: int = None,
        title: str = None,
        uuid: str = None,
        validation_type: int = None,
    ):
        self.open_conversation_id = open_conversation_id
        self.plugin_customize_verify = plugin_customize_verify
        self.owner_user_id = owner_user_id
        self.add_friend_forbidden = add_friend_forbidden
        self.all_members_can_create_calendar = all_members_can_create_calendar
        self.all_members_can_create_mcs_conf = all_members_can_create_mcs_conf
        self.chat_banned_type = chat_banned_type
        self.group_email_disabled = group_email_disabled
        self.group_live_switch = group_live_switch
        self.icon = icon
        self.management_type = management_type
        self.members_to_admin_chat = members_to_admin_chat
        self.mention_all_authority = mention_all_authority
        self.only_admin_can_ding = only_admin_can_ding
        self.only_admin_can_set_msg_top = only_admin_can_set_msg_top
        self.searchable = searchable
        self.show_history_type = show_history_type
        self.title = title
        self.uuid = uuid
        self.validation_type = validation_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.plugin_customize_verify is not None:
            result['pluginCustomizeVerify'] = self.plugin_customize_verify
        if self.owner_user_id is not None:
            result['ownerUserId'] = self.owner_user_id
        if self.add_friend_forbidden is not None:
            result['addFriendForbidden'] = self.add_friend_forbidden
        if self.all_members_can_create_calendar is not None:
            result['allMembersCanCreateCalendar'] = self.all_members_can_create_calendar
        if self.all_members_can_create_mcs_conf is not None:
            result['allMembersCanCreateMcsConf'] = self.all_members_can_create_mcs_conf
        if self.chat_banned_type is not None:
            result['chatBannedType'] = self.chat_banned_type
        if self.group_email_disabled is not None:
            result['groupEmailDisabled'] = self.group_email_disabled
        if self.group_live_switch is not None:
            result['groupLiveSwitch'] = self.group_live_switch
        if self.icon is not None:
            result['icon'] = self.icon
        if self.management_type is not None:
            result['managementType'] = self.management_type
        if self.members_to_admin_chat is not None:
            result['membersToAdminChat'] = self.members_to_admin_chat
        if self.mention_all_authority is not None:
            result['mentionAllAuthority'] = self.mention_all_authority
        if self.only_admin_can_ding is not None:
            result['onlyAdminCanDing'] = self.only_admin_can_ding
        if self.only_admin_can_set_msg_top is not None:
            result['onlyAdminCanSetMsgTop'] = self.only_admin_can_set_msg_top
        if self.searchable is not None:
            result['searchable'] = self.searchable
        if self.show_history_type is not None:
            result['showHistoryType'] = self.show_history_type
        if self.title is not None:
            result['title'] = self.title
        if self.uuid is not None:
            result['uuid'] = self.uuid
        if self.validation_type is not None:
            result['validationType'] = self.validation_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('pluginCustomizeVerify') is not None:
            self.plugin_customize_verify = m.get('pluginCustomizeVerify')
        if m.get('ownerUserId') is not None:
            self.owner_user_id = m.get('ownerUserId')
        if m.get('addFriendForbidden') is not None:
            self.add_friend_forbidden = m.get('addFriendForbidden')
        if m.get('allMembersCanCreateCalendar') is not None:
            self.all_members_can_create_calendar = m.get('allMembersCanCreateCalendar')
        if m.get('allMembersCanCreateMcsConf') is not None:
            self.all_members_can_create_mcs_conf = m.get('allMembersCanCreateMcsConf')
        if m.get('chatBannedType') is not None:
            self.chat_banned_type = m.get('chatBannedType')
        if m.get('groupEmailDisabled') is not None:
            self.group_email_disabled = m.get('groupEmailDisabled')
        if m.get('groupLiveSwitch') is not None:
            self.group_live_switch = m.get('groupLiveSwitch')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('managementType') is not None:
            self.management_type = m.get('managementType')
        if m.get('membersToAdminChat') is not None:
            self.members_to_admin_chat = m.get('membersToAdminChat')
        if m.get('mentionAllAuthority') is not None:
            self.mention_all_authority = m.get('mentionAllAuthority')
        if m.get('onlyAdminCanDing') is not None:
            self.only_admin_can_ding = m.get('onlyAdminCanDing')
        if m.get('onlyAdminCanSetMsgTop') is not None:
            self.only_admin_can_set_msg_top = m.get('onlyAdminCanSetMsgTop')
        if m.get('searchable') is not None:
            self.searchable = m.get('searchable')
        if m.get('showHistoryType') is not None:
            self.show_history_type = m.get('showHistoryType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('uuid') is not None:
            self.uuid = m.get('uuid')
        if m.get('validationType') is not None:
            self.validation_type = m.get('validationType')
        return self


class UpdateScenegroupRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ChatScenegroupUpdateRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ChatScenegroupUpdateRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ChatScenegroupUpdateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExChatScenegroupUpdateResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ChatScenegroupUpdateResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ChatScenegroupUpdateResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExChatScenegroupUpdateResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExChatScenegroupUpdateResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExChatScenegroupUpdateResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateScenegroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExChatScenegroupUpdateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExChatScenegroupUpdateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelScheduleConferenceRequest(TeaModel):
    def __init__(
        self,
        schedule_conference_id: str = None,
    ):
        self.schedule_conference_id = schedule_conference_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        return self


class CancelScheduleConferenceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CancelScheduleConferenceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CancelScheduleConferenceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CancelScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExCancelScheduleConferenceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CancelScheduleConferenceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CancelScheduleConferenceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCancelScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCancelScheduleConferenceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCancelScheduleConferenceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CancelScheduleConferenceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCancelScheduleConferenceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCancelScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers(TeaModel):
    def __init__(
        self,
        member_id: str = None,
        member_name: str = None,
        member_type: str = None,
    ):
        self.member_id = member_id
        self.member_name = member_name
        self.member_type = member_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['memberId'] = self.member_id
        if self.member_name is not None:
            result['memberName'] = self.member_name
        if self.member_type is not None:
            result['memberType'] = self.member_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('memberId') is not None:
            self.member_id = m.get('memberId')
        if m.get('memberName') is not None:
            self.member_name = m.get('memberName')
        if m.get('memberType') is not None:
            self.member_type = m.get('memberType')
        return self


class CreateMeetingRoomRequestReservationAuthority(TeaModel):
    def __init__(
        self,
        authorized_members: List[CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers] = None,
    ):
        self.authorized_members = authorized_members

    def validate(self):
        if self.authorized_members:
            for k in self.authorized_members:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['authorizedMembers'] = []
        if self.authorized_members is not None:
            for k in self.authorized_members:
                result['authorizedMembers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.authorized_members = []
        if m.get('authorizedMembers') is not None:
            for k in m.get('authorizedMembers'):
                temp_model = CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers()
                self.authorized_members.append(temp_model.from_map(k))
        return self


class CreateMeetingRoomRequestRoomLocation(TeaModel):
    def __init__(
        self,
        desc: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CreateMeetingRoomRequest(TeaModel):
    def __init__(
        self,
        enable_cycle_reservation: bool = None,
        group_id: int = None,
        isv_room_id: str = None,
        reservation_authority: CreateMeetingRoomRequestReservationAuthority = None,
        room_capacity: int = None,
        room_label_ids: List[int] = None,
        room_location: CreateMeetingRoomRequestRoomLocation = None,
        room_name: str = None,
        room_picture: str = None,
        room_status: int = None,
    ):
        self.enable_cycle_reservation = enable_cycle_reservation
        self.group_id = group_id
        self.isv_room_id = isv_room_id
        self.reservation_authority = reservation_authority
        self.room_capacity = room_capacity
        self.room_label_ids = room_label_ids
        self.room_location = room_location
        self.room_name = room_name
        self.room_picture = room_picture
        self.room_status = room_status

    def validate(self):
        if self.reservation_authority:
            self.reservation_authority.validate()
        if self.room_location:
            self.room_location.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_cycle_reservation is not None:
            result['enableCycleReservation'] = self.enable_cycle_reservation
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.isv_room_id is not None:
            result['isvRoomId'] = self.isv_room_id
        if self.reservation_authority is not None:
            result['reservationAuthority'] = self.reservation_authority.to_map()
        if self.room_capacity is not None:
            result['roomCapacity'] = self.room_capacity
        if self.room_label_ids is not None:
            result['roomLabelIds'] = self.room_label_ids
        if self.room_location is not None:
            result['roomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['roomName'] = self.room_name
        if self.room_picture is not None:
            result['roomPicture'] = self.room_picture
        if self.room_status is not None:
            result['roomStatus'] = self.room_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('enableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('enableCycleReservation')
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('isvRoomId') is not None:
            self.isv_room_id = m.get('isvRoomId')
        if m.get('reservationAuthority') is not None:
            temp_model = CreateMeetingRoomRequestReservationAuthority()
            self.reservation_authority = temp_model.from_map(m['reservationAuthority'])
        if m.get('roomCapacity') is not None:
            self.room_capacity = m.get('roomCapacity')
        if m.get('roomLabelIds') is not None:
            self.room_label_ids = m.get('roomLabelIds')
        if m.get('roomLocation') is not None:
            temp_model = CreateMeetingRoomRequestRoomLocation()
            self.room_location = temp_model.from_map(m['roomLocation'])
        if m.get('roomName') is not None:
            self.room_name = m.get('roomName')
        if m.get('roomPicture') is not None:
            self.room_picture = m.get('roomPicture')
        if m.get('roomStatus') is not None:
            self.room_status = m.get('roomStatus')
        return self


class CreateMeetingRoomRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateMeetingRoomRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateMeetingRoomRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExCreateMeetingRoomResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateMeetingRoomResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateMeetingRoomResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateMeetingRoomResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateMeetingRoomResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateMeetingRoomResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateMeetingRoomResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMeetingRoomGroupRequest(TeaModel):
    def __init__(
        self,
        group_name: str = None,
        parent_group_id: int = None,
    ):
        self.group_name = group_name
        self.parent_group_id = parent_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.parent_group_id is not None:
            result['parentGroupId'] = self.parent_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('parentGroupId') is not None:
            self.parent_group_id = m.get('parentGroupId')
        return self


class CreateMeetingRoomGroupRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateMeetingRoomGroupRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateMeetingRoomGroupRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExCreateMeetingRoomGroupResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateMeetingRoomGroupResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateMeetingRoomGroupResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateMeetingRoomGroupResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateMeetingRoomGroupResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateMeetingRoomGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateMeetingRoomGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScheduleConferenceRequest(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        start_time: int = None,
        title: str = None,
    ):
        self.end_time = end_time
        self.start_time = start_time
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CreateScheduleConferenceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateScheduleConferenceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateScheduleConferenceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        phones: List[str] = None,
        room_code: str = None,
        schedule_conference_id: str = None,
        url: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.phones = phones
        self.room_code = room_code
        self.schedule_conference_id = schedule_conference_id
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.phones is not None:
            result['phones'] = self.phones
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('phones') is not None:
            self.phones = m.get('phones')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ObjectResultExCreateScheduleConferenceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateScheduleConferenceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateScheduleConferenceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateScheduleConferenceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateScheduleConferenceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateScheduleConferenceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateScheduleConferenceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateVideoConferenceRequest(TeaModel):
    def __init__(
        self,
        conf_title: str = None,
        invite_caller: bool = None,
        invite_user_ids: List[str] = None,
    ):
        self.conf_title = conf_title
        self.invite_caller = invite_caller
        self.invite_user_ids = invite_user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conf_title is not None:
            result['confTitle'] = self.conf_title
        if self.invite_caller is not None:
            result['inviteCaller'] = self.invite_caller
        if self.invite_user_ids is not None:
            result['inviteUserIds'] = self.invite_user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('confTitle') is not None:
            self.conf_title = m.get('confTitle')
        if m.get('inviteCaller') is not None:
            self.invite_caller = m.get('inviteCaller')
        if m.get('inviteUserIds') is not None:
            self.invite_user_ids = m.get('inviteUserIds')
        return self


class CreateVideoConferenceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateVideoConferenceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateVideoConferenceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateVideoConferenceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        conference_id: str = None,
        conference_password: str = None,
        external_link_url: str = None,
        host_password: str = None,
        phone_numbers: List[str] = None,
        room_code: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.conference_id = conference_id
        self.conference_password = conference_password
        self.external_link_url = external_link_url
        self.host_password = host_password
        self.phone_numbers = phone_numbers
        self.room_code = room_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.conference_password is not None:
            result['conferencePassword'] = self.conference_password
        if self.external_link_url is not None:
            result['externalLinkUrl'] = self.external_link_url
        if self.host_password is not None:
            result['hostPassword'] = self.host_password
        if self.phone_numbers is not None:
            result['phoneNumbers'] = self.phone_numbers
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('conferencePassword') is not None:
            self.conference_password = m.get('conferencePassword')
        if m.get('externalLinkUrl') is not None:
            self.external_link_url = m.get('externalLinkUrl')
        if m.get('hostPassword') is not None:
            self.host_password = m.get('hostPassword')
        if m.get('phoneNumbers') is not None:
            self.phone_numbers = m.get('phoneNumbers')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        return self


class ObjectResultExCreateVideoConferenceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateVideoConferenceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateVideoConferenceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateVideoConferenceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateVideoConferenceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateVideoConferenceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateVideoConferenceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateVideoConferenceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateVideoConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMeetingRoomRequest(TeaModel):
    def __init__(
        self,
        room_id: str = None,
    ):
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class DeleteMeetingRoomRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteMeetingRoomRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteMeetingRoomRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExDeleteMeetingRoomResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteMeetingRoomResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteMeetingRoomResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteMeetingRoomResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteMeetingRoomResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteMeetingRoomResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteMeetingRoomResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMeetingRoomGroupRequest(TeaModel):
    def __init__(
        self,
        group_id: str = None,
    ):
        self.group_id = group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        return self


class DeleteMeetingRoomGroupRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteMeetingRoomGroupRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteMeetingRoomGroupRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExDeleteMeetingRoomGroupResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteMeetingRoomGroupResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteMeetingRoomGroupResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteMeetingRoomGroupResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteMeetingRoomGroupResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteMeetingRoomGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteMeetingRoomGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InviteUsersRequestInviteeList(TeaModel):
    def __init__(
        self,
        nick: str = None,
        user_id: str = None,
    ):
        self.nick = nick
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.nick is not None:
            result['nick'] = self.nick
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('nick') is not None:
            self.nick = m.get('nick')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class InviteUsersRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        invitee_list: List[InviteUsersRequestInviteeList] = None,
    ):
        self.conference_id = conference_id
        self.invitee_list = invitee_list

    def validate(self):
        if self.invitee_list:
            for k in self.invitee_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        result['inviteeList'] = []
        if self.invitee_list is not None:
            for k in self.invitee_list:
                result['inviteeList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        self.invitee_list = []
        if m.get('inviteeList') is not None:
            for k in m.get('inviteeList'):
                temp_model = InviteUsersRequestInviteeList()
                self.invitee_list.append(temp_model.from_map(k))
        return self


class InviteUsersRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: InviteUsersRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = InviteUsersRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class InviteUsersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExInviteUsersResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: InviteUsersResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = InviteUsersResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExInviteUsersResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExInviteUsersResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExInviteUsersResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class InviteUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExInviteUsersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExInviteUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCloudRecordTextRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        direction: str = None,
        max_results: int = None,
        next_token: int = None,
        start_time: int = None,
    ):
        self.conference_id = conference_id
        self.direction = direction
        self.max_results = max_results
        self.next_token = next_token
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.direction is not None:
            result['direction'] = self.direction
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.start_time is not None:
            result['startTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('direction') is not None:
            self.direction = m.get('direction')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        return self


class QueryCloudRecordTextRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryCloudRecordTextRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryCloudRecordTextRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphListSentenceListWordList(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        start_time: int = None,
        word: str = None,
        word_id: str = None,
    ):
        self.end_time = end_time
        self.start_time = start_time
        self.word = word
        self.word_id = word_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.word is not None:
            result['word'] = self.word
        if self.word_id is not None:
            result['wordId'] = self.word_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('word') is not None:
            self.word = m.get('word')
        if m.get('wordId') is not None:
            self.word_id = m.get('wordId')
        return self


class QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphListSentenceList(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        sentence: str = None,
        start_time: int = None,
        user_id: str = None,
        word_list: List[QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphListSentenceListWordList] = None,
    ):
        self.end_time = end_time
        self.sentence = sentence
        self.start_time = start_time
        self.user_id = user_id
        self.word_list = word_list

    def validate(self):
        if self.word_list:
            for k in self.word_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.sentence is not None:
            result['sentence'] = self.sentence
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.user_id is not None:
            result['userId'] = self.user_id
        result['wordList'] = []
        if self.word_list is not None:
            for k in self.word_list:
                result['wordList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('sentence') is not None:
            self.sentence = m.get('sentence')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        self.word_list = []
        if m.get('wordList') is not None:
            for k in m.get('wordList'):
                temp_model = QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphListSentenceListWordList()
                self.word_list.append(temp_model.from_map(k))
        return self


class QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphList(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        next_ttoken: int = None,
        nick_name: str = None,
        paragraph: str = None,
        record_id: int = None,
        sentence_list: List[QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphListSentenceList] = None,
        start_time: int = None,
        status: int = None,
        user_id: str = None,
    ):
        self.end_time = end_time
        self.next_ttoken = next_ttoken
        self.nick_name = nick_name
        self.paragraph = paragraph
        self.record_id = record_id
        self.sentence_list = sentence_list
        self.start_time = start_time
        self.status = status
        self.user_id = user_id

    def validate(self):
        if self.sentence_list:
            for k in self.sentence_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.next_ttoken is not None:
            result['nextTtoken'] = self.next_ttoken
        if self.nick_name is not None:
            result['nickName'] = self.nick_name
        if self.paragraph is not None:
            result['paragraph'] = self.paragraph
        if self.record_id is not None:
            result['recordId'] = self.record_id
        result['sentenceList'] = []
        if self.sentence_list is not None:
            for k in self.sentence_list:
                result['sentenceList'].append(k.to_map() if k else None)
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.status is not None:
            result['status'] = self.status
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('nextTtoken') is not None:
            self.next_ttoken = m.get('nextTtoken')
        if m.get('nickName') is not None:
            self.nick_name = m.get('nickName')
        if m.get('paragraph') is not None:
            self.paragraph = m.get('paragraph')
        if m.get('recordId') is not None:
            self.record_id = m.get('recordId')
        self.sentence_list = []
        if m.get('sentenceList') is not None:
            for k in m.get('sentenceList'):
                temp_model = QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphListSentenceList()
                self.sentence_list.append(temp_model.from_map(k))
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class QueryCloudRecordTextResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        has_more: bool = None,
        paragraph_list: List[QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphList] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.has_more = has_more
        self.paragraph_list = paragraph_list

    def validate(self):
        if self.paragraph_list:
            for k in self.paragraph_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        result['paragraphList'] = []
        if self.paragraph_list is not None:
            for k in self.paragraph_list:
                result['paragraphList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        self.paragraph_list = []
        if m.get('paragraphList') is not None:
            for k in m.get('paragraphList'):
                temp_model = QueryCloudRecordTextResponseBodyQueryCloudRecordTextResponseBodyParagraphList()
                self.paragraph_list.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryCloudRecordTextResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryCloudRecordTextResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryCloudRecordTextResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryCloudRecordTextResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryCloudRecordTextResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryCloudRecordTextResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryCloudRecordTextResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryCloudRecordTextResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryCloudRecordTextResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCloudRecordVideoRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
    ):
        self.conference_id = conference_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryCloudRecordVideoRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryCloudRecordVideoRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryCloudRecordVideoRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryCloudRecordVideoResponseBodyQueryCloudRecordVideoResponseBodyVideoList(TeaModel):
    def __init__(
        self,
        duration: int = None,
        end_time: int = None,
        file_size: int = None,
        media_id: str = None,
        record_id: str = None,
        record_type: int = None,
        region_id: str = None,
        start_time: int = None,
        user_id: str = None,
    ):
        self.duration = duration
        self.end_time = end_time
        self.file_size = file_size
        self.media_id = media_id
        self.record_id = record_id
        self.record_type = record_type
        self.region_id = region_id
        self.start_time = start_time
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.duration is not None:
            result['duration'] = self.duration
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.file_size is not None:
            result['fileSize'] = self.file_size
        if self.media_id is not None:
            result['mediaId'] = self.media_id
        if self.record_id is not None:
            result['recordId'] = self.record_id
        if self.record_type is not None:
            result['recordType'] = self.record_type
        if self.region_id is not None:
            result['regionId'] = self.region_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('fileSize') is not None:
            self.file_size = m.get('fileSize')
        if m.get('mediaId') is not None:
            self.media_id = m.get('mediaId')
        if m.get('recordId') is not None:
            self.record_id = m.get('recordId')
        if m.get('recordType') is not None:
            self.record_type = m.get('recordType')
        if m.get('regionId') is not None:
            self.region_id = m.get('regionId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class QueryCloudRecordVideoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        video_list: List[QueryCloudRecordVideoResponseBodyQueryCloudRecordVideoResponseBodyVideoList] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.video_list = video_list

    def validate(self):
        if self.video_list:
            for k in self.video_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['videoList'] = []
        if self.video_list is not None:
            for k in self.video_list:
                result['videoList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.video_list = []
        if m.get('videoList') is not None:
            for k in m.get('videoList'):
                temp_model = QueryCloudRecordVideoResponseBodyQueryCloudRecordVideoResponseBodyVideoList()
                self.video_list.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryCloudRecordVideoResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryCloudRecordVideoResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryCloudRecordVideoResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryCloudRecordVideoResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryCloudRecordVideoResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryCloudRecordVideoResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryCloudRecordVideoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryCloudRecordVideoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryCloudRecordVideoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCloudRecordVideoPlayInfoRequest(TeaModel):
    def __init__(
        self,
        media_id: str = None,
        region_id: str = None,
        conference_id: str = None,
    ):
        self.media_id = media_id
        self.region_id = region_id
        self.conference_id = conference_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.media_id is not None:
            result['mediaId'] = self.media_id
        if self.region_id is not None:
            result['regionId'] = self.region_id
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('mediaId') is not None:
            self.media_id = m.get('mediaId')
        if m.get('regionId') is not None:
            self.region_id = m.get('regionId')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryCloudRecordVideoPlayInfoRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryCloudRecordVideoPlayInfoRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryCloudRecordVideoPlayInfoRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryCloudRecordVideoPlayInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        duration: int = None,
        file_size: int = None,
        mp_4file_url: str = None,
        play_url: str = None,
        status: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.duration = duration
        self.file_size = file_size
        self.mp_4file_url = mp_4file_url
        self.play_url = play_url
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.duration is not None:
            result['duration'] = self.duration
        if self.file_size is not None:
            result['fileSize'] = self.file_size
        if self.mp_4file_url is not None:
            result['mp4FileUrl'] = self.mp_4file_url
        if self.play_url is not None:
            result['playUrl'] = self.play_url
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('fileSize') is not None:
            self.file_size = m.get('fileSize')
        if m.get('mp4FileUrl') is not None:
            self.mp_4file_url = m.get('mp4FileUrl')
        if m.get('playUrl') is not None:
            self.play_url = m.get('playUrl')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ObjectResultExQueryCloudRecordVideoPlayInfoResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryCloudRecordVideoPlayInfoResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryCloudRecordVideoPlayInfoResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryCloudRecordVideoPlayInfoResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryCloudRecordVideoPlayInfoResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryCloudRecordVideoPlayInfoResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryCloudRecordVideoPlayInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryCloudRecordVideoPlayInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryCloudRecordVideoPlayInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryConferenceInfoRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
    ):
        self.conference_id = conference_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryConferenceInfoRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryConferenceInfoRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryConferenceInfoRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryConferenceInfoResponseBodyQueryConferenceInfoResponseBodyConfInfo(TeaModel):
    def __init__(
        self,
        active_num: int = None,
        attend_num: int = None,
        conf_duration: int = None,
        conference_id: str = None,
        creator_id: str = None,
        creator_nick: str = None,
        end_time: int = None,
        external_link_url: str = None,
        invited_num: int = None,
        room_code: str = None,
        start_time: int = None,
        status: int = None,
        title: str = None,
    ):
        self.active_num = active_num
        self.attend_num = attend_num
        self.conf_duration = conf_duration
        self.conference_id = conference_id
        self.creator_id = creator_id
        self.creator_nick = creator_nick
        self.end_time = end_time
        self.external_link_url = external_link_url
        self.invited_num = invited_num
        self.room_code = room_code
        self.start_time = start_time
        self.status = status
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_num is not None:
            result['activeNum'] = self.active_num
        if self.attend_num is not None:
            result['attendNum'] = self.attend_num
        if self.conf_duration is not None:
            result['confDuration'] = self.conf_duration
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.creator_nick is not None:
            result['creatorNick'] = self.creator_nick
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.external_link_url is not None:
            result['externalLinkUrl'] = self.external_link_url
        if self.invited_num is not None:
            result['invitedNum'] = self.invited_num
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.status is not None:
            result['status'] = self.status
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('activeNum') is not None:
            self.active_num = m.get('activeNum')
        if m.get('attendNum') is not None:
            self.attend_num = m.get('attendNum')
        if m.get('confDuration') is not None:
            self.conf_duration = m.get('confDuration')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('creatorNick') is not None:
            self.creator_nick = m.get('creatorNick')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('externalLinkUrl') is not None:
            self.external_link_url = m.get('externalLinkUrl')
        if m.get('invitedNum') is not None:
            self.invited_num = m.get('invitedNum')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class QueryConferenceInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        conf_info: QueryConferenceInfoResponseBodyQueryConferenceInfoResponseBodyConfInfo = None,
        dingtalk_request_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.conf_info = conf_info
        self.dingtalk_request_id = dingtalk_request_id

    def validate(self):
        if self.conf_info:
            self.conf_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.conf_info is not None:
            result['confInfo'] = self.conf_info.to_map()
        if self.dingtalk_request_id is not None:
            result['dingtalkRequestId'] = self.dingtalk_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('confInfo') is not None:
            temp_model = QueryConferenceInfoResponseBodyQueryConferenceInfoResponseBodyConfInfo()
            self.conf_info = temp_model.from_map(m['confInfo'])
        if m.get('dingtalkRequestId') is not None:
            self.dingtalk_request_id = m.get('dingtalkRequestId')
        return self


class ObjectResultExQueryConferenceInfoResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryConferenceInfoResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryConferenceInfoResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryConferenceInfoResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryConferenceInfoResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryConferenceInfoResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryConferenceInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryConferenceInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryConferenceInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryConferenceMembersRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        max_results: int = None,
        next_token: str = None,
    ):
        self.conference_id = conference_id
        self.max_results = max_results
        self.next_token = next_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class QueryConferenceMembersRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryConferenceMembersRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryConferenceMembersRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryConferenceMembersResponseBodyQueryConferenceMembersResponseBodyMemberModels(TeaModel):
    def __init__(
        self,
        attend_status: int = None,
        co_host: bool = None,
        conference_id: str = None,
        duration: int = None,
        host: bool = None,
        join_time: int = None,
        leave_time: int = None,
        outer_org_member: bool = None,
        pstn_join: bool = None,
        user_id: str = None,
        user_nick: str = None,
    ):
        self.attend_status = attend_status
        self.co_host = co_host
        self.conference_id = conference_id
        self.duration = duration
        self.host = host
        self.join_time = join_time
        self.leave_time = leave_time
        self.outer_org_member = outer_org_member
        self.pstn_join = pstn_join
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attend_status is not None:
            result['attendStatus'] = self.attend_status
        if self.co_host is not None:
            result['coHost'] = self.co_host
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.duration is not None:
            result['duration'] = self.duration
        if self.host is not None:
            result['host'] = self.host
        if self.join_time is not None:
            result['joinTime'] = self.join_time
        if self.leave_time is not None:
            result['leaveTime'] = self.leave_time
        if self.outer_org_member is not None:
            result['outerOrgMember'] = self.outer_org_member
        if self.pstn_join is not None:
            result['pstnJoin'] = self.pstn_join
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.user_nick is not None:
            result['userNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attendStatus') is not None:
            self.attend_status = m.get('attendStatus')
        if m.get('coHost') is not None:
            self.co_host = m.get('coHost')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('host') is not None:
            self.host = m.get('host')
        if m.get('joinTime') is not None:
            self.join_time = m.get('joinTime')
        if m.get('leaveTime') is not None:
            self.leave_time = m.get('leaveTime')
        if m.get('outerOrgMember') is not None:
            self.outer_org_member = m.get('outerOrgMember')
        if m.get('pstnJoin') is not None:
            self.pstn_join = m.get('pstnJoin')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('userNick') is not None:
            self.user_nick = m.get('userNick')
        return self


class QueryConferenceMembersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        member_models: List[QueryConferenceMembersResponseBodyQueryConferenceMembersResponseBodyMemberModels] = None,
        next_token: str = None,
        total_count: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.member_models = member_models
        self.next_token = next_token
        self.total_count = total_count

    def validate(self):
        if self.member_models:
            for k in self.member_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['memberModels'] = []
        if self.member_models is not None:
            for k in self.member_models:
                result['memberModels'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.member_models = []
        if m.get('memberModels') is not None:
            for k in m.get('memberModels'):
                temp_model = QueryConferenceMembersResponseBodyQueryConferenceMembersResponseBodyMemberModels()
                self.member_models.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        return self


class ObjectResultExQueryConferenceMembersResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryConferenceMembersResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryConferenceMembersResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryConferenceMembersResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryConferenceMembersResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryConferenceMembersResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryConferenceMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryConferenceMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryConferenceMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomRequest(TeaModel):
    def __init__(
        self,
        room_id: str = None,
    ):
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class QueryMeetingRoomRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryMeetingRoomRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryMeetingRoomRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers(TeaModel):
    def __init__(
        self,
        member_id: str = None,
        member_name: str = None,
        member_type: str = None,
    ):
        self.member_id = member_id
        self.member_name = member_name
        self.member_type = member_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['memberId'] = self.member_id
        if self.member_name is not None:
            result['memberName'] = self.member_name
        if self.member_type is not None:
            result['memberType'] = self.member_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('memberId') is not None:
            self.member_id = m.get('memberId')
        if m.get('memberName') is not None:
            self.member_name = m.get('memberName')
        if m.get('memberType') is not None:
            self.member_type = m.get('memberType')
        return self


class QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultReservationAuthority(TeaModel):
    def __init__(
        self,
        authorized_members: List[QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers] = None,
    ):
        self.authorized_members = authorized_members

    def validate(self):
        if self.authorized_members:
            for k in self.authorized_members:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['authorizedMembers'] = []
        if self.authorized_members is not None:
            for k in self.authorized_members:
                result['authorizedMembers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.authorized_members = []
        if m.get('authorizedMembers') is not None:
            for k in m.get('authorizedMembers'):
                temp_model = QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers()
                self.authorized_members.append(temp_model.from_map(k))
        return self


class QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomGroup(TeaModel):
    def __init__(
        self,
        group_id: int = None,
        group_name: str = None,
        parent_id: int = None,
    ):
        self.group_id = group_id
        self.group_name = group_name
        self.parent_id = parent_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        return self


class QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomLabels(TeaModel):
    def __init__(
        self,
        label_id: int = None,
        label_name: str = None,
    ):
        self.label_id = label_id
        self.label_name = label_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_id is not None:
            result['labelId'] = self.label_id
        if self.label_name is not None:
            result['labelName'] = self.label_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('labelId') is not None:
            self.label_id = m.get('labelId')
        if m.get('labelName') is not None:
            self.label_name = m.get('labelName')
        return self


class QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomLocation(TeaModel):
    def __init__(
        self,
        desc: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResult(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        device_union_ids: List[str] = None,
        enable_cycle_reservation: bool = None,
        isv_room_id: str = None,
        reservation_authority: QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultReservationAuthority = None,
        room_capacity: int = None,
        room_group: QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomGroup = None,
        room_id: str = None,
        room_labels: List[QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomLabels] = None,
        room_location: QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomLocation = None,
        room_name: str = None,
        room_picture: str = None,
        room_staff_id: str = None,
        room_status: int = None,
    ):
        self.corp_id = corp_id
        self.device_union_ids = device_union_ids
        self.enable_cycle_reservation = enable_cycle_reservation
        self.isv_room_id = isv_room_id
        self.reservation_authority = reservation_authority
        self.room_capacity = room_capacity
        self.room_group = room_group
        self.room_id = room_id
        self.room_labels = room_labels
        self.room_location = room_location
        self.room_name = room_name
        self.room_picture = room_picture
        self.room_staff_id = room_staff_id
        self.room_status = room_status

    def validate(self):
        if self.reservation_authority:
            self.reservation_authority.validate()
        if self.room_group:
            self.room_group.validate()
        if self.room_labels:
            for k in self.room_labels:
                if k:
                    k.validate()
        if self.room_location:
            self.room_location.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corpId'] = self.corp_id
        if self.device_union_ids is not None:
            result['deviceUnionIds'] = self.device_union_ids
        if self.enable_cycle_reservation is not None:
            result['enableCycleReservation'] = self.enable_cycle_reservation
        if self.isv_room_id is not None:
            result['isvRoomId'] = self.isv_room_id
        if self.reservation_authority is not None:
            result['reservationAuthority'] = self.reservation_authority.to_map()
        if self.room_capacity is not None:
            result['roomCapacity'] = self.room_capacity
        if self.room_group is not None:
            result['roomGroup'] = self.room_group.to_map()
        if self.room_id is not None:
            result['roomId'] = self.room_id
        result['roomLabels'] = []
        if self.room_labels is not None:
            for k in self.room_labels:
                result['roomLabels'].append(k.to_map() if k else None)
        if self.room_location is not None:
            result['roomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['roomName'] = self.room_name
        if self.room_picture is not None:
            result['roomPicture'] = self.room_picture
        if self.room_staff_id is not None:
            result['roomStaffId'] = self.room_staff_id
        if self.room_status is not None:
            result['roomStatus'] = self.room_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corpId') is not None:
            self.corp_id = m.get('corpId')
        if m.get('deviceUnionIds') is not None:
            self.device_union_ids = m.get('deviceUnionIds')
        if m.get('enableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('enableCycleReservation')
        if m.get('isvRoomId') is not None:
            self.isv_room_id = m.get('isvRoomId')
        if m.get('reservationAuthority') is not None:
            temp_model = QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultReservationAuthority()
            self.reservation_authority = temp_model.from_map(m['reservationAuthority'])
        if m.get('roomCapacity') is not None:
            self.room_capacity = m.get('roomCapacity')
        if m.get('roomGroup') is not None:
            temp_model = QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomGroup()
            self.room_group = temp_model.from_map(m['roomGroup'])
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        self.room_labels = []
        if m.get('roomLabels') is not None:
            for k in m.get('roomLabels'):
                temp_model = QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomLabels()
                self.room_labels.append(temp_model.from_map(k))
        if m.get('roomLocation') is not None:
            temp_model = QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResultRoomLocation()
            self.room_location = temp_model.from_map(m['roomLocation'])
        if m.get('roomName') is not None:
            self.room_name = m.get('roomName')
        if m.get('roomPicture') is not None:
            self.room_picture = m.get('roomPicture')
        if m.get('roomStaffId') is not None:
            self.room_staff_id = m.get('roomStaffId')
        if m.get('roomStatus') is not None:
            self.room_status = m.get('roomStatus')
        return self


class QueryMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            temp_model = QueryMeetingRoomResponseBodyQueryMeetingRoomResponseBodyResult()
            self.result = temp_model.from_map(m['result'])
        return self


class ObjectResultExQueryMeetingRoomResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryMeetingRoomResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryMeetingRoomResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryMeetingRoomResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryMeetingRoomResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryMeetingRoomResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryMeetingRoomResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomGroupRequest(TeaModel):
    def __init__(
        self,
        group_id: str = None,
    ):
        self.group_id = group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        return self


class QueryMeetingRoomGroupRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryMeetingRoomGroupRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryMeetingRoomGroupRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        group_id: int = None,
        group_name: str = None,
        parent_id: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.group_id = group_id
        self.group_name = group_name
        self.parent_id = parent_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        return self


class ObjectResultExQueryMeetingRoomGroupResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryMeetingRoomGroupResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryMeetingRoomGroupResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryMeetingRoomGroupResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryMeetingRoomGroupResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryMeetingRoomGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryMeetingRoomGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomGroupListRequest(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class QueryMeetingRoomGroupListRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryMeetingRoomGroupListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryMeetingRoomGroupListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryMeetingRoomGroupListResponseBodyQueryMeetingRoomGroupListResponseBodyResult(TeaModel):
    def __init__(
        self,
        group_id: int = None,
        group_name: str = None,
        parent_id: int = None,
    ):
        self.group_id = group_id
        self.group_name = group_name
        self.parent_id = parent_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        return self


class QueryMeetingRoomGroupListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: List[QueryMeetingRoomGroupListResponseBodyQueryMeetingRoomGroupListResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = QueryMeetingRoomGroupListResponseBodyQueryMeetingRoomGroupListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryMeetingRoomGroupListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryMeetingRoomGroupListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryMeetingRoomGroupListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryMeetingRoomGroupListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryMeetingRoomGroupListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryMeetingRoomGroupListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryMeetingRoomGroupListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryMeetingRoomGroupListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryMeetingRoomGroupListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomListRequest(TeaModel):
    def __init__(
        self,
        max_results: int = None,
        next_token: int = None,
    ):
        self.max_results = max_results
        self.next_token = next_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class QueryMeetingRoomListRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryMeetingRoomListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryMeetingRoomListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomGroup(TeaModel):
    def __init__(
        self,
        group_id: int = None,
        group_name: str = None,
        parent_id: int = None,
    ):
        self.group_id = group_id
        self.group_name = group_name
        self.parent_id = parent_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        return self


class QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomLabels(TeaModel):
    def __init__(
        self,
        label_id: int = None,
        label_name: str = None,
    ):
        self.label_id = label_id
        self.label_name = label_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_id is not None:
            result['labelId'] = self.label_id
        if self.label_name is not None:
            result['labelName'] = self.label_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('labelId') is not None:
            self.label_id = m.get('labelId')
        if m.get('labelName') is not None:
            self.label_name = m.get('labelName')
        return self


class QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomLocation(TeaModel):
    def __init__(
        self,
        desc: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResult(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        isv_room_id: str = None,
        room_capacity: int = None,
        room_group: QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomGroup = None,
        room_id: str = None,
        room_labels: List[QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomLabels] = None,
        room_location: QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomLocation = None,
        room_name: str = None,
        room_picture: str = None,
        room_staff_id: str = None,
        room_status: int = None,
    ):
        self.corp_id = corp_id
        self.isv_room_id = isv_room_id
        self.room_capacity = room_capacity
        self.room_group = room_group
        self.room_id = room_id
        self.room_labels = room_labels
        self.room_location = room_location
        self.room_name = room_name
        self.room_picture = room_picture
        self.room_staff_id = room_staff_id
        self.room_status = room_status

    def validate(self):
        if self.room_group:
            self.room_group.validate()
        if self.room_labels:
            for k in self.room_labels:
                if k:
                    k.validate()
        if self.room_location:
            self.room_location.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corpId'] = self.corp_id
        if self.isv_room_id is not None:
            result['isvRoomId'] = self.isv_room_id
        if self.room_capacity is not None:
            result['roomCapacity'] = self.room_capacity
        if self.room_group is not None:
            result['roomGroup'] = self.room_group.to_map()
        if self.room_id is not None:
            result['roomId'] = self.room_id
        result['roomLabels'] = []
        if self.room_labels is not None:
            for k in self.room_labels:
                result['roomLabels'].append(k.to_map() if k else None)
        if self.room_location is not None:
            result['roomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['roomName'] = self.room_name
        if self.room_picture is not None:
            result['roomPicture'] = self.room_picture
        if self.room_staff_id is not None:
            result['roomStaffId'] = self.room_staff_id
        if self.room_status is not None:
            result['roomStatus'] = self.room_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corpId') is not None:
            self.corp_id = m.get('corpId')
        if m.get('isvRoomId') is not None:
            self.isv_room_id = m.get('isvRoomId')
        if m.get('roomCapacity') is not None:
            self.room_capacity = m.get('roomCapacity')
        if m.get('roomGroup') is not None:
            temp_model = QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomGroup()
            self.room_group = temp_model.from_map(m['roomGroup'])
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        self.room_labels = []
        if m.get('roomLabels') is not None:
            for k in m.get('roomLabels'):
                temp_model = QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomLabels()
                self.room_labels.append(temp_model.from_map(k))
        if m.get('roomLocation') is not None:
            temp_model = QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResultRoomLocation()
            self.room_location = temp_model.from_map(m['roomLocation'])
        if m.get('roomName') is not None:
            self.room_name = m.get('roomName')
        if m.get('roomPicture') is not None:
            self.room_picture = m.get('roomPicture')
        if m.get('roomStaffId') is not None:
            self.room_staff_id = m.get('roomStaffId')
        if m.get('roomStatus') is not None:
            self.room_status = m.get('roomStatus')
        return self


class QueryMeetingRoomListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        has_more: bool = None,
        next_token: int = None,
        result: List[QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.has_more = has_more
        self.next_token = next_token
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = QueryMeetingRoomListResponseBodyQueryMeetingRoomListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryMeetingRoomListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryMeetingRoomListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryMeetingRoomListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryMeetingRoomListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryMeetingRoomListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryMeetingRoomListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryMeetingRoomListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryMeetingRoomListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryMeetingRoomListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryScheduleConferenceRequest(TeaModel):
    def __init__(
        self,
        schedule_conference_id: str = None,
    ):
        self.schedule_conference_id = schedule_conference_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        return self


class QueryScheduleConferenceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryScheduleConferenceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryScheduleConferenceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        end_time: int = None,
        phones: List[str] = None,
        room_code: str = None,
        schedule_conference_id: str = None,
        start_time: int = None,
        title: str = None,
        url: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.end_time = end_time
        self.phones = phones
        self.room_code = room_code
        self.schedule_conference_id = schedule_conference_id
        self.start_time = start_time
        self.title = title
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.phones is not None:
            result['phones'] = self.phones
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.title is not None:
            result['title'] = self.title
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('phones') is not None:
            self.phones = m.get('phones')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ObjectResultExQueryScheduleConferenceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryScheduleConferenceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryScheduleConferenceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryScheduleConferenceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryScheduleConferenceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryScheduleConferenceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryScheduleConferenceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartCloudRecordRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        mode: str = None,
        small_window_position: str = None,
    ):
        self.conference_id = conference_id
        self.mode = mode
        self.small_window_position = small_window_position

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.mode is not None:
            result['mode'] = self.mode
        if self.small_window_position is not None:
            result['smallWindowPosition'] = self.small_window_position
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('mode') is not None:
            self.mode = m.get('mode')
        if m.get('smallWindowPosition') is not None:
            self.small_window_position = m.get('smallWindowPosition')
        return self


class StartCloudRecordRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: StartCloudRecordRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = StartCloudRecordRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class StartCloudRecordResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        code: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.code = code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.code is not None:
            result['code'] = self.code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('code') is not None:
            self.code = m.get('code')
        return self


class ObjectResultExStartCloudRecordResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: StartCloudRecordResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = StartCloudRecordResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExStartCloudRecordResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExStartCloudRecordResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExStartCloudRecordResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class StartCloudRecordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExStartCloudRecordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExStartCloudRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopCloudRecordRequest(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
    ):
        self.conference_id = conference_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class StopCloudRecordRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: StopCloudRecordRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = StopCloudRecordRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class StopCloudRecordResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        code: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.code = code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.code is not None:
            result['code'] = self.code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('code') is not None:
            self.code = m.get('code')
        return self


class ObjectResultExStopCloudRecordResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: StopCloudRecordResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = StopCloudRecordResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExStopCloudRecordResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExStopCloudRecordResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExStopCloudRecordResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class StopCloudRecordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExStopCloudRecordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExStopCloudRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers(TeaModel):
    def __init__(
        self,
        member_id: str = None,
        member_name: str = None,
        member_type: str = None,
    ):
        self.member_id = member_id
        self.member_name = member_name
        self.member_type = member_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['memberId'] = self.member_id
        if self.member_name is not None:
            result['memberName'] = self.member_name
        if self.member_type is not None:
            result['memberType'] = self.member_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('memberId') is not None:
            self.member_id = m.get('memberId')
        if m.get('memberName') is not None:
            self.member_name = m.get('memberName')
        if m.get('memberType') is not None:
            self.member_type = m.get('memberType')
        return self


class UpdateMeetingRoomRequestReservationAuthority(TeaModel):
    def __init__(
        self,
        authorized_members: List[UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers] = None,
    ):
        self.authorized_members = authorized_members

    def validate(self):
        if self.authorized_members:
            for k in self.authorized_members:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['authorizedMembers'] = []
        if self.authorized_members is not None:
            for k in self.authorized_members:
                result['authorizedMembers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.authorized_members = []
        if m.get('authorizedMembers') is not None:
            for k in m.get('authorizedMembers'):
                temp_model = UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers()
                self.authorized_members.append(temp_model.from_map(k))
        return self


class UpdateMeetingRoomRequestRoomLocation(TeaModel):
    def __init__(
        self,
        desc: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class UpdateMeetingRoomRequest(TeaModel):
    def __init__(
        self,
        enable_cycle_reservation: bool = None,
        group_id: int = None,
        isv_room_id: str = None,
        reservation_authority: UpdateMeetingRoomRequestReservationAuthority = None,
        room_capacity: int = None,
        room_id: str = None,
        room_label_ids: List[int] = None,
        room_location: UpdateMeetingRoomRequestRoomLocation = None,
        room_name: str = None,
        room_picture: str = None,
        room_status: int = None,
    ):
        self.enable_cycle_reservation = enable_cycle_reservation
        self.group_id = group_id
        self.isv_room_id = isv_room_id
        self.reservation_authority = reservation_authority
        self.room_capacity = room_capacity
        self.room_id = room_id
        self.room_label_ids = room_label_ids
        self.room_location = room_location
        self.room_name = room_name
        self.room_picture = room_picture
        self.room_status = room_status

    def validate(self):
        if self.reservation_authority:
            self.reservation_authority.validate()
        if self.room_location:
            self.room_location.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_cycle_reservation is not None:
            result['enableCycleReservation'] = self.enable_cycle_reservation
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.isv_room_id is not None:
            result['isvRoomId'] = self.isv_room_id
        if self.reservation_authority is not None:
            result['reservationAuthority'] = self.reservation_authority.to_map()
        if self.room_capacity is not None:
            result['roomCapacity'] = self.room_capacity
        if self.room_id is not None:
            result['roomId'] = self.room_id
        if self.room_label_ids is not None:
            result['roomLabelIds'] = self.room_label_ids
        if self.room_location is not None:
            result['roomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['roomName'] = self.room_name
        if self.room_picture is not None:
            result['roomPicture'] = self.room_picture
        if self.room_status is not None:
            result['roomStatus'] = self.room_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('enableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('enableCycleReservation')
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('isvRoomId') is not None:
            self.isv_room_id = m.get('isvRoomId')
        if m.get('reservationAuthority') is not None:
            temp_model = UpdateMeetingRoomRequestReservationAuthority()
            self.reservation_authority = temp_model.from_map(m['reservationAuthority'])
        if m.get('roomCapacity') is not None:
            self.room_capacity = m.get('roomCapacity')
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        if m.get('roomLabelIds') is not None:
            self.room_label_ids = m.get('roomLabelIds')
        if m.get('roomLocation') is not None:
            temp_model = UpdateMeetingRoomRequestRoomLocation()
            self.room_location = temp_model.from_map(m['roomLocation'])
        if m.get('roomName') is not None:
            self.room_name = m.get('roomName')
        if m.get('roomPicture') is not None:
            self.room_picture = m.get('roomPicture')
        if m.get('roomStatus') is not None:
            self.room_status = m.get('roomStatus')
        return self


class UpdateMeetingRoomRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateMeetingRoomRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateMeetingRoomRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExUpdateMeetingRoomResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateMeetingRoomResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateMeetingRoomResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateMeetingRoomResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateMeetingRoomResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateMeetingRoomResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateMeetingRoomResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateMeetingRoomResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMeetingRoomGroupRequest(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        group_name: str = None,
    ):
        self.group_id = group_id
        self.group_name = group_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.group_name is not None:
            result['groupName'] = self.group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        return self


class UpdateMeetingRoomGroupRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateMeetingRoomGroupRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateMeetingRoomGroupRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExUpdateMeetingRoomGroupResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateMeetingRoomGroupResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateMeetingRoomGroupResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateMeetingRoomGroupResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateMeetingRoomGroupResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateMeetingRoomGroupResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateMeetingRoomGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateMeetingRoomGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting(TeaModel):
    def __init__(
        self,
        enable_chat: int = None,
        join_before_host: int = None,
        lock_media_status_mic_mute: int = None,
        lock_nick: int = None,
        waiting_room: int = None,
    ):
        self.enable_chat = enable_chat
        self.join_before_host = join_before_host
        self.lock_media_status_mic_mute = lock_media_status_mic_mute
        self.lock_nick = lock_nick
        self.waiting_room = waiting_room

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_chat is not None:
            result['enableChat'] = self.enable_chat
        if self.join_before_host is not None:
            result['joinBeforeHost'] = self.join_before_host
        if self.lock_media_status_mic_mute is not None:
            result['lockMediaStatusMicMute'] = self.lock_media_status_mic_mute
        if self.lock_nick is not None:
            result['lockNick'] = self.lock_nick
        if self.waiting_room is not None:
            result['waitingRoom'] = self.waiting_room
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('enableChat') is not None:
            self.enable_chat = m.get('enableChat')
        if m.get('joinBeforeHost') is not None:
            self.join_before_host = m.get('joinBeforeHost')
        if m.get('lockMediaStatusMicMute') is not None:
            self.lock_media_status_mic_mute = m.get('lockMediaStatusMicMute')
        if m.get('lockNick') is not None:
            self.lock_nick = m.get('lockNick')
        if m.get('waitingRoom') is not None:
            self.waiting_room = m.get('waitingRoom')
        return self


class UpdateScheduleConfSettingsRequestScheduleConfSettingModel(TeaModel):
    def __init__(
        self,
        cohost_user_ids: List[str] = None,
        conf_allowed_corp_id: str = None,
        host_user_id: str = None,
        lock_room: int = None,
        mozi_conf_virtual_extra_setting: UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting = None,
        mute_on_join: int = None,
        screen_share_forbidden: int = None,
    ):
        self.cohost_user_ids = cohost_user_ids
        self.conf_allowed_corp_id = conf_allowed_corp_id
        self.host_user_id = host_user_id
        self.lock_room = lock_room
        self.mozi_conf_virtual_extra_setting = mozi_conf_virtual_extra_setting
        self.mute_on_join = mute_on_join
        self.screen_share_forbidden = screen_share_forbidden

    def validate(self):
        if self.mozi_conf_virtual_extra_setting:
            self.mozi_conf_virtual_extra_setting.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cohost_user_ids is not None:
            result['cohostUserIds'] = self.cohost_user_ids
        if self.conf_allowed_corp_id is not None:
            result['confAllowedCorpId'] = self.conf_allowed_corp_id
        if self.host_user_id is not None:
            result['hostUserId'] = self.host_user_id
        if self.lock_room is not None:
            result['lockRoom'] = self.lock_room
        if self.mozi_conf_virtual_extra_setting is not None:
            result['moziConfVirtualExtraSetting'] = self.mozi_conf_virtual_extra_setting.to_map()
        if self.mute_on_join is not None:
            result['muteOnJoin'] = self.mute_on_join
        if self.screen_share_forbidden is not None:
            result['screenShareForbidden'] = self.screen_share_forbidden
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cohostUserIds') is not None:
            self.cohost_user_ids = m.get('cohostUserIds')
        if m.get('confAllowedCorpId') is not None:
            self.conf_allowed_corp_id = m.get('confAllowedCorpId')
        if m.get('hostUserId') is not None:
            self.host_user_id = m.get('hostUserId')
        if m.get('lockRoom') is not None:
            self.lock_room = m.get('lockRoom')
        if m.get('moziConfVirtualExtraSetting') is not None:
            temp_model = UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting()
            self.mozi_conf_virtual_extra_setting = temp_model.from_map(m['moziConfVirtualExtraSetting'])
        if m.get('muteOnJoin') is not None:
            self.mute_on_join = m.get('muteOnJoin')
        if m.get('screenShareForbidden') is not None:
            self.screen_share_forbidden = m.get('screenShareForbidden')
        return self


class UpdateScheduleConfSettingsRequest(TeaModel):
    def __init__(
        self,
        schedule_conf_setting_model: UpdateScheduleConfSettingsRequestScheduleConfSettingModel = None,
        schedule_conference_id: str = None,
    ):
        self.schedule_conf_setting_model = schedule_conf_setting_model
        self.schedule_conference_id = schedule_conference_id

    def validate(self):
        if self.schedule_conf_setting_model:
            self.schedule_conf_setting_model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.schedule_conf_setting_model is not None:
            result['scheduleConfSettingModel'] = self.schedule_conf_setting_model.to_map()
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scheduleConfSettingModel') is not None:
            temp_model = UpdateScheduleConfSettingsRequestScheduleConfSettingModel()
            self.schedule_conf_setting_model = temp_model.from_map(m['scheduleConfSettingModel'])
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        return self


class UpdateScheduleConfSettingsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateScheduleConfSettingsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateScheduleConfSettingsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateScheduleConfSettingsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExUpdateScheduleConfSettingsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateScheduleConfSettingsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateScheduleConfSettingsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateScheduleConfSettingsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateScheduleConfSettingsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateScheduleConfSettingsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateScheduleConfSettingsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateScheduleConfSettingsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateScheduleConfSettingsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateScheduleConferenceRequest(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        schedule_conference_id: str = None,
        start_time: int = None,
        title: str = None,
    ):
        self.end_time = end_time
        self.schedule_conference_id = schedule_conference_id
        self.start_time = start_time
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class UpdateScheduleConferenceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateScheduleConferenceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateScheduleConferenceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExUpdateScheduleConferenceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateScheduleConferenceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateScheduleConferenceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateScheduleConferenceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateScheduleConferenceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateScheduleConferenceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateScheduleConferenceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateScheduleConferenceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConversationSpaceRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
    ):
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class GetConversaionSpaceRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetConversationSpaceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetConversationSpaceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetConversationSpaceResponseBodyGetSpaceResponseBodySpace(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        create_time: str = None,
        modified_time: str = None,
        space_id: str = None,
    ):
        self.corp_id = corp_id
        self.create_time = create_time
        self.modified_time = modified_time
        self.space_id = space_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corpId'] = self.corp_id
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corpId') is not None:
            self.corp_id = m.get('corpId')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        return self


class GetConversationSpaceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        space: GetConversationSpaceResponseBodyGetSpaceResponseBodySpace = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.space = space

    def validate(self):
        if self.space:
            self.space.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.space is not None:
            result['space'] = self.space.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('space') is not None:
            temp_model = GetConversationSpaceResponseBodyGetSpaceResponseBodySpace()
            self.space = temp_model.from_map(m['space'])
        return self


class ObjectResultExGetConversationSpaceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetConversationSpaceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetConversationSpaceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetConversationSpaceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetConversationSpaceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetConversationSpaceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetConversaionSpaceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetConversationSpaceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetConversationSpaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendRequest(TeaModel):
    def __init__(
        self,
        dentry_id: str = None,
        open_conversation_id: str = None,
        space_id: str = None,
    ):
        self.dentry_id = dentry_id
        self.open_conversation_id = open_conversation_id
        self.space_id = space_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['dentryId'] = self.dentry_id
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dentryId') is not None:
            self.dentry_id = m.get('dentryId')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        return self


class SendRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SendRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SendRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SendResponseBodySendResponseBodyFile(TeaModel):
    def __init__(
        self,
        conversation_id: str = None,
        create_time: str = None,
        extension: str = None,
        id: str = None,
        modified_time: str = None,
        name: str = None,
        parent_id: str = None,
        path: str = None,
        size: int = None,
        space_id: str = None,
        status: str = None,
        type: str = None,
        version: int = None,
    ):
        self.conversation_id = conversation_id
        self.create_time = create_time
        self.extension = extension
        self.id = id
        self.modified_time = modified_time
        self.name = name
        self.parent_id = parent_id
        self.path = path
        self.size = size
        self.space_id = space_id
        self.status = status
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_id is not None:
            result['conversationId'] = self.conversation_id
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.extension is not None:
            result['extension'] = self.extension
        if self.id is not None:
            result['id'] = self.id
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        if self.path is not None:
            result['path'] = self.path
        if self.size is not None:
            result['size'] = self.size
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conversationId') is not None:
            self.conversation_id = m.get('conversationId')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class SendResponseBody(TeaModel):
    def __init__(
        self,
        file: SendResponseBodySendResponseBodyFile = None,
    ):
        self.file = file

    def validate(self):
        if self.file:
            self.file.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file is not None:
            result['file'] = self.file.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('file') is not None:
            temp_model = SendResponseBodySendResponseBodyFile()
            self.file = temp_model.from_map(m['file'])
        return self


class ObjectResultExSendResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SendResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SendResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSendResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSendResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSendResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SendResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSendResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendByAppRequest(TeaModel):
    def __init__(
        self,
        dentry_id: str = None,
        space_id: str = None,
    ):
        self.dentry_id = dentry_id
        self.space_id = space_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['dentryId'] = self.dentry_id
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dentryId') is not None:
            self.dentry_id = m.get('dentryId')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        return self


class SendByAppRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SendByAppRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SendByAppRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SendByAppResponseBodySendByAppResponseBodyFile(TeaModel):
    def __init__(
        self,
        conversation_id: str = None,
        create_time: str = None,
        extension: str = None,
        id: str = None,
        modified_time: str = None,
        name: str = None,
        parent_id: str = None,
        path: str = None,
        size: int = None,
        space_id: str = None,
        status: str = None,
        type: str = None,
        version: int = None,
    ):
        self.conversation_id = conversation_id
        self.create_time = create_time
        self.extension = extension
        self.id = id
        self.modified_time = modified_time
        self.name = name
        self.parent_id = parent_id
        self.path = path
        self.size = size
        self.space_id = space_id
        self.status = status
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_id is not None:
            result['conversationId'] = self.conversation_id
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.extension is not None:
            result['extension'] = self.extension
        if self.id is not None:
            result['id'] = self.id
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        if self.path is not None:
            result['path'] = self.path
        if self.size is not None:
            result['size'] = self.size
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conversationId') is not None:
            self.conversation_id = m.get('conversationId')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class SendByAppResponseBody(TeaModel):
    def __init__(
        self,
        file: SendByAppResponseBodySendByAppResponseBodyFile = None,
    ):
        self.file = file

    def validate(self):
        if self.file:
            self.file.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file is not None:
            result['file'] = self.file.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('file') is not None:
            temp_model = SendByAppResponseBodySendByAppResponseBodyFile()
            self.file = temp_model.from_map(m['file'])
        return self


class ObjectResultExSendByAppResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SendByAppResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SendByAppResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSendByAppResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSendByAppResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSendByAppResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SendByAppResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSendByAppResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSendByAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendLinkRequest(TeaModel):
    def __init__(
        self,
        dentry_id: str = None,
        open_conversation_id: str = None,
        space_id: str = None,
    ):
        self.dentry_id = dentry_id
        self.open_conversation_id = open_conversation_id
        self.space_id = space_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['dentryId'] = self.dentry_id
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dentryId') is not None:
            self.dentry_id = m.get('dentryId')
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        return self


class SendLinkRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SendLinkRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SendLinkRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SendLinkResponseBodySendResponseBodyFile(TeaModel):
    def __init__(
        self,
        conversation_id: str = None,
        create_time: str = None,
        extension: str = None,
        id: str = None,
        modified_time: str = None,
        name: str = None,
        parent_id: str = None,
        path: str = None,
        size: int = None,
        space_id: str = None,
        status: str = None,
        type: str = None,
        version: int = None,
    ):
        self.conversation_id = conversation_id
        self.create_time = create_time
        self.extension = extension
        self.id = id
        self.modified_time = modified_time
        self.name = name
        self.parent_id = parent_id
        self.path = path
        self.size = size
        self.space_id = space_id
        self.status = status
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_id is not None:
            result['conversationId'] = self.conversation_id
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.extension is not None:
            result['extension'] = self.extension
        if self.id is not None:
            result['id'] = self.id
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        if self.path is not None:
            result['path'] = self.path
        if self.size is not None:
            result['size'] = self.size
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conversationId') is not None:
            self.conversation_id = m.get('conversationId')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class SendLinkResponseBody(TeaModel):
    def __init__(
        self,
        file: SendLinkResponseBodySendResponseBodyFile = None,
    ):
        self.file = file

    def validate(self):
        if self.file:
            self.file.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file is not None:
            result['file'] = self.file.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('file') is not None:
            temp_model = SendLinkResponseBodySendResponseBodyFile()
            self.file = temp_model.from_map(m['file'])
        return self


class ObjectResultExSendLinkResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SendLinkResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SendLinkResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSendLinkResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSendLinkResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSendLinkResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SendLinkResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSendLinkResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSendLinkResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddDriveSpaceRequest(TeaModel):
    def __init__(
        self,
        name: str = None,
    ):
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class AddDriveSpaceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: AddDriveSpaceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = AddDriveSpaceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class AddDriveSpaceResponseBody(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        modify_time: str = None,
        permission_mode: str = None,
        quota: int = None,
        space_id: str = None,
        space_name: str = None,
        space_type: str = None,
        used_quota: int = None,
    ):
        self.create_time = create_time
        self.modify_time = modify_time
        self.permission_mode = permission_mode
        self.quota = quota
        self.space_id = space_id
        self.space_name = space_name
        self.space_type = space_type
        self.used_quota = used_quota

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.modify_time is not None:
            result['modifyTime'] = self.modify_time
        if self.permission_mode is not None:
            result['permissionMode'] = self.permission_mode
        if self.quota is not None:
            result['quota'] = self.quota
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.space_name is not None:
            result['spaceName'] = self.space_name
        if self.space_type is not None:
            result['spaceType'] = self.space_type
        if self.used_quota is not None:
            result['usedQuota'] = self.used_quota
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('modifyTime') is not None:
            self.modify_time = m.get('modifyTime')
        if m.get('permissionMode') is not None:
            self.permission_mode = m.get('permissionMode')
        if m.get('quota') is not None:
            self.quota = m.get('quota')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('spaceName') is not None:
            self.space_name = m.get('spaceName')
        if m.get('spaceType') is not None:
            self.space_type = m.get('spaceType')
        if m.get('usedQuota') is not None:
            self.used_quota = m.get('usedQuota')
        return self


class ObjectResultExAddDriveSpaceResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: AddDriveSpaceResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = AddDriveSpaceResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExAddDriveSpaceResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExAddDriveSpaceResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExAddDriveSpaceResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class AddDriveSpaceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExAddDriveSpaceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExAddDriveSpaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDriveSpaceRequest(TeaModel):
    def __init__(
        self,
        space_id: str = None,
    ):
        self.space_id = space_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        return self


class DeleteDriveSpaceRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteDriveSpaceRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteDriveSpaceRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ObjectContent(TeaModel):
    def __init__(
        self,
        data: Dict[str, Any] = None,
    ):
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ResultEx(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteDriveSpaceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultEx = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultEx()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDriveSpacesRequest(TeaModel):
    def __init__(
        self,
        max_results: int = None,
        next_token: str = None,
        space_type: str = None,
    ):
        self.max_results = max_results
        self.next_token = next_token
        self.space_type = space_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.space_type is not None:
            result['spaceType'] = self.space_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('spaceType') is not None:
            self.space_type = m.get('spaceType')
        return self


class ListDriveSpacesRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ListDriveSpacesRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ListDriveSpacesRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ListDriveSpacesResponseBodyListSpacesResponseBodySpaces(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        modify_time: str = None,
        permission_mode: str = None,
        quota: int = None,
        space_id: str = None,
        space_name: str = None,
        space_type: str = None,
        used_quota: int = None,
    ):
        self.create_time = create_time
        self.modify_time = modify_time
        self.permission_mode = permission_mode
        self.quota = quota
        self.space_id = space_id
        self.space_name = space_name
        self.space_type = space_type
        self.used_quota = used_quota

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.modify_time is not None:
            result['modifyTime'] = self.modify_time
        if self.permission_mode is not None:
            result['permissionMode'] = self.permission_mode
        if self.quota is not None:
            result['quota'] = self.quota
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.space_name is not None:
            result['spaceName'] = self.space_name
        if self.space_type is not None:
            result['spaceType'] = self.space_type
        if self.used_quota is not None:
            result['usedQuota'] = self.used_quota
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('modifyTime') is not None:
            self.modify_time = m.get('modifyTime')
        if m.get('permissionMode') is not None:
            self.permission_mode = m.get('permissionMode')
        if m.get('quota') is not None:
            self.quota = m.get('quota')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('spaceName') is not None:
            self.space_name = m.get('spaceName')
        if m.get('spaceType') is not None:
            self.space_type = m.get('spaceType')
        if m.get('usedQuota') is not None:
            self.used_quota = m.get('usedQuota')
        return self


class ListDriveSpacesResponseBody(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        spaces: List[ListDriveSpacesResponseBodyListSpacesResponseBodySpaces] = None,
    ):
        self.next_token = next_token
        self.spaces = spaces

    def validate(self):
        if self.spaces:
            for k in self.spaces:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['spaces'] = []
        if self.spaces is not None:
            for k in self.spaces:
                result['spaces'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.spaces = []
        if m.get('spaces') is not None:
            for k in m.get('spaces'):
                temp_model = ListDriveSpacesResponseBodyListSpacesResponseBodySpaces()
                self.spaces.append(temp_model.from_map(k))
        return self


class ObjectResultExListDriveSpacesResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ListDriveSpacesResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ListDriveSpacesResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExListDriveSpacesResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExListDriveSpacesResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExListDriveSpacesResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ListDriveSpacesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExListDriveSpacesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExListDriveSpacesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAttendeeRequestAttendeesToAdd(TeaModel):
    def __init__(
        self,
        id: str = None,
        is_optional: bool = None,
    ):
        self.id = id
        self.is_optional = is_optional

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        return self


class AddAttendeeRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        attendees_to_add: List[AddAttendeeRequestAttendeesToAdd] = None,
        chat_notification: bool = None,
        push_notification: bool = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.attendees_to_add = attendees_to_add
        self.chat_notification = chat_notification
        self.push_notification = push_notification

    def validate(self):
        if self.attendees_to_add:
            for k in self.attendees_to_add:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        result['attendeesToAdd'] = []
        if self.attendees_to_add is not None:
            for k in self.attendees_to_add:
                result['attendeesToAdd'].append(k.to_map() if k else None)
        if self.chat_notification is not None:
            result['chatNotification'] = self.chat_notification
        if self.push_notification is not None:
            result['pushNotification'] = self.push_notification
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        self.attendees_to_add = []
        if m.get('attendeesToAdd') is not None:
            for k in m.get('attendeesToAdd'):
                temp_model = AddAttendeeRequestAttendeesToAdd()
                self.attendees_to_add.append(temp_model.from_map(k))
        if m.get('chatNotification') is not None:
            self.chat_notification = m.get('chatNotification')
        if m.get('pushNotification') is not None:
            self.push_notification = m.get('pushNotification')
        return self


class AddAttendeeRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: AddAttendeeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = AddAttendeeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class AddAttendeeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultEx = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultEx()
            self.body = temp_model.from_map(m['body'])
        return self


class AddMeetingRoomsRequestMeetingRoomsToAdd(TeaModel):
    def __init__(
        self,
        room_id: str = None,
    ):
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class AddMeetingRoomsRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        meeting_rooms_to_add: List[AddMeetingRoomsRequestMeetingRoomsToAdd] = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.meeting_rooms_to_add = meeting_rooms_to_add

    def validate(self):
        if self.meeting_rooms_to_add:
            for k in self.meeting_rooms_to_add:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        result['meetingRoomsToAdd'] = []
        if self.meeting_rooms_to_add is not None:
            for k in self.meeting_rooms_to_add:
                result['meetingRoomsToAdd'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        self.meeting_rooms_to_add = []
        if m.get('meetingRoomsToAdd') is not None:
            for k in m.get('meetingRoomsToAdd'):
                temp_model = AddMeetingRoomsRequestMeetingRoomsToAdd()
                self.meeting_rooms_to_add.append(temp_model.from_map(k))
        return self


class AddMeetingRoomsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: AddMeetingRoomsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = AddMeetingRoomsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class AddMeetingRoomsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExAddMeetingRoomsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: AddMeetingRoomsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = AddMeetingRoomsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExAddMeetingRoomsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExAddMeetingRoomsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExAddMeetingRoomsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class AddMeetingRoomsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExAddMeetingRoomsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExAddMeetingRoomsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEventRequestAttendees(TeaModel):
    def __init__(
        self,
        id: str = None,
        is_optional: bool = None,
    ):
        self.id = id
        self.is_optional = is_optional

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        return self


class CreateEventRequestEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class CreateEventRequestLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class CreateEventRequestOnlineMeetingInfo(TeaModel):
    def __init__(
        self,
        type: str = None,
    ):
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventRequestRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventRequestRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventRequestRecurrence(TeaModel):
    def __init__(
        self,
        pattern: CreateEventRequestRecurrencePattern = None,
        range: CreateEventRequestRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = CreateEventRequestRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = CreateEventRequestRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class CreateEventRequestReminders(TeaModel):
    def __init__(
        self,
        method: str = None,
        minutes: int = None,
    ):
        self.method = method
        self.minutes = minutes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class CreateEventRequestStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class CreateEventRequestUiConfigs(TeaModel):
    def __init__(
        self,
        ui_name: str = None,
        ui_status: str = None,
    ):
        self.ui_name = ui_name
        self.ui_status = ui_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ui_name is not None:
            result['uiName'] = self.ui_name
        if self.ui_status is not None:
            result['uiStatus'] = self.ui_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('uiName') is not None:
            self.ui_name = m.get('uiName')
        if m.get('uiStatus') is not None:
            self.ui_status = m.get('uiStatus')
        return self


class CreateEventRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        attendees: List[CreateEventRequestAttendees] = None,
        description: str = None,
        end: CreateEventRequestEnd = None,
        extra: Dict[str, Any] = None,
        is_all_day: bool = None,
        location: CreateEventRequestLocation = None,
        online_meeting_info: CreateEventRequestOnlineMeetingInfo = None,
        recurrence: CreateEventRequestRecurrence = None,
        reminders: List[CreateEventRequestReminders] = None,
        start: CreateEventRequestStart = None,
        summary: str = None,
        ui_configs: List[CreateEventRequestUiConfigs] = None,
    ):
        self.calendar_id = calendar_id
        self.attendees = attendees
        self.description = description
        self.end = end
        self.extra = extra
        self.is_all_day = is_all_day
        self.location = location
        self.online_meeting_info = online_meeting_info
        self.recurrence = recurrence
        self.reminders = reminders
        self.start = start
        self.summary = summary
        self.ui_configs = ui_configs

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()
        if self.ui_configs:
            for k in self.ui_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.summary is not None:
            result['summary'] = self.summary
        result['uiConfigs'] = []
        if self.ui_configs is not None:
            for k in self.ui_configs:
                result['uiConfigs'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = CreateEventRequestAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = CreateEventRequestEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = CreateEventRequestLocation()
            self.location = temp_model.from_map(m['location'])
        if m.get('onlineMeetingInfo') is not None:
            temp_model = CreateEventRequestOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('recurrence') is not None:
            temp_model = CreateEventRequestRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = CreateEventRequestReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('start') is not None:
            temp_model = CreateEventRequestStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        self.ui_configs = []
        if m.get('uiConfigs') is not None:
            for k in m.get('uiConfigs'):
                temp_model = CreateEventRequestUiConfigs()
                self.ui_configs.append(temp_model.from_map(k))
        return self


class CreateEventRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateEventRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateEventRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateEventResponseBodyCreateEventResponseBodyAttendees(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        is_optional: bool = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.is_optional = is_optional
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class CreateEventResponseBodyCreateEventResponseBodyEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class CreateEventResponseBodyCreateEventResponseBodyLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class CreateEventResponseBodyCreateEventResponseBodyOnlineMeetingInfo(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        extra_info: Dict[str, Any] = None,
        type: str = None,
        url: str = None,
    ):
        self.conference_id = conference_id
        self.extra_info = extra_info
        self.type = type
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['extraInfo'] = self.extra_info
        if self.type is not None:
            result['type'] = self.type
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('extraInfo') is not None:
            self.extra_info = m.get('extraInfo')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class CreateEventResponseBodyCreateEventResponseBodyOrganizer(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class CreateEventResponseBodyCreateEventResponseBodyRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventResponseBodyCreateEventResponseBodyRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventResponseBodyCreateEventResponseBodyRecurrence(TeaModel):
    def __init__(
        self,
        pattern: CreateEventResponseBodyCreateEventResponseBodyRecurrencePattern = None,
        range: CreateEventResponseBodyCreateEventResponseBodyRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class CreateEventResponseBodyCreateEventResponseBodyReminders(TeaModel):
    def __init__(
        self,
        method: str = None,
        minutes: str = None,
    ):
        self.method = method
        self.minutes = minutes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class CreateEventResponseBodyCreateEventResponseBodyStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class CreateEventResponseBodyCreateEventResponseBodyUiConfigs(TeaModel):
    def __init__(
        self,
        ui_name: str = None,
        ui_status: str = None,
    ):
        self.ui_name = ui_name
        self.ui_status = ui_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ui_name is not None:
            result['uiName'] = self.ui_name
        if self.ui_status is not None:
            result['uiStatus'] = self.ui_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('uiName') is not None:
            self.ui_name = m.get('uiName')
        if m.get('uiStatus') is not None:
            self.ui_status = m.get('uiStatus')
        return self


class CreateEventResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        attendees: List[CreateEventResponseBodyCreateEventResponseBodyAttendees] = None,
        create_time: str = None,
        description: str = None,
        end: CreateEventResponseBodyCreateEventResponseBodyEnd = None,
        id: str = None,
        is_all_day: bool = None,
        location: CreateEventResponseBodyCreateEventResponseBodyLocation = None,
        online_meeting_info: CreateEventResponseBodyCreateEventResponseBodyOnlineMeetingInfo = None,
        organizer: CreateEventResponseBodyCreateEventResponseBodyOrganizer = None,
        recurrence: CreateEventResponseBodyCreateEventResponseBodyRecurrence = None,
        reminders: List[CreateEventResponseBodyCreateEventResponseBodyReminders] = None,
        start: CreateEventResponseBodyCreateEventResponseBodyStart = None,
        summary: str = None,
        ui_configs: List[CreateEventResponseBodyCreateEventResponseBodyUiConfigs] = None,
        update_time: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.attendees = attendees
        self.create_time = create_time
        self.description = description
        self.end = end
        self.id = id
        self.is_all_day = is_all_day
        self.location = location
        self.online_meeting_info = online_meeting_info
        self.organizer = organizer
        self.recurrence = recurrence
        self.reminders = reminders
        self.start = start
        self.summary = summary
        self.ui_configs = ui_configs
        self.update_time = update_time

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()
        if self.ui_configs:
            for k in self.ui_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.summary is not None:
            result['summary'] = self.summary
        result['uiConfigs'] = []
        if self.ui_configs is not None:
            for k in self.ui_configs:
                result['uiConfigs'].append(k.to_map() if k else None)
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = CreateEventResponseBodyCreateEventResponseBodyAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyLocation()
            self.location = temp_model.from_map(m['location'])
        if m.get('onlineMeetingInfo') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('organizer') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('recurrence') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = CreateEventResponseBodyCreateEventResponseBodyReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('start') is not None:
            temp_model = CreateEventResponseBodyCreateEventResponseBodyStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        self.ui_configs = []
        if m.get('uiConfigs') is not None:
            for k in m.get('uiConfigs'):
                temp_model = CreateEventResponseBodyCreateEventResponseBodyUiConfigs()
                self.ui_configs.append(temp_model.from_map(k))
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class ObjectResultExCreateEventResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateEventResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateEventResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateEventResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateEventResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateEventResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateEventResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateEventResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSubscribedCalendarRequestSubscribeScope(TeaModel):
    def __init__(
        self,
        corp_ids: List[str] = None,
        open_conversation_ids: List[str] = None,
        user_ids: List[str] = None,
    ):
        self.corp_ids = corp_ids
        self.open_conversation_ids = open_conversation_ids
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_ids is not None:
            result['corpIds'] = self.corp_ids
        if self.open_conversation_ids is not None:
            result['openConversationIds'] = self.open_conversation_ids
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corpIds') is not None:
            self.corp_ids = m.get('corpIds')
        if m.get('openConversationIds') is not None:
            self.open_conversation_ids = m.get('openConversationIds')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class CreateSubscribedCalendarRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        managers: List[str] = None,
        name: str = None,
        subscribe_scope: CreateSubscribedCalendarRequestSubscribeScope = None,
    ):
        self.description = description
        self.managers = managers
        self.name = name
        self.subscribe_scope = subscribe_scope

    def validate(self):
        if self.subscribe_scope:
            self.subscribe_scope.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.managers is not None:
            result['managers'] = self.managers
        if self.name is not None:
            result['name'] = self.name
        if self.subscribe_scope is not None:
            result['subscribeScope'] = self.subscribe_scope.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('managers') is not None:
            self.managers = m.get('managers')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('subscribeScope') is not None:
            temp_model = CreateSubscribedCalendarRequestSubscribeScope()
            self.subscribe_scope = temp_model.from_map(m['subscribeScope'])
        return self


class CreateSubscribedCalendarRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateSubscribedCalendarRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateSubscribedCalendarRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateSubscribedCalendarResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        calendar_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.calendar_id = calendar_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        return self


class ObjectResultExCreateSubscribedCalendarResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateSubscribedCalendarResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateSubscribedCalendarResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateSubscribedCalendarResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateSubscribedCalendarResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateSubscribedCalendarResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateSubscribedCalendarResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateSubscribedCalendarResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateSubscribedCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEventRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        push_notification: bool = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.push_notification = push_notification

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.push_notification is not None:
            result['pushNotification'] = self.push_notification
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('pushNotification') is not None:
            self.push_notification = m.get('pushNotification')
        return self


class DeleteEventRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteEventRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteEventRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteEventResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultEx = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultEx()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSubscribedCalendarRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
    ):
        self.calendar_id = calendar_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        return self


class DeleteSubscribedCalendarRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteSubscribedCalendarRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteSubscribedCalendarRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteSubscribedCalendarResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExDeleteSubscribedCalendarResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteSubscribedCalendarResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteSubscribedCalendarResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteSubscribedCalendarResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteSubscribedCalendarResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteSubscribedCalendarResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteSubscribedCalendarResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteSubscribedCalendarResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteSubscribedCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        max_attendees: int = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.max_attendees = max_attendees

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.max_attendees is not None:
            result['maxAttendees'] = self.max_attendees
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('maxAttendees') is not None:
            self.max_attendees = m.get('maxAttendees')
        return self


class GetEventRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetEventRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetEventRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetEventResponseBodyGetEventResponseBodyAttendees(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        is_optional: bool = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.is_optional = is_optional
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class GetEventResponseBodyGetEventResponseBodyCategories(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class GetEventResponseBodyGetEventResponseBodyEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class GetEventResponseBodyGetEventResponseBodyExtendedPropertiesSharedProperties(TeaModel):
    def __init__(
        self,
        belong_corp_id: str = None,
        source_open_cid: str = None,
    ):
        self.belong_corp_id = belong_corp_id
        self.source_open_cid = source_open_cid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.belong_corp_id is not None:
            result['belongCorpId'] = self.belong_corp_id
        if self.source_open_cid is not None:
            result['sourceOpenCid'] = self.source_open_cid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('belongCorpId') is not None:
            self.belong_corp_id = m.get('belongCorpId')
        if m.get('sourceOpenCid') is not None:
            self.source_open_cid = m.get('sourceOpenCid')
        return self


class GetEventResponseBodyGetEventResponseBodyExtendedProperties(TeaModel):
    def __init__(
        self,
        shared_properties: GetEventResponseBodyGetEventResponseBodyExtendedPropertiesSharedProperties = None,
    ):
        self.shared_properties = shared_properties

    def validate(self):
        if self.shared_properties:
            self.shared_properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.shared_properties is not None:
            result['sharedProperties'] = self.shared_properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sharedProperties') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyExtendedPropertiesSharedProperties()
            self.shared_properties = temp_model.from_map(m['sharedProperties'])
        return self


class GetEventResponseBodyGetEventResponseBodyLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        meeting_rooms: List[str] = None,
    ):
        self.display_name = display_name
        self.meeting_rooms = meeting_rooms

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['meetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('meetingRooms') is not None:
            self.meeting_rooms = m.get('meetingRooms')
        return self


class GetEventResponseBodyGetEventResponseBodyMeetingRooms(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        response_status: str = None,
        room_id: str = None,
    ):
        self.display_name = display_name
        self.response_status = response_status
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class GetEventResponseBodyGetEventResponseBodyOnlineMeetingInfo(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        extra_info: Dict[str, Any] = None,
        type: str = None,
        url: str = None,
    ):
        self.conference_id = conference_id
        self.extra_info = extra_info
        self.type = type
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['extraInfo'] = self.extra_info
        if self.type is not None:
            result['type'] = self.type
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('extraInfo') is not None:
            self.extra_info = m.get('extraInfo')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class GetEventResponseBodyGetEventResponseBodyOrganizer(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class GetEventResponseBodyGetEventResponseBodyOriginStart(TeaModel):
    def __init__(
        self,
        date_time: str = None,
    ):
        self.date_time = date_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        return self


class GetEventResponseBodyGetEventResponseBodyRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class GetEventResponseBodyGetEventResponseBodyRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class GetEventResponseBodyGetEventResponseBodyRecurrence(TeaModel):
    def __init__(
        self,
        pattern: GetEventResponseBodyGetEventResponseBodyRecurrencePattern = None,
        range: GetEventResponseBodyGetEventResponseBodyRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class GetEventResponseBodyGetEventResponseBodyReminders(TeaModel):
    def __init__(
        self,
        method: str = None,
        minutes: str = None,
    ):
        self.method = method
        self.minutes = minutes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class GetEventResponseBodyGetEventResponseBodyStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class GetEventResponseBodyGetEventResponseBodyRichTextDescription(TeaModel):
    def __init__(
        self,
        text: str = None,
    ):
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class GetEventResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        attendees: List[GetEventResponseBodyGetEventResponseBodyAttendees] = None,
        categories: List[GetEventResponseBodyGetEventResponseBodyCategories] = None,
        create_time: str = None,
        description: str = None,
        end: GetEventResponseBodyGetEventResponseBodyEnd = None,
        extended_properties: GetEventResponseBodyGetEventResponseBodyExtendedProperties = None,
        id: str = None,
        is_all_day: bool = None,
        location: GetEventResponseBodyGetEventResponseBodyLocation = None,
        meeting_rooms: List[GetEventResponseBodyGetEventResponseBodyMeetingRooms] = None,
        online_meeting_info: GetEventResponseBodyGetEventResponseBodyOnlineMeetingInfo = None,
        organizer: GetEventResponseBodyGetEventResponseBodyOrganizer = None,
        origin_start: GetEventResponseBodyGetEventResponseBodyOriginStart = None,
        recurrence: GetEventResponseBodyGetEventResponseBodyRecurrence = None,
        reminders: List[GetEventResponseBodyGetEventResponseBodyReminders] = None,
        series_master_id: str = None,
        start: GetEventResponseBodyGetEventResponseBodyStart = None,
        status: str = None,
        summary: str = None,
        update_time: str = None,
        rich_text_description: GetEventResponseBodyGetEventResponseBodyRichTextDescription = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.attendees = attendees
        self.categories = categories
        self.create_time = create_time
        self.description = description
        self.end = end
        self.extended_properties = extended_properties
        self.id = id
        self.is_all_day = is_all_day
        self.location = location
        self.meeting_rooms = meeting_rooms
        self.online_meeting_info = online_meeting_info
        self.organizer = organizer
        self.origin_start = origin_start
        self.recurrence = recurrence
        self.reminders = reminders
        self.series_master_id = series_master_id
        self.start = start
        self.status = status
        self.summary = summary
        self.update_time = update_time
        self.rich_text_description = rich_text_description

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.extended_properties:
            self.extended_properties.validate()
        if self.location:
            self.location.validate()
        if self.meeting_rooms:
            for k in self.meeting_rooms:
                if k:
                    k.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.origin_start:
            self.origin_start.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()
        if self.rich_text_description:
            self.rich_text_description.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        result['categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['categories'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.extended_properties is not None:
            result['extendedProperties'] = self.extended_properties.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        result['meetingRooms'] = []
        if self.meeting_rooms is not None:
            for k in self.meeting_rooms:
                result['meetingRooms'].append(k.to_map() if k else None)
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.origin_start is not None:
            result['originStart'] = self.origin_start.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.series_master_id is not None:
            result['seriesMasterId'] = self.series_master_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.summary is not None:
            result['summary'] = self.summary
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        if self.rich_text_description is not None:
            result['richTextDescription'] = self.rich_text_description.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = GetEventResponseBodyGetEventResponseBodyAttendees()
                self.attendees.append(temp_model.from_map(k))
        self.categories = []
        if m.get('categories') is not None:
            for k in m.get('categories'):
                temp_model = GetEventResponseBodyGetEventResponseBodyCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('extendedProperties') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyExtendedProperties()
            self.extended_properties = temp_model.from_map(m['extendedProperties'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyLocation()
            self.location = temp_model.from_map(m['location'])
        self.meeting_rooms = []
        if m.get('meetingRooms') is not None:
            for k in m.get('meetingRooms'):
                temp_model = GetEventResponseBodyGetEventResponseBodyMeetingRooms()
                self.meeting_rooms.append(temp_model.from_map(k))
        if m.get('onlineMeetingInfo') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('organizer') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('originStart') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyOriginStart()
            self.origin_start = temp_model.from_map(m['originStart'])
        if m.get('recurrence') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = GetEventResponseBodyGetEventResponseBodyReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('seriesMasterId') is not None:
            self.series_master_id = m.get('seriesMasterId')
        if m.get('start') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        if m.get('richTextDescription') is not None:
            temp_model = GetEventResponseBodyGetEventResponseBodyRichTextDescription()
            self.rich_text_description = temp_model.from_map(m['richTextDescription'])
        return self


class ObjectResultExGetEventResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetEventResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetEventResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetEventResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetEventResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetEventResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetEventResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetEventResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMeetingRoomsScheduleRequest(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        room_ids: List[str] = None,
        start_time: str = None,
    ):
        self.end_time = end_time
        self.room_ids = room_ids
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.room_ids is not None:
            result['roomIds'] = self.room_ids
        if self.start_time is not None:
            result['startTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('roomIds') is not None:
            self.room_ids = m.get('roomIds')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        return self


class GetMeetingRoomsScheduleRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetMeetingRoomsScheduleRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetMeetingRoomsScheduleRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd(TeaModel):
    def __init__(
        self,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart(TeaModel):
    def __init__(
        self,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems(TeaModel):
    def __init__(
        self,
        end: GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd = None,
        event_id: str = None,
        organizer: GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer = None,
        start: GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart = None,
        status: str = None,
    ):
        self.end = end
        self.event_id = event_id
        self.organizer = organizer
        self.start = start
        self.status = status

    def validate(self):
        if self.end:
            self.end.validate()
        if self.organizer:
            self.organizer.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('end') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('organizer') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('start') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformation(TeaModel):
    def __init__(
        self,
        error: str = None,
        room_id: str = None,
        schedule_items: List[GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems] = None,
    ):
        self.error = error
        self.room_id = room_id
        self.schedule_items = schedule_items

    def validate(self):
        if self.schedule_items:
            for k in self.schedule_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error is not None:
            result['error'] = self.error
        if self.room_id is not None:
            result['roomId'] = self.room_id
        result['scheduleItems'] = []
        if self.schedule_items is not None:
            for k in self.schedule_items:
                result['scheduleItems'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('error') is not None:
            self.error = m.get('error')
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        self.schedule_items = []
        if m.get('scheduleItems') is not None:
            for k in m.get('scheduleItems'):
                temp_model = GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems()
                self.schedule_items.append(temp_model.from_map(k))
        return self


class GetMeetingRoomsScheduleResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        schedule_information: List[GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformation] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.schedule_information = schedule_information

    def validate(self):
        if self.schedule_information:
            for k in self.schedule_information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['scheduleInformation'] = []
        if self.schedule_information is not None:
            for k in self.schedule_information:
                result['scheduleInformation'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.schedule_information = []
        if m.get('scheduleInformation') is not None:
            for k in m.get('scheduleInformation'):
                temp_model = GetMeetingRoomsScheduleResponseBodyGetMeetingRoomsScheduleResponseBodyScheduleInformation()
                self.schedule_information.append(temp_model.from_map(k))
        return self


class ObjectResultExGetMeetingRoomsScheduleResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetMeetingRoomsScheduleResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetMeetingRoomsScheduleResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetMeetingRoomsScheduleResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetMeetingRoomsScheduleResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetMeetingRoomsScheduleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetMeetingRoomsScheduleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetMeetingRoomsScheduleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSubscribedCalendarRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
    ):
        self.calendar_id = calendar_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        return self


class GetSubscribedCalendarRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetSubscribedCalendarRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetSubscribedCalendarRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetSubscribedCalendarResponseBodyGetSubscribedCalendarResponseBodySubscribeScope(TeaModel):
    def __init__(
        self,
        corp_ids: List[str] = None,
        open_conversation_ids: List[str] = None,
        user_ids: List[str] = None,
    ):
        self.corp_ids = corp_ids
        self.open_conversation_ids = open_conversation_ids
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_ids is not None:
            result['corpIds'] = self.corp_ids
        if self.open_conversation_ids is not None:
            result['openConversationIds'] = self.open_conversation_ids
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corpIds') is not None:
            self.corp_ids = m.get('corpIds')
        if m.get('openConversationIds') is not None:
            self.open_conversation_ids = m.get('openConversationIds')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class GetSubscribedCalendarResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        author: str = None,
        calendar_id: str = None,
        description: str = None,
        managers: List[str] = None,
        name: str = None,
        subscribe_scope: GetSubscribedCalendarResponseBodyGetSubscribedCalendarResponseBodySubscribeScope = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.author = author
        self.calendar_id = calendar_id
        self.description = description
        self.managers = managers
        self.name = name
        self.subscribe_scope = subscribe_scope

    def validate(self):
        if self.subscribe_scope:
            self.subscribe_scope.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.author is not None:
            result['author'] = self.author
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.description is not None:
            result['description'] = self.description
        if self.managers is not None:
            result['managers'] = self.managers
        if self.name is not None:
            result['name'] = self.name
        if self.subscribe_scope is not None:
            result['subscribeScope'] = self.subscribe_scope.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('author') is not None:
            self.author = m.get('author')
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('managers') is not None:
            self.managers = m.get('managers')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('subscribeScope') is not None:
            temp_model = GetSubscribedCalendarResponseBodyGetSubscribedCalendarResponseBodySubscribeScope()
            self.subscribe_scope = temp_model.from_map(m['subscribeScope'])
        return self


class ObjectResultExGetSubscribedCalendarResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetSubscribedCalendarResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetSubscribedCalendarResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetSubscribedCalendarResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetSubscribedCalendarResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetSubscribedCalendarResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetSubscribedCalendarResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetSubscribedCalendarResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetSubscribedCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCalendarsRequest(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class ListCalendarsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ListCalendarsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ListCalendarsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ListCalendarsResponseBodyListCalendarsResponseBodyResponseCalendars(TeaModel):
    def __init__(
        self,
        description: str = None,
        e_tag: str = None,
        id: str = None,
        privilege: str = None,
        summary: str = None,
        time_zone: str = None,
        type: str = None,
    ):
        self.description = description
        self.e_tag = e_tag
        self.id = id
        self.privilege = privilege
        self.summary = summary
        self.time_zone = time_zone
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.e_tag is not None:
            result['eTag'] = self.e_tag
        if self.id is not None:
            result['id'] = self.id
        if self.privilege is not None:
            result['privilege'] = self.privilege
        if self.summary is not None:
            result['summary'] = self.summary
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eTag') is not None:
            self.e_tag = m.get('eTag')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('privilege') is not None:
            self.privilege = m.get('privilege')
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ListCalendarsResponseBodyListCalendarsResponseBodyResponse(TeaModel):
    def __init__(
        self,
        calendars: List[ListCalendarsResponseBodyListCalendarsResponseBodyResponseCalendars] = None,
    ):
        self.calendars = calendars

    def validate(self):
        if self.calendars:
            for k in self.calendars:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['calendars'] = []
        if self.calendars is not None:
            for k in self.calendars:
                result['calendars'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.calendars = []
        if m.get('calendars') is not None:
            for k in m.get('calendars'):
                temp_model = ListCalendarsResponseBodyListCalendarsResponseBodyResponseCalendars()
                self.calendars.append(temp_model.from_map(k))
        return self


class ListCalendarsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        response: ListCalendarsResponseBodyListCalendarsResponseBodyResponse = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.response = response

    def validate(self):
        if self.response:
            self.response.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.response is not None:
            result['response'] = self.response.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('response') is not None:
            temp_model = ListCalendarsResponseBodyListCalendarsResponseBodyResponse()
            self.response = temp_model.from_map(m['response'])
        return self


class ObjectResultExListCalendarsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ListCalendarsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ListCalendarsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExListCalendarsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExListCalendarsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExListCalendarsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ListCalendarsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExListCalendarsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExListCalendarsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventsRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        time_min: str = None,
        time_max: str = None,
        show_deleted: bool = None,
        max_results: int = None,
        max_attendees: int = None,
        next_token: str = None,
        sync_token: str = None,
        series_master_id: str = None,
    ):
        self.calendar_id = calendar_id
        self.time_min = time_min
        self.time_max = time_max
        self.show_deleted = show_deleted
        self.max_results = max_results
        self.max_attendees = max_attendees
        self.next_token = next_token
        self.sync_token = sync_token
        self.series_master_id = series_master_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.time_min is not None:
            result['timeMin'] = self.time_min
        if self.time_max is not None:
            result['timeMax'] = self.time_max
        if self.show_deleted is not None:
            result['showDeleted'] = self.show_deleted
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.max_attendees is not None:
            result['maxAttendees'] = self.max_attendees
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.sync_token is not None:
            result['syncToken'] = self.sync_token
        if self.series_master_id is not None:
            result['seriesMasterId'] = self.series_master_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('timeMin') is not None:
            self.time_min = m.get('timeMin')
        if m.get('timeMax') is not None:
            self.time_max = m.get('timeMax')
        if m.get('showDeleted') is not None:
            self.show_deleted = m.get('showDeleted')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('maxAttendees') is not None:
            self.max_attendees = m.get('maxAttendees')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('syncToken') is not None:
            self.sync_token = m.get('syncToken')
        if m.get('seriesMasterId') is not None:
            self.series_master_id = m.get('seriesMasterId')
        return self


class ListEventsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ListEventsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ListEventsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsAttendees(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        is_optional: bool = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.is_optional = is_optional
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsCategories(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsExtendedPropertiesSharedProperties(TeaModel):
    def __init__(
        self,
        belong_corp_id: str = None,
        source_open_cid: str = None,
    ):
        self.belong_corp_id = belong_corp_id
        self.source_open_cid = source_open_cid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.belong_corp_id is not None:
            result['belongCorpId'] = self.belong_corp_id
        if self.source_open_cid is not None:
            result['sourceOpenCid'] = self.source_open_cid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('belongCorpId') is not None:
            self.belong_corp_id = m.get('belongCorpId')
        if m.get('sourceOpenCid') is not None:
            self.source_open_cid = m.get('sourceOpenCid')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsExtendedProperties(TeaModel):
    def __init__(
        self,
        shared_properties: ListEventsResponseBodyListEventsResponseBodyEventsExtendedPropertiesSharedProperties = None,
    ):
        self.shared_properties = shared_properties

    def validate(self):
        if self.shared_properties:
            self.shared_properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.shared_properties is not None:
            result['sharedProperties'] = self.shared_properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sharedProperties') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsExtendedPropertiesSharedProperties()
            self.shared_properties = temp_model.from_map(m['sharedProperties'])
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        meeting_rooms: List[str] = None,
    ):
        self.display_name = display_name
        self.meeting_rooms = meeting_rooms

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['meetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('meetingRooms') is not None:
            self.meeting_rooms = m.get('meetingRooms')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsMeetingRooms(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        response_status: str = None,
        room_id: str = None,
    ):
        self.display_name = display_name
        self.response_status = response_status
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsOnlineMeetingInfo(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        extra_info: Dict[str, Any] = None,
        type: str = None,
        url: str = None,
    ):
        self.conference_id = conference_id
        self.extra_info = extra_info
        self.type = type
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['extraInfo'] = self.extra_info
        if self.type is not None:
            result['type'] = self.type
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('extraInfo') is not None:
            self.extra_info = m.get('extraInfo')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsOrganizer(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsOriginStart(TeaModel):
    def __init__(
        self,
        date_time: str = None,
    ):
        self.date_time = date_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsRecurrence(TeaModel):
    def __init__(
        self,
        pattern: ListEventsResponseBodyListEventsResponseBodyEventsRecurrencePattern = None,
        range: ListEventsResponseBodyListEventsResponseBodyEventsRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsReminders(TeaModel):
    def __init__(
        self,
        method: str = None,
        minutes: str = None,
    ):
        self.method = method
        self.minutes = minutes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class ListEventsResponseBodyListEventsResponseBodyEventsRichTextDescription(TeaModel):
    def __init__(
        self,
        text: str = None,
    ):
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class ListEventsResponseBodyListEventsResponseBodyEvents(TeaModel):
    def __init__(
        self,
        attendees: List[ListEventsResponseBodyListEventsResponseBodyEventsAttendees] = None,
        categories: List[ListEventsResponseBodyListEventsResponseBodyEventsCategories] = None,
        create_time: str = None,
        description: str = None,
        end: ListEventsResponseBodyListEventsResponseBodyEventsEnd = None,
        extended_properties: ListEventsResponseBodyListEventsResponseBodyEventsExtendedProperties = None,
        id: str = None,
        is_all_day: bool = None,
        location: ListEventsResponseBodyListEventsResponseBodyEventsLocation = None,
        meeting_rooms: List[ListEventsResponseBodyListEventsResponseBodyEventsMeetingRooms] = None,
        online_meeting_info: ListEventsResponseBodyListEventsResponseBodyEventsOnlineMeetingInfo = None,
        organizer: ListEventsResponseBodyListEventsResponseBodyEventsOrganizer = None,
        origin_start: ListEventsResponseBodyListEventsResponseBodyEventsOriginStart = None,
        recurrence: ListEventsResponseBodyListEventsResponseBodyEventsRecurrence = None,
        reminders: List[ListEventsResponseBodyListEventsResponseBodyEventsReminders] = None,
        series_master_id: str = None,
        start: ListEventsResponseBodyListEventsResponseBodyEventsStart = None,
        status: str = None,
        summary: str = None,
        update_time: str = None,
        rich_text_description: ListEventsResponseBodyListEventsResponseBodyEventsRichTextDescription = None,
    ):
        self.attendees = attendees
        self.categories = categories
        self.create_time = create_time
        self.description = description
        self.end = end
        self.extended_properties = extended_properties
        self.id = id
        self.is_all_day = is_all_day
        self.location = location
        self.meeting_rooms = meeting_rooms
        self.online_meeting_info = online_meeting_info
        self.organizer = organizer
        self.origin_start = origin_start
        self.recurrence = recurrence
        self.reminders = reminders
        self.series_master_id = series_master_id
        self.start = start
        self.status = status
        self.summary = summary
        self.update_time = update_time
        self.rich_text_description = rich_text_description

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.extended_properties:
            self.extended_properties.validate()
        if self.location:
            self.location.validate()
        if self.meeting_rooms:
            for k in self.meeting_rooms:
                if k:
                    k.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.origin_start:
            self.origin_start.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()
        if self.rich_text_description:
            self.rich_text_description.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        result['categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['categories'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.extended_properties is not None:
            result['extendedProperties'] = self.extended_properties.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        result['meetingRooms'] = []
        if self.meeting_rooms is not None:
            for k in self.meeting_rooms:
                result['meetingRooms'].append(k.to_map() if k else None)
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.origin_start is not None:
            result['originStart'] = self.origin_start.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.series_master_id is not None:
            result['seriesMasterId'] = self.series_master_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.summary is not None:
            result['summary'] = self.summary
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        if self.rich_text_description is not None:
            result['richTextDescription'] = self.rich_text_description.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = ListEventsResponseBodyListEventsResponseBodyEventsAttendees()
                self.attendees.append(temp_model.from_map(k))
        self.categories = []
        if m.get('categories') is not None:
            for k in m.get('categories'):
                temp_model = ListEventsResponseBodyListEventsResponseBodyEventsCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('extendedProperties') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsExtendedProperties()
            self.extended_properties = temp_model.from_map(m['extendedProperties'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsLocation()
            self.location = temp_model.from_map(m['location'])
        self.meeting_rooms = []
        if m.get('meetingRooms') is not None:
            for k in m.get('meetingRooms'):
                temp_model = ListEventsResponseBodyListEventsResponseBodyEventsMeetingRooms()
                self.meeting_rooms.append(temp_model.from_map(k))
        if m.get('onlineMeetingInfo') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('organizer') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('originStart') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsOriginStart()
            self.origin_start = temp_model.from_map(m['originStart'])
        if m.get('recurrence') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = ListEventsResponseBodyListEventsResponseBodyEventsReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('seriesMasterId') is not None:
            self.series_master_id = m.get('seriesMasterId')
        if m.get('start') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        if m.get('richTextDescription') is not None:
            temp_model = ListEventsResponseBodyListEventsResponseBodyEventsRichTextDescription()
            self.rich_text_description = temp_model.from_map(m['richTextDescription'])
        return self


class ListEventsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        events: List[ListEventsResponseBodyListEventsResponseBodyEvents] = None,
        next_token: str = None,
        sync_token: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.events = events
        self.next_token = next_token
        self.sync_token = sync_token

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['events'] = []
        if self.events is not None:
            for k in self.events:
                result['events'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.sync_token is not None:
            result['syncToken'] = self.sync_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.events = []
        if m.get('events') is not None:
            for k in m.get('events'):
                temp_model = ListEventsResponseBodyListEventsResponseBodyEvents()
                self.events.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('syncToken') is not None:
            self.sync_token = m.get('syncToken')
        return self


class ObjectResultExListEventsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ListEventsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ListEventsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExListEventsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExListEventsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExListEventsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ListEventsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExListEventsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExListEventsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventsViewRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        max_attendees: int = None,
        max_results: int = None,
        next_token: str = None,
        time_max: str = None,
        time_min: str = None,
    ):
        self.calendar_id = calendar_id
        self.max_attendees = max_attendees
        self.max_results = max_results
        self.next_token = next_token
        self.time_max = time_max
        self.time_min = time_min

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.max_attendees is not None:
            result['maxAttendees'] = self.max_attendees
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.time_max is not None:
            result['timeMax'] = self.time_max
        if self.time_min is not None:
            result['timeMin'] = self.time_min
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('maxAttendees') is not None:
            self.max_attendees = m.get('maxAttendees')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('timeMax') is not None:
            self.time_max = m.get('timeMax')
        if m.get('timeMin') is not None:
            self.time_min = m.get('timeMin')
        return self


class ListEventsViewRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ListEventsViewRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ListEventsViewRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsAttendees(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        is_optional: bool = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.is_optional = is_optional
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsCategories(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties(TeaModel):
    def __init__(
        self,
        belong_corp_id: str = None,
        source_open_cid: str = None,
    ):
        self.belong_corp_id = belong_corp_id
        self.source_open_cid = source_open_cid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.belong_corp_id is not None:
            result['belongCorpId'] = self.belong_corp_id
        if self.source_open_cid is not None:
            result['sourceOpenCid'] = self.source_open_cid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('belongCorpId') is not None:
            self.belong_corp_id = m.get('belongCorpId')
        if m.get('sourceOpenCid') is not None:
            self.source_open_cid = m.get('sourceOpenCid')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsExtendedProperties(TeaModel):
    def __init__(
        self,
        shared_properties: ListEventsViewResponseBodyListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties = None,
    ):
        self.shared_properties = shared_properties

    def validate(self):
        if self.shared_properties:
            self.shared_properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.shared_properties is not None:
            result['sharedProperties'] = self.shared_properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sharedProperties') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties()
            self.shared_properties = temp_model.from_map(m['sharedProperties'])
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        meeting_rooms: List[str] = None,
    ):
        self.display_name = display_name
        self.meeting_rooms = meeting_rooms

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['meetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('meetingRooms') is not None:
            self.meeting_rooms = m.get('meetingRooms')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsMeetingRooms(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        response_status: str = None,
        room_id: str = None,
    ):
        self.display_name = display_name
        self.response_status = response_status
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsOnlineMeetingInfo(TeaModel):
    def __init__(
        self,
        conference_id: str = None,
        extra_info: Dict[str, Any] = None,
        type: str = None,
        url: str = None,
    ):
        self.conference_id = conference_id
        self.extra_info = extra_info
        self.type = type
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['extraInfo'] = self.extra_info
        if self.type is not None:
            result['type'] = self.type
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('extraInfo') is not None:
            self.extra_info = m.get('extraInfo')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsOrganizer(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsOriginStart(TeaModel):
    def __init__(
        self,
        date_time: str = None,
    ):
        self.date_time = date_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrence(TeaModel):
    def __init__(
        self,
        pattern: ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrencePattern = None,
        range: ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsRichTextDescription(TeaModel):
    def __init__(
        self,
        text: str = None,
    ):
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEventsStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class ListEventsViewResponseBodyListEventsViewResponseBodyEvents(TeaModel):
    def __init__(
        self,
        attendees: List[ListEventsViewResponseBodyListEventsViewResponseBodyEventsAttendees] = None,
        categories: List[ListEventsViewResponseBodyListEventsViewResponseBodyEventsCategories] = None,
        create_time: str = None,
        description: str = None,
        end: ListEventsViewResponseBodyListEventsViewResponseBodyEventsEnd = None,
        extended_properties: ListEventsViewResponseBodyListEventsViewResponseBodyEventsExtendedProperties = None,
        id: str = None,
        is_all_day: bool = None,
        location: ListEventsViewResponseBodyListEventsViewResponseBodyEventsLocation = None,
        meeting_rooms: List[ListEventsViewResponseBodyListEventsViewResponseBodyEventsMeetingRooms] = None,
        online_meeting_info: ListEventsViewResponseBodyListEventsViewResponseBodyEventsOnlineMeetingInfo = None,
        organizer: ListEventsViewResponseBodyListEventsViewResponseBodyEventsOrganizer = None,
        origin_start: ListEventsViewResponseBodyListEventsViewResponseBodyEventsOriginStart = None,
        recurrence: ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrence = None,
        rich_text_description: ListEventsViewResponseBodyListEventsViewResponseBodyEventsRichTextDescription = None,
        series_master_id: str = None,
        start: ListEventsViewResponseBodyListEventsViewResponseBodyEventsStart = None,
        status: str = None,
        summary: str = None,
        update_time: str = None,
    ):
        self.attendees = attendees
        self.categories = categories
        self.create_time = create_time
        self.description = description
        self.end = end
        self.extended_properties = extended_properties
        self.id = id
        self.is_all_day = is_all_day
        self.location = location
        self.meeting_rooms = meeting_rooms
        self.online_meeting_info = online_meeting_info
        self.organizer = organizer
        self.origin_start = origin_start
        self.recurrence = recurrence
        self.rich_text_description = rich_text_description
        self.series_master_id = series_master_id
        self.start = start
        self.status = status
        self.summary = summary
        self.update_time = update_time

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.extended_properties:
            self.extended_properties.validate()
        if self.location:
            self.location.validate()
        if self.meeting_rooms:
            for k in self.meeting_rooms:
                if k:
                    k.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.origin_start:
            self.origin_start.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.rich_text_description:
            self.rich_text_description.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        result['categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['categories'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.extended_properties is not None:
            result['extendedProperties'] = self.extended_properties.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        result['meetingRooms'] = []
        if self.meeting_rooms is not None:
            for k in self.meeting_rooms:
                result['meetingRooms'].append(k.to_map() if k else None)
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.origin_start is not None:
            result['originStart'] = self.origin_start.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        if self.rich_text_description is not None:
            result['richTextDescription'] = self.rich_text_description.to_map()
        if self.series_master_id is not None:
            result['seriesMasterId'] = self.series_master_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.summary is not None:
            result['summary'] = self.summary
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsAttendees()
                self.attendees.append(temp_model.from_map(k))
        self.categories = []
        if m.get('categories') is not None:
            for k in m.get('categories'):
                temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('extendedProperties') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsExtendedProperties()
            self.extended_properties = temp_model.from_map(m['extendedProperties'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsLocation()
            self.location = temp_model.from_map(m['location'])
        self.meeting_rooms = []
        if m.get('meetingRooms') is not None:
            for k in m.get('meetingRooms'):
                temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsMeetingRooms()
                self.meeting_rooms.append(temp_model.from_map(k))
        if m.get('onlineMeetingInfo') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('organizer') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('originStart') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsOriginStart()
            self.origin_start = temp_model.from_map(m['originStart'])
        if m.get('recurrence') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        if m.get('richTextDescription') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsRichTextDescription()
            self.rich_text_description = temp_model.from_map(m['richTextDescription'])
        if m.get('seriesMasterId') is not None:
            self.series_master_id = m.get('seriesMasterId')
        if m.get('start') is not None:
            temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEventsStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class ListEventsViewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        events: List[ListEventsViewResponseBodyListEventsViewResponseBodyEvents] = None,
        next_token: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.events = events
        self.next_token = next_token

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['events'] = []
        if self.events is not None:
            for k in self.events:
                result['events'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.events = []
        if m.get('events') is not None:
            for k in m.get('events'):
                temp_model = ListEventsViewResponseBodyListEventsViewResponseBodyEvents()
                self.events.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class ObjectResultExListEventsViewResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ListEventsViewResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ListEventsViewResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExListEventsViewResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExListEventsViewResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExListEventsViewResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ListEventsViewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExListEventsViewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExListEventsViewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PatchEventRequestAttendees(TeaModel):
    def __init__(
        self,
        id: str = None,
        is_optional: bool = None,
    ):
        self.id = id
        self.is_optional = is_optional

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        return self


class PatchEventRequestEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class PatchEventRequestLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class PatchEventRequestRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class PatchEventRequestRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class PatchEventRequestRecurrence(TeaModel):
    def __init__(
        self,
        pattern: PatchEventRequestRecurrencePattern = None,
        range: PatchEventRequestRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = PatchEventRequestRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = PatchEventRequestRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class PatchEventRequestReminders(TeaModel):
    def __init__(
        self,
        method: str = None,
        minutes: int = None,
    ):
        self.method = method
        self.minutes = minutes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class PatchEventRequestStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class PatchEventRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        attendees: List[PatchEventRequestAttendees] = None,
        description: str = None,
        end: PatchEventRequestEnd = None,
        extra: Dict[str, Any] = None,
        is_all_day: bool = None,
        location: PatchEventRequestLocation = None,
        recurrence: PatchEventRequestRecurrence = None,
        reminders: List[PatchEventRequestReminders] = None,
        start: PatchEventRequestStart = None,
        summary: str = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.attendees = attendees
        self.description = description
        self.end = end
        self.extra = extra
        self.is_all_day = is_all_day
        self.location = location
        self.recurrence = recurrence
        self.reminders = reminders
        self.start = start
        self.summary = summary

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.summary is not None:
            result['summary'] = self.summary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = PatchEventRequestAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = PatchEventRequestEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = PatchEventRequestLocation()
            self.location = temp_model.from_map(m['location'])
        if m.get('recurrence') is not None:
            temp_model = PatchEventRequestRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = PatchEventRequestReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('start') is not None:
            temp_model = PatchEventRequestStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        return self


class PatchEventRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: PatchEventRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = PatchEventRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class PatchEventResponseBodyPatchEventResponseBodyAttendees(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        is_optional: bool = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.is_optional = is_optional
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class PatchEventResponseBodyPatchEventResponseBodyEnd(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class PatchEventResponseBodyPatchEventResponseBodyLocation(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        meeting_rooms: List[str] = None,
    ):
        self.display_name = display_name
        self.meeting_rooms = meeting_rooms

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['meetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('meetingRooms') is not None:
            self.meeting_rooms = m.get('meetingRooms')
        return self


class PatchEventResponseBodyPatchEventResponseBodyOrganizer(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        response_status: str = None,
        self_: bool = None,
    ):
        self.display_name = display_name
        self.id = id
        self.response_status = response_status
        self.self_ = self_

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.response_status is not None:
            result['responseStatus'] = self.response_status
        if self.self_ is not None:
            result['self'] = self.self_
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('responseStatus') is not None:
            self.response_status = m.get('responseStatus')
        if m.get('self') is not None:
            self.self_ = m.get('self')
        return self


class PatchEventResponseBodyPatchEventResponseBodyRecurrencePattern(TeaModel):
    def __init__(
        self,
        day_of_month: int = None,
        days_of_week: str = None,
        index: str = None,
        interval: int = None,
        type: str = None,
    ):
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.index = index
        self.interval = interval
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class PatchEventResponseBodyPatchEventResponseBodyRecurrenceRange(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        number_of_occurrences: int = None,
        type: str = None,
    ):
        self.end_date = end_date
        self.number_of_occurrences = number_of_occurrences
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class PatchEventResponseBodyPatchEventResponseBodyRecurrence(TeaModel):
    def __init__(
        self,
        pattern: PatchEventResponseBodyPatchEventResponseBodyRecurrencePattern = None,
        range: PatchEventResponseBodyPatchEventResponseBodyRecurrenceRange = None,
    ):
        self.pattern = pattern
        self.range = range

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class PatchEventResponseBodyPatchEventResponseBodyReminders(TeaModel):
    def __init__(
        self,
        method: str = None,
        minutes: str = None,
    ):
        self.method = method
        self.minutes = minutes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class PatchEventResponseBodyPatchEventResponseBodyStart(TeaModel):
    def __init__(
        self,
        date: str = None,
        date_time: str = None,
        time_zone: str = None,
    ):
        self.date = date
        self.date_time = date_time
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class PatchEventResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        attendees: List[PatchEventResponseBodyPatchEventResponseBodyAttendees] = None,
        create_time: str = None,
        description: str = None,
        end: PatchEventResponseBodyPatchEventResponseBodyEnd = None,
        id: str = None,
        is_all_day: bool = None,
        location: PatchEventResponseBodyPatchEventResponseBodyLocation = None,
        organizer: PatchEventResponseBodyPatchEventResponseBodyOrganizer = None,
        recurrence: PatchEventResponseBodyPatchEventResponseBodyRecurrence = None,
        reminders: List[PatchEventResponseBodyPatchEventResponseBodyReminders] = None,
        start: PatchEventResponseBodyPatchEventResponseBodyStart = None,
        summary: str = None,
        update_time: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.attendees = attendees
        self.create_time = create_time
        self.description = description
        self.end = end
        self.id = id
        self.is_all_day = is_all_day
        self.location = location
        self.organizer = organizer
        self.recurrence = recurrence
        self.reminders = reminders
        self.start = start
        self.summary = summary
        self.update_time = update_time

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.organizer:
            self.organizer.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.summary is not None:
            result['summary'] = self.summary
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = PatchEventResponseBodyPatchEventResponseBodyAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyLocation()
            self.location = temp_model.from_map(m['location'])
        if m.get('organizer') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('recurrence') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = PatchEventResponseBodyPatchEventResponseBodyReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('start') is not None:
            temp_model = PatchEventResponseBodyPatchEventResponseBodyStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class ObjectResultExPatchEventResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: PatchEventResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = PatchEventResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExPatchEventResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExPatchEventResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExPatchEventResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class PatchEventResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExPatchEventResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExPatchEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveAttendeeRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        attendees_to_remove: List[str] = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.attendees_to_remove = attendees_to_remove

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.attendees_to_remove is not None:
            result['attendeesToRemove'] = self.attendees_to_remove
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('attendeesToRemove') is not None:
            self.attendees_to_remove = m.get('attendeesToRemove')
        return self


class RemoveAttendeeRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: RemoveAttendeeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = RemoveAttendeeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class RemoveAttendeeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultEx = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultEx()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveMeetingRoomsRequestMeetingRoomsToRemove(TeaModel):
    def __init__(
        self,
        room_id: str = None,
    ):
        self.room_id = room_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['roomId'] = self.room_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('roomId') is not None:
            self.room_id = m.get('roomId')
        return self


class RemoveMeetingRoomsRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        event_id: str = None,
        meeting_rooms_to_remove: List[RemoveMeetingRoomsRequestMeetingRoomsToRemove] = None,
    ):
        self.calendar_id = calendar_id
        self.event_id = event_id
        self.meeting_rooms_to_remove = meeting_rooms_to_remove

    def validate(self):
        if self.meeting_rooms_to_remove:
            for k in self.meeting_rooms_to_remove:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.event_id is not None:
            result['eventId'] = self.event_id
        result['meetingRoomsToRemove'] = []
        if self.meeting_rooms_to_remove is not None:
            for k in self.meeting_rooms_to_remove:
                result['meetingRoomsToRemove'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        self.meeting_rooms_to_remove = []
        if m.get('meetingRoomsToRemove') is not None:
            for k in m.get('meetingRoomsToRemove'):
                temp_model = RemoveMeetingRoomsRequestMeetingRoomsToRemove()
                self.meeting_rooms_to_remove.append(temp_model.from_map(k))
        return self


class RemoveMeetingRoomsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: RemoveMeetingRoomsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = RemoveMeetingRoomsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class RemoveMeetingRoomsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
        dingtalk_request_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result
        self.dingtalk_request_id = dingtalk_request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        if self.dingtalk_request_id is not None:
            result['dingtalkRequestId'] = self.dingtalk_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('dingtalkRequestId') is not None:
            self.dingtalk_request_id = m.get('dingtalkRequestId')
        return self


class ObjectResultExRemoveMeetingRoomsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: RemoveMeetingRoomsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = RemoveMeetingRoomsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExRemoveMeetingRoomsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExRemoveMeetingRoomsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExRemoveMeetingRoomsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class RemoveMeetingRoomsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExRemoveMeetingRoomsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExRemoveMeetingRoomsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubscribeCalendarRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
    ):
        self.calendar_id = calendar_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        return self


class SubscribeCalendarRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SubscribeCalendarRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SubscribeCalendarRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SubscribeCalendarResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class ObjectResultExSubscribeCalendarResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SubscribeCalendarResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SubscribeCalendarResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSubscribeCalendarResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSubscribeCalendarResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSubscribeCalendarResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SubscribeCalendarResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSubscribeCalendarResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSubscribeCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnsubscribeCalendarRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
    ):
        self.calendar_id = calendar_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        return self


class UnsubscribeCalendarRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UnsubscribeCalendarRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UnsubscribeCalendarRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UnsubscribeCalendarResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExUnsubscribeCalendarResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UnsubscribeCalendarResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UnsubscribeCalendarResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUnsubscribeCalendarResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUnsubscribeCalendarResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUnsubscribeCalendarResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UnsubscribeCalendarResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUnsubscribeCalendarResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUnsubscribeCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSubscribedCalendarsRequestSubscribeScope(TeaModel):
    def __init__(
        self,
        user_ids: List[str] = None,
    ):
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class UpdateSubscribedCalendarsRequest(TeaModel):
    def __init__(
        self,
        calendar_id: str = None,
        description: str = None,
        managers: List[str] = None,
        name: str = None,
        subscribe_scope: UpdateSubscribedCalendarsRequestSubscribeScope = None,
    ):
        self.calendar_id = calendar_id
        self.description = description
        self.managers = managers
        self.name = name
        self.subscribe_scope = subscribe_scope

    def validate(self):
        if self.subscribe_scope:
            self.subscribe_scope.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.description is not None:
            result['description'] = self.description
        if self.managers is not None:
            result['managers'] = self.managers
        if self.name is not None:
            result['name'] = self.name
        if self.subscribe_scope is not None:
            result['subscribeScope'] = self.subscribe_scope.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('managers') is not None:
            self.managers = m.get('managers')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('subscribeScope') is not None:
            temp_model = UpdateSubscribedCalendarsRequestSubscribeScope()
            self.subscribe_scope = temp_model.from_map(m['subscribeScope'])
        return self


class UpdateSubscribedCalendarsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateSubscribedCalendarsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateSubscribedCalendarsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateSubscribedCalendarsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExUpdateSubscribedCalendarsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateSubscribedCalendarsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateSubscribedCalendarsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateSubscribedCalendarsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateSubscribedCalendarsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateSubscribedCalendarsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateSubscribedCalendarsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateSubscribedCalendarsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateSubscribedCalendarsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExpandGroupCapacityRequest(TeaModel):
    def __init__(
        self,
        open_conversation_id: str = None,
    ):
        self.open_conversation_id = open_conversation_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        return self


class ExpandGroupCapacityRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ExpandGroupCapacityRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ExpandGroupCapacityRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ExpandGroupCapacityResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExExpandGroupCapacityResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ExpandGroupCapacityResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ExpandGroupCapacityResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExExpandGroupCapacityResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExExpandGroupCapacityResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExExpandGroupCapacityResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ExpandGroupCapacityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExExpandGroupCapacityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExExpandGroupCapacityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrgHonorRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        medal_name: str = None,
        medal_desc: str = None,
        medal_media_id: str = None,
        avatar_frame_media_id: str = None,
        default_bg_color: str = None,
        user_id: str = None,
    ):
        self.org_id = org_id
        self.medal_name = medal_name
        self.medal_desc = medal_desc
        self.medal_media_id = medal_media_id
        self.avatar_frame_media_id = avatar_frame_media_id
        self.default_bg_color = default_bg_color
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.medal_name is not None:
            result['medalName'] = self.medal_name
        if self.medal_desc is not None:
            result['medalDesc'] = self.medal_desc
        if self.medal_media_id is not None:
            result['medalMediaId'] = self.medal_media_id
        if self.avatar_frame_media_id is not None:
            result['avatarFrameMediaId'] = self.avatar_frame_media_id
        if self.default_bg_color is not None:
            result['defaultBgColor'] = self.default_bg_color
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('medalName') is not None:
            self.medal_name = m.get('medalName')
        if m.get('medalDesc') is not None:
            self.medal_desc = m.get('medalDesc')
        if m.get('medalMediaId') is not None:
            self.medal_media_id = m.get('medalMediaId')
        if m.get('avatarFrameMediaId') is not None:
            self.avatar_frame_media_id = m.get('avatarFrameMediaId')
        if m.get('defaultBgColor') is not None:
            self.default_bg_color = m.get('defaultBgColor')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class CreateOrgHonorTemplateRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateOrgHonorRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateOrgHonorRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateOrgHonorResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        honor_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.honor_id = honor_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        return self


class ObjectResultExCreateOrgHonorResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateOrgHonorResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateOrgHonorResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateOrgHonorResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateOrgHonorResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateOrgHonorResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateOrgHonorTemplateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateOrgHonorResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateOrgHonorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GrantHonorRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        honor_id: str = None,
        sender_user_id: str = None,
        grant_reason: str = None,
        granter_name: str = None,
        expiration_time: int = None,
        notice_single: bool = None,
        notice_announcer: bool = None,
        receiver_user_ids: List[str] = None,
        open_conversation_ids: List[str] = None,
    ):
        self.org_id = org_id
        self.honor_id = honor_id
        self.sender_user_id = sender_user_id
        self.grant_reason = grant_reason
        self.granter_name = granter_name
        self.expiration_time = expiration_time
        self.notice_single = notice_single
        self.notice_announcer = notice_announcer
        self.receiver_user_ids = receiver_user_ids
        self.open_conversation_ids = open_conversation_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.sender_user_id is not None:
            result['senderUserId'] = self.sender_user_id
        if self.grant_reason is not None:
            result['grantReason'] = self.grant_reason
        if self.granter_name is not None:
            result['granterName'] = self.granter_name
        if self.expiration_time is not None:
            result['expirationTime'] = self.expiration_time
        if self.notice_single is not None:
            result['noticeSingle'] = self.notice_single
        if self.notice_announcer is not None:
            result['noticeAnnouncer'] = self.notice_announcer
        if self.receiver_user_ids is not None:
            result['receiverUserIds'] = self.receiver_user_ids
        if self.open_conversation_ids is not None:
            result['openConversationIds'] = self.open_conversation_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('senderUserId') is not None:
            self.sender_user_id = m.get('senderUserId')
        if m.get('grantReason') is not None:
            self.grant_reason = m.get('grantReason')
        if m.get('granterName') is not None:
            self.granter_name = m.get('granterName')
        if m.get('expirationTime') is not None:
            self.expiration_time = m.get('expirationTime')
        if m.get('noticeSingle') is not None:
            self.notice_single = m.get('noticeSingle')
        if m.get('noticeAnnouncer') is not None:
            self.notice_announcer = m.get('noticeAnnouncer')
        if m.get('receiverUserIds') is not None:
            self.receiver_user_ids = m.get('receiverUserIds')
        if m.get('openConversationIds') is not None:
            self.open_conversation_ids = m.get('openConversationIds')
        return self


class GrantHonorRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GrantHonorRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GrantHonorRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GrantHonorResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success_user_ids: List[str] = None,
        failed_user_ids: List[str] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success_user_ids = success_user_ids
        self.failed_user_ids = failed_user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success_user_ids is not None:
            result['successUserIds'] = self.success_user_ids
        if self.failed_user_ids is not None:
            result['failedUserIds'] = self.failed_user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('successUserIds') is not None:
            self.success_user_ids = m.get('successUserIds')
        if m.get('failedUserIds') is not None:
            self.failed_user_ids = m.get('failedUserIds')
        return self


class ObjectResultExGrantHonorResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GrantHonorResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GrantHonorResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGrantHonorResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGrantHonorResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGrantHonorResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GrantHonorResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGrantHonorResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGrantHonorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApiContext(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        user_token: str = None,
        tenant_id: str = None,
        access_key_id: str = None,
    ):
        self.account_id = account_id
        self.user_token = user_token
        self.tenant_id = tenant_id
        self.access_key_id = access_key_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        if self.user_token is not None:
            result['userToken'] = self.user_token
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        if self.access_key_id is not None:
            result['accessKeyId'] = self.access_key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        if m.get('userToken') is not None:
            self.user_token = m.get('userToken')
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        if m.get('accessKeyId') is not None:
            self.access_key_id = m.get('accessKeyId')
        return self


class QueryOrgHonorsRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        next_token: str = None,
        max_results: int = None,
    ):
        self.org_id = org_id
        self.next_token = next_token
        self.max_results = max_results

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        return self


class QueryOrgHonorsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: ApiContext = None,
        request: QueryOrgHonorsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = ApiContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryOrgHonorsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class OrgHonor(TeaModel):
    def __init__(
        self,
        honor_desc: str = None,
        honor_id: str = None,
        honor_img_url: str = None,
        honor_name: str = None,
        honor_pendant_img_url: str = None,
    ):
        self.honor_desc = honor_desc
        self.honor_id = honor_id
        self.honor_img_url = honor_img_url
        self.honor_name = honor_name
        self.honor_pendant_img_url = honor_pendant_img_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.honor_desc is not None:
            result['honorDesc'] = self.honor_desc
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.honor_img_url is not None:
            result['honorImgUrl'] = self.honor_img_url
        if self.honor_name is not None:
            result['honorName'] = self.honor_name
        if self.honor_pendant_img_url is not None:
            result['honorPendantImgUrl'] = self.honor_pendant_img_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('honorDesc') is not None:
            self.honor_desc = m.get('honorDesc')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('honorImgUrl') is not None:
            self.honor_img_url = m.get('honorImgUrl')
        if m.get('honorName') is not None:
            self.honor_name = m.get('honorName')
        if m.get('honorPendantImgUrl') is not None:
            self.honor_pendant_img_url = m.get('honorPendantImgUrl')
        return self


class QueryOrgHonorsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        next_token: str = None,
        open_honors: List[OrgHonor] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.next_token = next_token
        self.open_honors = open_honors

    def validate(self):
        if self.open_honors:
            for k in self.open_honors:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['openHonors'] = []
        if self.open_honors is not None:
            for k in self.open_honors:
                result['openHonors'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.open_honors = []
        if m.get('openHonors') is not None:
            for k in m.get('openHonors'):
                temp_model = OrgHonor()
                self.open_honors.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryOrgHonorsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryOrgHonorsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryOrgHonorsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryOrgHonorsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryOrgHonorsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryOrgHonorsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryOrgHonorsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryOrgHonorsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryOrgHonorsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryUserHonorsRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        user_id: str = None,
        next_token: str = None,
        max_results: int = None,
    ):
        self.org_id = org_id
        self.user_id = user_id
        self.next_token = next_token
        self.max_results = max_results

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        return self


class QueryUserHonorsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryUserHonorsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryUserHonorsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UserHonorGrantHistory(TeaModel):
    def __init__(
        self,
        grant_time: int = None,
        sender_userid: str = None,
    ):
        self.grant_time = grant_time
        self.sender_userid = sender_userid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.grant_time is not None:
            result['grantTime'] = self.grant_time
        if self.sender_userid is not None:
            result['senderUserid'] = self.sender_userid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('grantTime') is not None:
            self.grant_time = m.get('grantTime')
        if m.get('senderUserid') is not None:
            self.sender_userid = m.get('senderUserid')
        return self


class UserHonor(TeaModel):
    def __init__(
        self,
        expiration_time: int = None,
        grant_history: List[UserHonorGrantHistory] = None,
        honor_desc: str = None,
        honor_id: str = None,
        honor_name: str = None,
    ):
        self.expiration_time = expiration_time
        self.grant_history = grant_history
        self.honor_desc = honor_desc
        self.honor_id = honor_id
        self.honor_name = honor_name

    def validate(self):
        if self.grant_history:
            for k in self.grant_history:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiration_time is not None:
            result['expirationTime'] = self.expiration_time
        result['grantHistory'] = []
        if self.grant_history is not None:
            for k in self.grant_history:
                result['grantHistory'].append(k.to_map() if k else None)
        if self.honor_desc is not None:
            result['honorDesc'] = self.honor_desc
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.honor_name is not None:
            result['honorName'] = self.honor_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expirationTime') is not None:
            self.expiration_time = m.get('expirationTime')
        self.grant_history = []
        if m.get('grantHistory') is not None:
            for k in m.get('grantHistory'):
                temp_model = UserHonorGrantHistory()
                self.grant_history.append(temp_model.from_map(k))
        if m.get('honorDesc') is not None:
            self.honor_desc = m.get('honorDesc')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('honorName') is not None:
            self.honor_name = m.get('honorName')
        return self


class QueryUserHonorsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        next_token: str = None,
        honors: List[UserHonor] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.next_token = next_token
        self.honors = honors

    def validate(self):
        if self.honors:
            for k in self.honors:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['honors'] = []
        if self.honors is not None:
            for k in self.honors:
                result['honors'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.honors = []
        if m.get('honors') is not None:
            for k in m.get('honors'):
                temp_model = UserHonor()
                self.honors.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryUserHonorsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryUserHonorsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryUserHonorsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryUserHonorsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryUserHonorsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryUserHonorsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryUserHonorsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryUserHonorsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryUserHonorsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecallHonorRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        honor_id: str = None,
        user_id: str = None,
    ):
        self.org_id = org_id
        self.honor_id = honor_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class RecallHonorRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: RecallHonorRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = RecallHonorRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class RecallHonorResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultEx = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultEx()
            self.body = temp_model.from_map(m['body'])
        return self


class WearOrgHonorRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        user_id: str = None,
        honor_id: str = None,
        wear: bool = None,
    ):
        self.org_id = org_id
        self.user_id = user_id
        self.honor_id = honor_id
        self.wear = wear

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.wear is not None:
            result['wear'] = self.wear
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('wear') is not None:
            self.wear = m.get('wear')
        return self


class WearOrgHonorRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: WearOrgHonorRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = WearOrgHonorRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class WearOrgHonorResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultEx = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultEx()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateLiveRequest(TeaModel):
    def __init__(
        self,
        cover_url: str = None,
        introduction: str = None,
        pre_end_time: int = None,
        pre_start_time: int = None,
        public_type: int = None,
        title: str = None,
    ):
        self.cover_url = cover_url
        self.introduction = introduction
        self.pre_end_time = pre_end_time
        self.pre_start_time = pre_start_time
        self.public_type = public_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['coverUrl'] = self.cover_url
        if self.introduction is not None:
            result['introduction'] = self.introduction
        if self.pre_end_time is not None:
            result['preEndTime'] = self.pre_end_time
        if self.pre_start_time is not None:
            result['preStartTime'] = self.pre_start_time
        if self.public_type is not None:
            result['publicType'] = self.public_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('coverUrl') is not None:
            self.cover_url = m.get('coverUrl')
        if m.get('introduction') is not None:
            self.introduction = m.get('introduction')
        if m.get('preEndTime') is not None:
            self.pre_end_time = m.get('preEndTime')
        if m.get('preStartTime') is not None:
            self.pre_start_time = m.get('preStartTime')
        if m.get('publicType') is not None:
            self.public_type = m.get('publicType')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CreateLiveRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateLiveRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateLiveRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateLiveResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        live_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.live_id = live_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.live_id is not None:
            result['liveId'] = self.live_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        return self


class ObjectResultExCreateLiveResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateLiveResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateLiveResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateLiveResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateLiveResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateLiveResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateLiveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateLiveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateLiveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteLiveRequest(TeaModel):
    def __init__(
        self,
        live_id: str = None,
    ):
        self.live_id = live_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['liveId'] = self.live_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        return self


class DeleteLiveRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteLiveRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteLiveRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteLiveResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExDeleteLiveResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteLiveResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteLiveResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteLiveResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteLiveResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteLiveResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteLiveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteLiveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteLiveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLiveReplayUrlRequest(TeaModel):
    def __init__(
        self,
        live_id: str = None,
    ):
        self.live_id = live_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['liveId'] = self.live_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        return self


class GetLiveReplayUrlRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetLiveReplayUrlRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetLiveReplayUrlRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetLiveReplayUrlResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        replay_url: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.replay_url = replay_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.replay_url is not None:
            result['replayUrl'] = self.replay_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('replayUrl') is not None:
            self.replay_url = m.get('replayUrl')
        return self


class ObjectResultExGetLiveReplayUrlResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetLiveReplayUrlResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetLiveReplayUrlResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetLiveReplayUrlResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetLiveReplayUrlResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetLiveReplayUrlResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetLiveReplayUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetLiveReplayUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetLiveReplayUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLiveInfoRequest(TeaModel):
    def __init__(
        self,
        live_id: str = None,
    ):
        self.live_id = live_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['liveId'] = self.live_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        return self


class QueryLiveInfoRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryLiveInfoRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryLiveInfoRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryLiveInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        cover_url: str = None,
        duration: int = None,
        end_time: int = None,
        introduction: str = None,
        live_id: str = None,
        live_play_url: str = None,
        live_status: int = None,
        playback_duration: int = None,
        start_time: int = None,
        subscribe_count: int = None,
        title: str = None,
        uv: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.cover_url = cover_url
        self.duration = duration
        self.end_time = end_time
        self.introduction = introduction
        self.live_id = live_id
        self.live_play_url = live_play_url
        self.live_status = live_status
        self.playback_duration = playback_duration
        self.start_time = start_time
        self.subscribe_count = subscribe_count
        self.title = title
        self.uv = uv

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.cover_url is not None:
            result['coverUrl'] = self.cover_url
        if self.duration is not None:
            result['duration'] = self.duration
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.introduction is not None:
            result['introduction'] = self.introduction
        if self.live_id is not None:
            result['liveId'] = self.live_id
        if self.live_play_url is not None:
            result['livePlayUrl'] = self.live_play_url
        if self.live_status is not None:
            result['liveStatus'] = self.live_status
        if self.playback_duration is not None:
            result['playbackDuration'] = self.playback_duration
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.subscribe_count is not None:
            result['subscribeCount'] = self.subscribe_count
        if self.title is not None:
            result['title'] = self.title
        if self.uv is not None:
            result['uv'] = self.uv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('coverUrl') is not None:
            self.cover_url = m.get('coverUrl')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('introduction') is not None:
            self.introduction = m.get('introduction')
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        if m.get('livePlayUrl') is not None:
            self.live_play_url = m.get('livePlayUrl')
        if m.get('liveStatus') is not None:
            self.live_status = m.get('liveStatus')
        if m.get('playbackDuration') is not None:
            self.playback_duration = m.get('playbackDuration')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('subscribeCount') is not None:
            self.subscribe_count = m.get('subscribeCount')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('uv') is not None:
            self.uv = m.get('uv')
        return self


class ObjectResultExQueryLiveInfoResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryLiveInfoResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryLiveInfoResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryLiveInfoResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryLiveInfoResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryLiveInfoResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryLiveInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryLiveInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryLiveInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLiveWatchDetailRequest(TeaModel):
    def __init__(
        self,
        live_id: str = None,
    ):
        self.live_id = live_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['liveId'] = self.live_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        return self


class QueryLiveWatchDetailRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryLiveWatchDetailRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryLiveWatchDetailRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryLiveWatchDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        avg_watch_time: int = None,
        live_uv: int = None,
        msg_count: int = None,
        playback_uv: int = None,
        praise_count: int = None,
        pv: int = None,
        total_watch_time: int = None,
        uv: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.avg_watch_time = avg_watch_time
        self.live_uv = live_uv
        self.msg_count = msg_count
        self.playback_uv = playback_uv
        self.praise_count = praise_count
        self.pv = pv
        self.total_watch_time = total_watch_time
        self.uv = uv

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.avg_watch_time is not None:
            result['avgWatchTime'] = self.avg_watch_time
        if self.live_uv is not None:
            result['liveUv'] = self.live_uv
        if self.msg_count is not None:
            result['msgCount'] = self.msg_count
        if self.playback_uv is not None:
            result['playbackUv'] = self.playback_uv
        if self.praise_count is not None:
            result['praiseCount'] = self.praise_count
        if self.pv is not None:
            result['pv'] = self.pv
        if self.total_watch_time is not None:
            result['totalWatchTime'] = self.total_watch_time
        if self.uv is not None:
            result['uv'] = self.uv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('avgWatchTime') is not None:
            self.avg_watch_time = m.get('avgWatchTime')
        if m.get('liveUv') is not None:
            self.live_uv = m.get('liveUv')
        if m.get('msgCount') is not None:
            self.msg_count = m.get('msgCount')
        if m.get('playbackUv') is not None:
            self.playback_uv = m.get('playbackUv')
        if m.get('praiseCount') is not None:
            self.praise_count = m.get('praiseCount')
        if m.get('pv') is not None:
            self.pv = m.get('pv')
        if m.get('totalWatchTime') is not None:
            self.total_watch_time = m.get('totalWatchTime')
        if m.get('uv') is not None:
            self.uv = m.get('uv')
        return self


class ObjectResultExQueryLiveWatchDetailResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryLiveWatchDetailResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryLiveWatchDetailResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryLiveWatchDetailResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryLiveWatchDetailResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryLiveWatchDetailResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryLiveWatchDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryLiveWatchDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryLiveWatchDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLiveWatchUserListRequest(TeaModel):
    def __init__(
        self,
        live_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.live_id = live_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['liveId'] = self.live_id
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        return self


class QueryLiveWatchUserListRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryLiveWatchUserListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryLiveWatchUserListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryLiveWatchUserListResponseBodyQueryLiveWatchUserListResponseBodyResultOrgUsesList(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        name: str = None,
        user_id: str = None,
        watch_live_time: int = None,
        watch_playback_time: int = None,
        watch_progress_ms: int = None,
    ):
        self.dept_name = dept_name
        self.name = name
        self.user_id = user_id
        self.watch_live_time = watch_live_time
        self.watch_playback_time = watch_playback_time
        self.watch_progress_ms = watch_progress_ms

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['deptName'] = self.dept_name
        if self.name is not None:
            result['name'] = self.name
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.watch_live_time is not None:
            result['watchLiveTime'] = self.watch_live_time
        if self.watch_playback_time is not None:
            result['watchPlaybackTime'] = self.watch_playback_time
        if self.watch_progress_ms is not None:
            result['watchProgressMs'] = self.watch_progress_ms
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptName') is not None:
            self.dept_name = m.get('deptName')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('watchLiveTime') is not None:
            self.watch_live_time = m.get('watchLiveTime')
        if m.get('watchPlaybackTime') is not None:
            self.watch_playback_time = m.get('watchPlaybackTime')
        if m.get('watchProgressMs') is not None:
            self.watch_progress_ms = m.get('watchProgressMs')
        return self


class QueryLiveWatchUserListResponseBodyQueryLiveWatchUserListResponseBodyResultOutOrgUserList(TeaModel):
    def __init__(
        self,
        name: str = None,
        watch_live_time: int = None,
        watch_playback_time: int = None,
        watch_progress_ms: int = None,
    ):
        self.name = name
        self.watch_live_time = watch_live_time
        self.watch_playback_time = watch_playback_time
        self.watch_progress_ms = watch_progress_ms

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.watch_live_time is not None:
            result['watchLiveTime'] = self.watch_live_time
        if self.watch_playback_time is not None:
            result['watchPlaybackTime'] = self.watch_playback_time
        if self.watch_progress_ms is not None:
            result['watchProgressMs'] = self.watch_progress_ms
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('watchLiveTime') is not None:
            self.watch_live_time = m.get('watchLiveTime')
        if m.get('watchPlaybackTime') is not None:
            self.watch_playback_time = m.get('watchPlaybackTime')
        if m.get('watchProgressMs') is not None:
            self.watch_progress_ms = m.get('watchProgressMs')
        return self


class QueryLiveWatchUserListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        org_uses_list: List[QueryLiveWatchUserListResponseBodyQueryLiveWatchUserListResponseBodyResultOrgUsesList] = None,
        out_org_user_list: List[QueryLiveWatchUserListResponseBodyQueryLiveWatchUserListResponseBodyResultOutOrgUserList] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.org_uses_list = org_uses_list
        self.out_org_user_list = out_org_user_list

    def validate(self):
        if self.org_uses_list:
            for k in self.org_uses_list:
                if k:
                    k.validate()
        if self.out_org_user_list:
            for k in self.out_org_user_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['orgUsesList'] = []
        if self.org_uses_list is not None:
            for k in self.org_uses_list:
                result['orgUsesList'].append(k.to_map() if k else None)
        result['outOrgUserList'] = []
        if self.out_org_user_list is not None:
            for k in self.out_org_user_list:
                result['outOrgUserList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.org_uses_list = []
        if m.get('orgUsesList') is not None:
            for k in m.get('orgUsesList'):
                temp_model = QueryLiveWatchUserListResponseBodyQueryLiveWatchUserListResponseBodyResultOrgUsesList()
                self.org_uses_list.append(temp_model.from_map(k))
        self.out_org_user_list = []
        if m.get('outOrgUserList') is not None:
            for k in m.get('outOrgUserList'):
                temp_model = QueryLiveWatchUserListResponseBodyQueryLiveWatchUserListResponseBodyResultOutOrgUserList()
                self.out_org_user_list.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryLiveWatchUserListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryLiveWatchUserListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryLiveWatchUserListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryLiveWatchUserListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryLiveWatchUserListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryLiveWatchUserListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryLiveWatchUserListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryLiveWatchUserListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryLiveWatchUserListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateLiveRequest(TeaModel):
    def __init__(
        self,
        cover_url: str = None,
        live_id: str = None,
        introduction: str = None,
        pre_end_time: int = None,
        pre_start_time: int = None,
        title: str = None,
    ):
        self.cover_url = cover_url
        self.live_id = live_id
        self.introduction = introduction
        self.pre_end_time = pre_end_time
        self.pre_start_time = pre_start_time
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['coverUrl'] = self.cover_url
        if self.live_id is not None:
            result['liveId'] = self.live_id
        if self.introduction is not None:
            result['introduction'] = self.introduction
        if self.pre_end_time is not None:
            result['preEndTime'] = self.pre_end_time
        if self.pre_start_time is not None:
            result['preStartTime'] = self.pre_start_time
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('coverUrl') is not None:
            self.cover_url = m.get('coverUrl')
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        if m.get('introduction') is not None:
            self.introduction = m.get('introduction')
        if m.get('preEndTime') is not None:
            self.pre_end_time = m.get('preEndTime')
        if m.get('preStartTime') is not None:
            self.pre_start_time = m.get('preStartTime')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class UpdateLiveRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateLiveRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateLiveRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateLiveResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExUpdateLiveResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateLiveResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateLiveResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateLiveResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateLiveResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateLiveResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateLiveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateLiveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateLiveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadMediaRequest(TeaModel):
    def __init__(
        self,
        org_id: int = None,
        media_name: str = None,
        url: str = None,
        media_type: str = None,
        content: str = None,
    ):
        self.org_id = org_id
        self.media_name = media_name
        self.url = url
        self.media_type = media_type
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.media_name is not None:
            result['mediaName'] = self.media_name
        if self.url is not None:
            result['url'] = self.url
        if self.media_type is not None:
            result['mediaType'] = self.media_type
        if self.content is not None:
            result['content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('mediaName') is not None:
            self.media_name = m.get('mediaName')
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('mediaType') is not None:
            self.media_type = m.get('mediaType')
        if m.get('content') is not None:
            self.content = m.get('content')
        return self


class UploadMediaRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UploadMediaRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UploadMediaRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UploadMediaResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        media_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.media_id = media_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.media_id is not None:
            result['mediaId'] = self.media_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('mediaId') is not None:
            self.media_id = m.get('mediaId')
        return self


class ObjectResultExUploadMediaResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UploadMediaResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UploadMediaResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUploadMediaResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUploadMediaResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUploadMediaResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UploadMediaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUploadMediaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUploadMediaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBatchDeptIdsRequest(TeaModel):
    def __init__(
        self,
        source_org_id: int = None,
        target_org_id: int = None,
        dept_identifier_list: List[str] = None,
    ):
        self.source_org_id = source_org_id
        self.target_org_id = target_org_id
        self.dept_identifier_list = dept_identifier_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.source_org_id is not None:
            result['sourceOrgId'] = self.source_org_id
        if self.target_org_id is not None:
            result['targetOrgId'] = self.target_org_id
        if self.dept_identifier_list is not None:
            result['deptIdentifierList'] = self.dept_identifier_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sourceOrgId') is not None:
            self.source_org_id = m.get('sourceOrgId')
        if m.get('targetOrgId') is not None:
            self.target_org_id = m.get('targetOrgId')
        if m.get('deptIdentifierList') is not None:
            self.dept_identifier_list = m.get('deptIdentifierList')
        return self


class MigrateDeptVo(TeaModel):
    def __init__(
        self,
        target_org_id: int = None,
        dept_map: Dict[str, Any] = None,
    ):
        self.target_org_id = target_org_id
        self.dept_map = dept_map

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.target_org_id is not None:
            result['targetOrgId'] = self.target_org_id
        if self.dept_map is not None:
            result['deptMap'] = self.dept_map
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('targetOrgId') is not None:
            self.target_org_id = m.get('targetOrgId')
        if m.get('deptMap') is not None:
            self.dept_map = m.get('deptMap')
        return self


class ObjectResultExMigrateDeptVoObjectContent(TeaModel):
    def __init__(
        self,
        data: MigrateDeptVo = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = MigrateDeptVo()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExMigrateDeptVo(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExMigrateDeptVoObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExMigrateDeptVoObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetBatchDeptIdsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExMigrateDeptVo = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExMigrateDeptVo()
            self.body = temp_model.from_map(m['body'])
        return self


class ComAlipayFcCommonLangEventProcessdatamodelPUID(TeaModel):
    def __init__(
        self,
        runtime_app: str = None,
        app_name: str = None,
        biz_type: str = None,
        biz_id: str = None,
        unique_key: str = None,
    ):
        self.runtime_app = runtime_app
        self.app_name = app_name
        self.biz_type = biz_type
        self.biz_id = biz_id
        self.unique_key = unique_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.runtime_app is not None:
            result['runtimeApp'] = self.runtime_app
        if self.app_name is not None:
            result['appName'] = self.app_name
        if self.biz_type is not None:
            result['bizType'] = self.biz_type
        if self.biz_id is not None:
            result['bizId'] = self.biz_id
        if self.unique_key is not None:
            result['uniqueKey'] = self.unique_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('runtimeApp') is not None:
            self.runtime_app = m.get('runtimeApp')
        if m.get('appName') is not None:
            self.app_name = m.get('appName')
        if m.get('bizType') is not None:
            self.biz_type = m.get('bizType')
        if m.get('bizId') is not None:
            self.biz_id = m.get('bizId')
        if m.get('uniqueKey') is not None:
            self.unique_key = m.get('uniqueKey')
        return self


class ProcessBasicMap(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class OperateTraceDTO(TeaModel):
    def __init__(
        self,
        id: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        tnt_inst_id: str = None,
        process_instance_id: int = None,
        pu_id: ComAlipayFcCommonLangEventProcessdatamodelPUID = None,
        operate_type: str = None,
        memo: str = None,
        operator: str = None,
        operator_name: str = None,
        node_name: str = None,
        node_display_name: str = None,
        after_node_name: str = None,
        after_node_display_name: str = None,
        operate_detail: str = None,
        idempotent_id: str = None,
        node_duration: int = None,
        operate_duration: int = None,
        operate_flag: str = None,
    ):
        self.id = id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.tnt_inst_id = tnt_inst_id
        self.process_instance_id = process_instance_id
        self.pu_id = pu_id
        self.operate_type = operate_type
        self.memo = memo
        self.operator = operator
        self.operator_name = operator_name
        self.node_name = node_name
        self.node_display_name = node_display_name
        self.after_node_name = after_node_name
        self.after_node_display_name = after_node_display_name
        self.operate_detail = operate_detail
        self.idempotent_id = idempotent_id
        self.node_duration = node_duration
        self.operate_duration = operate_duration
        self.operate_flag = operate_flag

    def validate(self):
        if self.pu_id:
            self.pu_id.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.tnt_inst_id is not None:
            result['tntInstId'] = self.tnt_inst_id
        if self.process_instance_id is not None:
            result['processInstanceId'] = self.process_instance_id
        if self.pu_id is not None:
            result['puId'] = self.pu_id.to_map()
        if self.operate_type is not None:
            result['operateType'] = self.operate_type
        if self.memo is not None:
            result['memo'] = self.memo
        if self.operator is not None:
            result['operator'] = self.operator
        if self.operator_name is not None:
            result['operatorName'] = self.operator_name
        if self.node_name is not None:
            result['nodeName'] = self.node_name
        if self.node_display_name is not None:
            result['nodeDisplayName'] = self.node_display_name
        if self.after_node_name is not None:
            result['afterNodeName'] = self.after_node_name
        if self.after_node_display_name is not None:
            result['afterNodeDisplayName'] = self.after_node_display_name
        if self.operate_detail is not None:
            result['operateDetail'] = self.operate_detail
        if self.idempotent_id is not None:
            result['idempotentId'] = self.idempotent_id
        if self.node_duration is not None:
            result['nodeDuration'] = self.node_duration
        if self.operate_duration is not None:
            result['operateDuration'] = self.operate_duration
        if self.operate_flag is not None:
            result['operateFlag'] = self.operate_flag
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('tntInstId') is not None:
            self.tnt_inst_id = m.get('tntInstId')
        if m.get('processInstanceId') is not None:
            self.process_instance_id = m.get('processInstanceId')
        if m.get('puId') is not None:
            temp_model = ComAlipayFcCommonLangEventProcessdatamodelPUID()
            self.pu_id = temp_model.from_map(m['puId'])
        if m.get('operateType') is not None:
            self.operate_type = m.get('operateType')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('operator') is not None:
            self.operator = m.get('operator')
        if m.get('operatorName') is not None:
            self.operator_name = m.get('operatorName')
        if m.get('nodeName') is not None:
            self.node_name = m.get('nodeName')
        if m.get('nodeDisplayName') is not None:
            self.node_display_name = m.get('nodeDisplayName')
        if m.get('afterNodeName') is not None:
            self.after_node_name = m.get('afterNodeName')
        if m.get('afterNodeDisplayName') is not None:
            self.after_node_display_name = m.get('afterNodeDisplayName')
        if m.get('operateDetail') is not None:
            self.operate_detail = m.get('operateDetail')
        if m.get('idempotentId') is not None:
            self.idempotent_id = m.get('idempotentId')
        if m.get('nodeDuration') is not None:
            self.node_duration = m.get('nodeDuration')
        if m.get('operateDuration') is not None:
            self.operate_duration = m.get('operateDuration')
        if m.get('operateFlag') is not None:
            self.operate_flag = m.get('operateFlag')
        return self


class ProcessInfo(TeaModel):
    def __init__(
        self,
        process_instance_id: int = None,
        parent_process_instance_id: int = None,
        task_id: int = None,
        pu_id: ComAlipayFcCommonLangEventProcessdatamodelPUID = None,
        parent_pu_id: ComAlipayFcCommonLangEventProcessdatamodelPUID = None,
        process_name: str = None,
        node_name: str = None,
        original_node_name: str = None,
        operate: str = None,
        operator: str = None,
        memo: str = None,
        attachment: str = None,
        biz_final_state: str = None,
        business_context: ProcessBasicMap = None,
        operate_traces: List[OperateTraceDTO] = None,
    ):
        self.process_instance_id = process_instance_id
        self.parent_process_instance_id = parent_process_instance_id
        self.task_id = task_id
        self.pu_id = pu_id
        self.parent_pu_id = parent_pu_id
        self.process_name = process_name
        self.node_name = node_name
        self.original_node_name = original_node_name
        self.operate = operate
        self.operator = operator
        self.memo = memo
        self.attachment = attachment
        self.biz_final_state = biz_final_state
        self.business_context = business_context
        self.operate_traces = operate_traces

    def validate(self):
        if self.pu_id:
            self.pu_id.validate()
        if self.parent_pu_id:
            self.parent_pu_id.validate()
        if self.business_context:
            self.business_context.validate()
        if self.operate_traces:
            for k in self.operate_traces:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.process_instance_id is not None:
            result['processInstanceId'] = self.process_instance_id
        if self.parent_process_instance_id is not None:
            result['parentProcessInstanceId'] = self.parent_process_instance_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.pu_id is not None:
            result['puId'] = self.pu_id.to_map()
        if self.parent_pu_id is not None:
            result['parentPuId'] = self.parent_pu_id.to_map()
        if self.process_name is not None:
            result['processName'] = self.process_name
        if self.node_name is not None:
            result['nodeName'] = self.node_name
        if self.original_node_name is not None:
            result['originalNodeName'] = self.original_node_name
        if self.operate is not None:
            result['operate'] = self.operate
        if self.operator is not None:
            result['operator'] = self.operator
        if self.memo is not None:
            result['memo'] = self.memo
        if self.attachment is not None:
            result['attachment'] = self.attachment
        if self.biz_final_state is not None:
            result['bizFinalState'] = self.biz_final_state
        if self.business_context is not None:
            result['businessContext'] = self.business_context.to_map()
        result['operateTraces'] = []
        if self.operate_traces is not None:
            for k in self.operate_traces:
                result['operateTraces'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('processInstanceId') is not None:
            self.process_instance_id = m.get('processInstanceId')
        if m.get('parentProcessInstanceId') is not None:
            self.parent_process_instance_id = m.get('parentProcessInstanceId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('puId') is not None:
            temp_model = ComAlipayFcCommonLangEventProcessdatamodelPUID()
            self.pu_id = temp_model.from_map(m['puId'])
        if m.get('parentPuId') is not None:
            temp_model = ComAlipayFcCommonLangEventProcessdatamodelPUID()
            self.parent_pu_id = temp_model.from_map(m['parentPuId'])
        if m.get('processName') is not None:
            self.process_name = m.get('processName')
        if m.get('nodeName') is not None:
            self.node_name = m.get('nodeName')
        if m.get('originalNodeName') is not None:
            self.original_node_name = m.get('originalNodeName')
        if m.get('operate') is not None:
            self.operate = m.get('operate')
        if m.get('operator') is not None:
            self.operator = m.get('operator')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('attachment') is not None:
            self.attachment = m.get('attachment')
        if m.get('bizFinalState') is not None:
            self.biz_final_state = m.get('bizFinalState')
        if m.get('businessContext') is not None:
            temp_model = ProcessBasicMap()
            self.business_context = temp_model.from_map(m['businessContext'])
        self.operate_traces = []
        if m.get('operateTraces') is not None:
            for k in m.get('operateTraces'):
                temp_model = OperateTraceDTO()
                self.operate_traces.append(temp_model.from_map(k))
        return self


class OnCallRequest(TeaModel):
    def __init__(
        self,
        info: ProcessInfo = None,
    ):
        self.info = info

    def validate(self):
        if self.info:
            self.info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.info is not None:
            result['info'] = self.info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('info') is not None:
            temp_model = ProcessInfo()
            self.info = temp_model.from_map(m['info'])
        return self


class ComAlipayCommonErrorErrorCode(TeaModel):
    def __init__(
        self,
        version: str = None,
        error_level: str = None,
        error_type: str = None,
        error_scene: str = None,
        error_specific: str = None,
        error_prefix: str = None,
    ):
        self.version = version
        self.error_level = error_level
        self.error_type = error_type
        self.error_scene = error_scene
        self.error_specific = error_specific
        self.error_prefix = error_prefix

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version is not None:
            result['version'] = self.version
        if self.error_level is not None:
            result['errorLevel'] = self.error_level
        if self.error_type is not None:
            result['errorType'] = self.error_type
        if self.error_scene is not None:
            result['errorScene'] = self.error_scene
        if self.error_specific is not None:
            result['errorSpecific'] = self.error_specific
        if self.error_prefix is not None:
            result['errorPrefix'] = self.error_prefix
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('errorLevel') is not None:
            self.error_level = m.get('errorLevel')
        if m.get('errorType') is not None:
            self.error_type = m.get('errorType')
        if m.get('errorScene') is not None:
            self.error_scene = m.get('errorScene')
        if m.get('errorSpecific') is not None:
            self.error_specific = m.get('errorSpecific')
        if m.get('errorPrefix') is not None:
            self.error_prefix = m.get('errorPrefix')
        return self


class CommonError(TeaModel):
    def __init__(
        self,
        error_code: ComAlipayCommonErrorErrorCode = None,
        error_msg: str = None,
        location: str = None,
    ):
        self.error_code = error_code
        self.error_msg = error_msg
        self.location = location

    def validate(self):
        if self.error_code:
            self.error_code.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['errorCode'] = self.error_code.to_map()
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.location is not None:
            result['location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('errorCode') is not None:
            temp_model = ComAlipayCommonErrorErrorCode()
            self.error_code = temp_model.from_map(m['errorCode'])
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('location') is not None:
            self.location = m.get('location')
        return self


class ErrorContext(TeaModel):
    def __init__(
        self,
        error_stack: List[CommonError] = None,
        third_party_error: str = None,
        error_variable_map: Dict[str, Any] = None,
    ):
        self.error_stack = error_stack
        self.third_party_error = third_party_error
        self.error_variable_map = error_variable_map

    def validate(self):
        if self.error_stack:
            for k in self.error_stack:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['errorStack'] = []
        if self.error_stack is not None:
            for k in self.error_stack:
                result['errorStack'].append(k.to_map() if k else None)
        if self.third_party_error is not None:
            result['thirdPartyError'] = self.third_party_error
        if self.error_variable_map is not None:
            result['errorVariableMap'] = self.error_variable_map
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.error_stack = []
        if m.get('errorStack') is not None:
            for k in m.get('errorStack'):
                temp_model = CommonError()
                self.error_stack.append(temp_model.from_map(k))
        if m.get('thirdPartyError') is not None:
            self.third_party_error = m.get('thirdPartyError')
        if m.get('errorVariableMap') is not None:
            self.error_variable_map = m.get('errorVariableMap')
        return self


class CallHandle(TeaModel):
    def __init__(
        self,
        operate: str = None,
        memo: str = None,
        exe_date: str = None,
        ignore_weekend: bool = None,
        interval: str = None,
        retry: int = None,
    ):
        self.operate = operate
        self.memo = memo
        self.exe_date = exe_date
        self.ignore_weekend = ignore_weekend
        self.interval = interval
        self.retry = retry

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operate is not None:
            result['operate'] = self.operate
        if self.memo is not None:
            result['memo'] = self.memo
        if self.exe_date is not None:
            result['exeDate'] = self.exe_date
        if self.ignore_weekend is not None:
            result['ignoreWeekend'] = self.ignore_weekend
        if self.interval is not None:
            result['interval'] = self.interval
        if self.retry is not None:
            result['retry'] = self.retry
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operate') is not None:
            self.operate = m.get('operate')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('exeDate') is not None:
            self.exe_date = m.get('exeDate')
        if m.get('ignoreWeekend') is not None:
            self.ignore_weekend = m.get('ignoreWeekend')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('retry') is not None:
            self.retry = m.get('retry')
        return self


class CallbackInfo(TeaModel):
    def __init__(
        self,
        business_context: ProcessBasicMap = None,
        call_handle: CallHandle = None,
    ):
        self.business_context = business_context
        self.call_handle = call_handle

    def validate(self):
        if self.business_context:
            self.business_context.validate()
        if self.call_handle:
            self.call_handle.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_context is not None:
            result['businessContext'] = self.business_context.to_map()
        if self.call_handle is not None:
            result['callHandle'] = self.call_handle.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('businessContext') is not None:
            temp_model = ProcessBasicMap()
            self.business_context = temp_model.from_map(m['businessContext'])
        if m.get('callHandle') is not None:
            temp_model = CallHandle()
            self.call_handle = temp_model.from_map(m['callHandle'])
        return self


class ResultInfoMessageTypeEnum(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class ResultWithDataCallbackInfo(TeaModel):
    def __init__(
        self,
        success: bool = None,
        error_context: ErrorContext = None,
        result_obj: CallbackInfo = None,
        info_message: str = None,
        info_message_type: ResultInfoMessageTypeEnum = None,
        ext_property: Dict[str, Any] = None,
    ):
        self.success = success
        self.error_context = error_context
        self.result_obj = result_obj
        self.info_message = info_message
        self.info_message_type = info_message_type
        self.ext_property = ext_property

    def validate(self):
        if self.error_context:
            self.error_context.validate()
        if self.result_obj:
            self.result_obj.validate()
        if self.info_message_type:
            self.info_message_type.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.error_context is not None:
            result['errorContext'] = self.error_context.to_map()
        if self.result_obj is not None:
            result['resultObj'] = self.result_obj.to_map()
        if self.info_message is not None:
            result['infoMessage'] = self.info_message
        if self.info_message_type is not None:
            result['infoMessageType'] = self.info_message_type.to_map()
        if self.ext_property is not None:
            result['extProperty'] = self.ext_property
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('errorContext') is not None:
            temp_model = ErrorContext()
            self.error_context = temp_model.from_map(m['errorContext'])
        if m.get('resultObj') is not None:
            temp_model = CallbackInfo()
            self.result_obj = temp_model.from_map(m['resultObj'])
        if m.get('infoMessage') is not None:
            self.info_message = m.get('infoMessage')
        if m.get('infoMessageType') is not None:
            temp_model = ResultInfoMessageTypeEnum()
            self.info_message_type = temp_model.from_map(m['infoMessageType'])
        if m.get('extProperty') is not None:
            self.ext_property = m.get('extProperty')
        return self


class OnCallResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResultWithDataCallbackInfo = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResultWithDataCallbackInfo()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportCommentListRequest(TeaModel):
    def __init__(
        self,
        offset: int = None,
        report_id: str = None,
        size: int = None,
    ):
        self.offset = offset
        self.report_id = report_id
        self.size = size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['offset'] = self.offset
        if self.report_id is not None:
            result['reportId'] = self.report_id
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('reportId') is not None:
            self.report_id = m.get('reportId')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class CommentListReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportCommentListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportCommentListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportCommentListResponseBodyReportCommentVo(TeaModel):
    def __init__(
        self,
        content: str = None,
        create_time: str = None,
        userid: str = None,
    ):
        self.content = content
        self.create_time = create_time
        self.userid = userid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class ReportCommentListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        comments: List[ReportCommentListResponseBodyReportCommentVo] = None,
        has_more: bool = None,
        next_cursor: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.comments = comments
        self.has_more = has_more
        self.next_cursor = next_cursor

    def validate(self):
        if self.comments:
            for k in self.comments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['comments'] = []
        if self.comments is not None:
            for k in self.comments:
                result['comments'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.comments = []
        if m.get('comments') is not None:
            for k in m.get('comments'):
                temp_model = ReportCommentListResponseBodyReportCommentVo()
                self.comments.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        return self


class ObjectResultExReportCommentListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportCommentListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportCommentListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportCommentListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportCommentListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportCommentListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CommentListReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportCommentListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportCommentListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportCreateRequestReportContentVo(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_type: str = None,
        key: str = None,
        sort: int = None,
        type: int = None,
    ):
        self.content = content
        self.content_type = content_type
        self.key = key
        self.sort = sort
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.content_type is not None:
            result['contentType'] = self.content_type
        if self.key is not None:
            result['key'] = self.key
        if self.sort is not None:
            result['sort'] = self.sort
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('contentType') is not None:
            self.content_type = m.get('contentType')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('sort') is not None:
            self.sort = m.get('sort')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ReportCreateRequest(TeaModel):
    def __init__(
        self,
        contents: List[ReportCreateRequestReportContentVo] = None,
        dd_from: str = None,
        template_id: str = None,
        to_chat: bool = None,
        to_cids: List[str] = None,
        to_userids: List[str] = None,
        userid: str = None,
    ):
        self.contents = contents
        self.dd_from = dd_from
        self.template_id = template_id
        self.to_chat = to_chat
        self.to_cids = to_cids
        self.to_userids = to_userids
        self.userid = userid

    def validate(self):
        if self.contents:
            for k in self.contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['contents'] = []
        if self.contents is not None:
            for k in self.contents:
                result['contents'].append(k.to_map() if k else None)
        if self.dd_from is not None:
            result['ddFrom'] = self.dd_from
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.to_chat is not None:
            result['toChat'] = self.to_chat
        if self.to_cids is not None:
            result['toCids'] = self.to_cids
        if self.to_userids is not None:
            result['toUserids'] = self.to_userids
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contents = []
        if m.get('contents') is not None:
            for k in m.get('contents'):
                temp_model = ReportCreateRequestReportContentVo()
                self.contents.append(temp_model.from_map(k))
        if m.get('ddFrom') is not None:
            self.dd_from = m.get('ddFrom')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('toChat') is not None:
            self.to_chat = m.get('toChat')
        if m.get('toCids') is not None:
            self.to_cids = m.get('toCids')
        if m.get('toUserids') is not None:
            self.to_userids = m.get('toUserids')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class CreateReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportCreateRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportCreateRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportCreateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
        result: str = None,
        body: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success
        self.result = result
        self.body = body

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        if self.result is not None:
            result['result'] = self.result
        if self.body is not None:
            result['body'] = self.body
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('body') is not None:
            self.body = m.get('body')
        return self


class ObjectResultExReportCreateResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportCreateResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportCreateResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportCreateResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportCreateResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportCreateResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportCreateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportTemplateGetByNameRequest(TeaModel):
    def __init__(
        self,
        template_name: str = None,
    ):
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.template_name is not None:
            result['templateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        return self


class GetReportTemplateByNameRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportTemplateGetByNameRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportTemplateGetByNameRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportTemplateGetByNameResponseBodyBaseConversationVo(TeaModel):
    def __init__(
        self,
        conversation_id: str = None,
        title: str = None,
    ):
        self.conversation_id = conversation_id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_id is not None:
            result['conversationId'] = self.conversation_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('conversationId') is not None:
            self.conversation_id = m.get('conversationId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ReportTemplateGetByNameResponseBodyDefaultReceivers(TeaModel):
    def __init__(
        self,
        user_name: str = None,
        userid: str = None,
    ):
        self.user_name = user_name
        self.userid = userid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_name is not None:
            result['userName'] = self.user_name
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('userName') is not None:
            self.user_name = m.get('userName')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class ReportTemplateGetByNameResponseBodyFields(TeaModel):
    def __init__(
        self,
        field_name: str = None,
        sort: int = None,
        type: int = None,
    ):
        self.field_name = field_name
        self.sort = sort
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.sort is not None:
            result['sort'] = self.sort
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('sort') is not None:
            self.sort = m.get('sort')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ReportTemplateGetByNameResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        default_received_convs: List[ReportTemplateGetByNameResponseBodyBaseConversationVo] = None,
        default_receivers: List[ReportTemplateGetByNameResponseBodyDefaultReceivers] = None,
        fields: List[ReportTemplateGetByNameResponseBodyFields] = None,
        id: str = None,
        name: str = None,
        user_name: str = None,
        userid: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.default_received_convs = default_received_convs
        self.default_receivers = default_receivers
        self.fields = fields
        self.id = id
        self.name = name
        self.user_name = user_name
        self.userid = userid

    def validate(self):
        if self.default_received_convs:
            for k in self.default_received_convs:
                if k:
                    k.validate()
        if self.default_receivers:
            for k in self.default_receivers:
                if k:
                    k.validate()
        if self.fields:
            for k in self.fields:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['defaultReceivedConvs'] = []
        if self.default_received_convs is not None:
            for k in self.default_received_convs:
                result['defaultReceivedConvs'].append(k.to_map() if k else None)
        result['defaultReceivers'] = []
        if self.default_receivers is not None:
            for k in self.default_receivers:
                result['defaultReceivers'].append(k.to_map() if k else None)
        result['fields'] = []
        if self.fields is not None:
            for k in self.fields:
                result['fields'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.user_name is not None:
            result['userName'] = self.user_name
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.default_received_convs = []
        if m.get('defaultReceivedConvs') is not None:
            for k in m.get('defaultReceivedConvs'):
                temp_model = ReportTemplateGetByNameResponseBodyBaseConversationVo()
                self.default_received_convs.append(temp_model.from_map(k))
        self.default_receivers = []
        if m.get('defaultReceivers') is not None:
            for k in m.get('defaultReceivers'):
                temp_model = ReportTemplateGetByNameResponseBodyDefaultReceivers()
                self.default_receivers.append(temp_model.from_map(k))
        self.fields = []
        if m.get('fields') is not None:
            for k in m.get('fields'):
                temp_model = ReportTemplateGetByNameResponseBodyFields()
                self.fields.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('userName') is not None:
            self.user_name = m.get('userName')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class ObjectResultExReportTemplateGetByNameResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportTemplateGetByNameResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportTemplateGetByNameResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportTemplateGetByNameResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportTemplateGetByNameResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportTemplateGetByNameResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetReportTemplateByNameResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportTemplateGetByNameResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportTemplateGetByNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportGetUnReadCountRequest(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class GetReportUnReadCountRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportGetUnReadCountRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportGetUnReadCountRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportGetUnReadCountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        count: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.count = count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.count is not None:
            result['count'] = self.count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('count') is not None:
            self.count = m.get('count')
        return self


class ObjectResultExReportGetUnReadCountResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportGetUnReadCountResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportGetUnReadCountResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportGetUnReadCountResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportGetUnReadCountResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportGetUnReadCountResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetReportUnReadCountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportGetUnReadCountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportGetUnReadCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportTemplateListByUserIdRequest(TeaModel):
    def __init__(
        self,
        offset: int = None,
        size: int = None,
    ):
        self.offset = offset
        self.size = size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['offset'] = self.offset
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class GetTemplateListByUserIdRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportTemplateListByUserIdRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportTemplateListByUserIdRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportTemplateListByUserIdResponseBodyReportTemplateTopVo(TeaModel):
    def __init__(
        self,
        icon_url: str = None,
        name: str = None,
        report_code: str = None,
        url: str = None,
    ):
        self.icon_url = icon_url
        self.name = name
        self.report_code = report_code
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon_url is not None:
            result['iconUrl'] = self.icon_url
        if self.name is not None:
            result['name'] = self.name
        if self.report_code is not None:
            result['reportCode'] = self.report_code
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iconUrl') is not None:
            self.icon_url = m.get('iconUrl')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('reportCode') is not None:
            self.report_code = m.get('reportCode')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ReportTemplateListByUserIdResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        next_cursor: int = None,
        template_list: List[ReportTemplateListByUserIdResponseBodyReportTemplateTopVo] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.next_cursor = next_cursor
        self.template_list = template_list

    def validate(self):
        if self.template_list:
            for k in self.template_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        result['templateList'] = []
        if self.template_list is not None:
            for k in self.template_list:
                result['templateList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        self.template_list = []
        if m.get('templateList') is not None:
            for k in m.get('templateList'):
                temp_model = ReportTemplateListByUserIdResponseBodyReportTemplateTopVo()
                self.template_list.append(temp_model.from_map(k))
        return self


class ObjectResultExReportTemplateListByUserIdResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportTemplateListByUserIdResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportTemplateListByUserIdResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportTemplateListByUserIdResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportTemplateListByUserIdResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportTemplateListByUserIdResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetTemplateListByUserIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportTemplateListByUserIdResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportTemplateListByUserIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportListRequest(TeaModel):
    def __init__(
        self,
        cursor: int = None,
        end_time: int = None,
        modified_end_time: int = None,
        modified_start_time: int = None,
        size: int = None,
        start_time: int = None,
        template_name: str = None,
    ):
        self.cursor = cursor
        self.end_time = end_time
        self.modified_end_time = modified_end_time
        self.modified_start_time = modified_start_time
        self.size = size
        self.start_time = start_time
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cursor is not None:
            result['cursor'] = self.cursor
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.modified_end_time is not None:
            result['modifiedEndTime'] = self.modified_end_time
        if self.modified_start_time is not None:
            result['modifiedStartTime'] = self.modified_start_time
        if self.size is not None:
            result['size'] = self.size
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.template_name is not None:
            result['templateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cursor') is not None:
            self.cursor = m.get('cursor')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('modifiedEndTime') is not None:
            self.modified_end_time = m.get('modifiedEndTime')
        if m.get('modifiedStartTime') is not None:
            self.modified_start_time = m.get('modifiedStartTime')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        return self


class ListReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportListResponseBodyReportOapiVo(TeaModel):
    def __init__(
        self,
        contents: List[Dict[str, Any]] = None,
        create_time: int = None,
        creator_id: str = None,
        creator_name: str = None,
        dept_name: str = None,
        images: List[str] = None,
        latitude: str = None,
        longitude: str = None,
        modified_time: int = None,
        remark: str = None,
        report_id: str = None,
        template_name: str = None,
    ):
        self.contents = contents
        self.create_time = create_time
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.dept_name = dept_name
        self.images = images
        self.latitude = latitude
        self.longitude = longitude
        self.modified_time = modified_time
        self.remark = remark
        self.report_id = report_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contents is not None:
            result['contents'] = self.contents
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.creator_name is not None:
            result['creatorName'] = self.creator_name
        if self.dept_name is not None:
            result['deptName'] = self.dept_name
        if self.images is not None:
            result['images'] = self.images
        if self.latitude is not None:
            result['latitude'] = self.latitude
        if self.longitude is not None:
            result['longitude'] = self.longitude
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.remark is not None:
            result['remark'] = self.remark
        if self.report_id is not None:
            result['reportId'] = self.report_id
        if self.template_name is not None:
            result['templateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contents') is not None:
            self.contents = m.get('contents')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('creatorName') is not None:
            self.creator_name = m.get('creatorName')
        if m.get('deptName') is not None:
            self.dept_name = m.get('deptName')
        if m.get('images') is not None:
            self.images = m.get('images')
        if m.get('latitude') is not None:
            self.latitude = m.get('latitude')
        if m.get('longitude') is not None:
            self.longitude = m.get('longitude')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reportId') is not None:
            self.report_id = m.get('reportId')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        return self


class ReportListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        data_list: List[ReportListResponseBodyReportOapiVo] = None,
        has_more: bool = None,
        next_cursor: int = None,
        size: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.data_list = data_list
        self.has_more = has_more
        self.next_cursor = next_cursor
        self.size = size

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['dataList'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['dataList'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.data_list = []
        if m.get('dataList') is not None:
            for k in m.get('dataList'):
                temp_model = ReportListResponseBodyReportOapiVo()
                self.data_list.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class ObjectResultExReportListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ListReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportReceiverListRequest(TeaModel):
    def __init__(
        self,
        offset: int = None,
        report_id: str = None,
        size: int = None,
    ):
        self.offset = offset
        self.report_id = report_id
        self.size = size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['offset'] = self.offset
        if self.report_id is not None:
            result['reportId'] = self.report_id
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('reportId') is not None:
            self.report_id = m.get('reportId')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class ReceiverListReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportReceiverListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportReceiverListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportReceiverListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        has_more: bool = None,
        next_cursor: int = None,
        userid_list: List[str] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.has_more = has_more
        self.next_cursor = next_cursor
        self.userid_list = userid_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.userid_list is not None:
            result['useridList'] = self.userid_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('useridList') is not None:
            self.userid_list = m.get('useridList')
        return self


class ObjectResultExReportReceiverListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportReceiverListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportReceiverListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportReceiverListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportReceiverListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportReceiverListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ReceiverListReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportReceiverListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportReceiverListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportSaveContentRequestReportContentVo(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_type: str = None,
        key: str = None,
        sort: int = None,
        type: int = None,
    ):
        self.content = content
        self.content_type = content_type
        self.key = key
        self.sort = sort
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.content_type is not None:
            result['contentType'] = self.content_type
        if self.key is not None:
            result['key'] = self.key
        if self.sort is not None:
            result['sort'] = self.sort
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('contentType') is not None:
            self.content_type = m.get('contentType')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('sort') is not None:
            self.sort = m.get('sort')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ReportSaveContentRequest(TeaModel):
    def __init__(
        self,
        contents: List[ReportSaveContentRequestReportContentVo] = None,
        dd_from: str = None,
        template_id: str = None,
        userid: str = None,
    ):
        self.contents = contents
        self.dd_from = dd_from
        self.template_id = template_id
        self.userid = userid

    def validate(self):
        if self.contents:
            for k in self.contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['contents'] = []
        if self.contents is not None:
            for k in self.contents:
                result['contents'].append(k.to_map() if k else None)
        if self.dd_from is not None:
            result['ddFrom'] = self.dd_from
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contents = []
        if m.get('contents') is not None:
            for k in m.get('contents'):
                temp_model = ReportSaveContentRequestReportContentVo()
                self.contents.append(temp_model.from_map(k))
        if m.get('ddFrom') is not None:
            self.dd_from = m.get('ddFrom')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class SaveContentRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportSaveContentRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportSaveContentRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportSaveContentResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
        result: str = None,
        body: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success
        self.result = result
        self.body = body

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        if self.result is not None:
            result['result'] = self.result
        if self.body is not None:
            result['body'] = self.body
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('body') is not None:
            self.body = m.get('body')
        return self


class ObjectResultExReportSaveContentResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportSaveContentResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportSaveContentResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportSaveContentResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportSaveContentResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportSaveContentResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SaveContentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportSaveContentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportSaveContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportSimpleListRequest(TeaModel):
    def __init__(
        self,
        cursor: int = None,
        end_time: int = None,
        size: int = None,
        start_time: int = None,
        template_name: str = None,
    ):
        self.cursor = cursor
        self.end_time = end_time
        self.size = size
        self.start_time = start_time
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cursor is not None:
            result['cursor'] = self.cursor
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.size is not None:
            result['size'] = self.size
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.template_name is not None:
            result['templateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cursor') is not None:
            self.cursor = m.get('cursor')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        return self


class SimpleListReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportSimpleListRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportSimpleListRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportSimpleListResponseBodyReportOapiVo(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        creator_id: str = None,
        creator_name: str = None,
        dept_name: str = None,
        remark: str = None,
        report_id: str = None,
        template_name: str = None,
    ):
        self.create_time = create_time
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.dept_name = dept_name
        self.remark = remark
        self.report_id = report_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.creator_name is not None:
            result['creatorName'] = self.creator_name
        if self.dept_name is not None:
            result['deptName'] = self.dept_name
        if self.remark is not None:
            result['remark'] = self.remark
        if self.report_id is not None:
            result['reportId'] = self.report_id
        if self.template_name is not None:
            result['templateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('creatorName') is not None:
            self.creator_name = m.get('creatorName')
        if m.get('deptName') is not None:
            self.dept_name = m.get('deptName')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reportId') is not None:
            self.report_id = m.get('reportId')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        return self


class ReportSimpleListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        data_list: List[ReportSimpleListResponseBodyReportOapiVo] = None,
        has_more: bool = None,
        next_cursor: int = None,
        size: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.data_list = data_list
        self.has_more = has_more
        self.next_cursor = next_cursor
        self.size = size

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['dataList'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['dataList'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.data_list = []
        if m.get('dataList') is not None:
            for k in m.get('dataList'):
                temp_model = ReportSimpleListResponseBodyReportOapiVo()
                self.data_list.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class ObjectResultExReportSimpleListResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportSimpleListResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportSimpleListResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportSimpleListResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportSimpleListResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportSimpleListResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SimpleListReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportSimpleListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportSimpleListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportStatisticsListByTypeRequest(TeaModel):
    def __init__(
        self,
        offset: int = None,
        report_id: str = None,
        size: int = None,
        type: int = None,
    ):
        self.offset = offset
        self.report_id = report_id
        self.size = size
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['offset'] = self.offset
        if self.report_id is not None:
            result['reportId'] = self.report_id
        if self.size is not None:
            result['size'] = self.size
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('reportId') is not None:
            self.report_id = m.get('reportId')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class StatisticsListByTypeReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportStatisticsListByTypeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportStatisticsListByTypeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportStatisticsListByTypeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        has_more: bool = None,
        next_cursor: int = None,
        userid_list: List[str] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.has_more = has_more
        self.next_cursor = next_cursor
        self.userid_list = userid_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.userid_list is not None:
            result['useridList'] = self.userid_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('useridList') is not None:
            self.userid_list = m.get('useridList')
        return self


class ObjectResultExReportStatisticsListByTypeResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportStatisticsListByTypeResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportStatisticsListByTypeResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportStatisticsListByTypeResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportStatisticsListByTypeResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportStatisticsListByTypeResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class StatisticsListByTypeReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportStatisticsListByTypeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportStatisticsListByTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReportStatisticsRequest(TeaModel):
    def __init__(
        self,
        report_id: str = None,
    ):
        self.report_id = report_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.report_id is not None:
            result['reportId'] = self.report_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('reportId') is not None:
            self.report_id = m.get('reportId')
        return self


class StatisticsReportRequest(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ReportStatisticsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ReportStatisticsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ReportStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        comment_num: int = None,
        comment_user_num: int = None,
        like_num: int = None,
        read_num: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.comment_num = comment_num
        self.comment_user_num = comment_user_num
        self.like_num = like_num
        self.read_num = read_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.comment_num is not None:
            result['commentNum'] = self.comment_num
        if self.comment_user_num is not None:
            result['commentUserNum'] = self.comment_user_num
        if self.like_num is not None:
            result['likeNum'] = self.like_num
        if self.read_num is not None:
            result['readNum'] = self.read_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('commentNum') is not None:
            self.comment_num = m.get('commentNum')
        if m.get('commentUserNum') is not None:
            self.comment_user_num = m.get('commentUserNum')
        if m.get('likeNum') is not None:
            self.like_num = m.get('likeNum')
        if m.get('readNum') is not None:
            self.read_num = m.get('readNum')
        return self


class ObjectResultExReportStatisticsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ReportStatisticsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ReportStatisticsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExReportStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExReportStatisticsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExReportStatisticsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class StatisticsReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExReportStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExReportStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchSendOTORequest(TeaModel):
    def __init__(
        self,
        x_acs_dingtalk_access_token: str = None,
        msg_key: str = None,
        msg_param: str = None,
        robot_code: str = None,
        user_ids: List[str] = None,
    ):
        self.x_acs_dingtalk_access_token = x_acs_dingtalk_access_token
        self.msg_key = msg_key
        self.msg_param = msg_param
        self.robot_code = robot_code
        self.user_ids = user_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.x_acs_dingtalk_access_token is not None:
            result['xAcsDingtalkAccessToken'] = self.x_acs_dingtalk_access_token
        if self.msg_key is not None:
            result['msgKey'] = self.msg_key
        if self.msg_param is not None:
            result['msgParam'] = self.msg_param
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        if self.user_ids is not None:
            result['userIds'] = self.user_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('xAcsDingtalkAccessToken') is not None:
            self.x_acs_dingtalk_access_token = m.get('xAcsDingtalkAccessToken')
        if m.get('msgKey') is not None:
            self.msg_key = m.get('msgKey')
        if m.get('msgParam') is not None:
            self.msg_param = m.get('msgParam')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        if m.get('userIds') is not None:
            self.user_ids = m.get('userIds')
        return self


class BatchSendOTORequestPrivate(TeaModel):
    def __init__(
        self,
        context: GatewayContext = None,
        request: BatchSendOTORequest = None,
    ):
        self.context = context
        self.request = request

    def validate(self):
        if self.context:
            self.context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.context is not None:
            result['context'] = self.context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('context') is not None:
            temp_model = GatewayContext()
            self.context = temp_model.from_map(m['context'])
        if m.get('request') is not None:
            temp_model = BatchSendOTORequest()
            self.request = temp_model.from_map(m['request'])
        return self


class BatchSendOTOResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        flow_controlled_staff_id_list: List[str] = None,
        invalid_staff_id_list: List[str] = None,
        process_query_key: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.flow_controlled_staff_id_list = flow_controlled_staff_id_list
        self.invalid_staff_id_list = invalid_staff_id_list
        self.process_query_key = process_query_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.flow_controlled_staff_id_list is not None:
            result['flowControlledStaffIdList'] = self.flow_controlled_staff_id_list
        if self.invalid_staff_id_list is not None:
            result['invalidStaffIdList'] = self.invalid_staff_id_list
        if self.process_query_key is not None:
            result['processQueryKey'] = self.process_query_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('flowControlledStaffIdList') is not None:
            self.flow_controlled_staff_id_list = m.get('flowControlledStaffIdList')
        if m.get('invalidStaffIdList') is not None:
            self.invalid_staff_id_list = m.get('invalidStaffIdList')
        if m.get('processQueryKey') is not None:
            self.process_query_key = m.get('processQueryKey')
        return self


class ObjectResultExBatchSendOTOResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: BatchSendOTOResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = BatchSendOTOResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExBatchSendOTOResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExBatchSendOTOResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExBatchSendOTOResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class BatchSendOTOResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExBatchSendOTOResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExBatchSendOTOResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TransferUrlToMediaIdRequest(TeaModel):
    def __init__(
        self,
        url: str = None,
    ):
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ObjectResultExStringObjectContent(TeaModel):
    def __init__(
        self,
        data: str = None,
    ):
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ObjectResultExString(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExStringObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExStringObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class TransferUrlToMediaIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExString = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExString()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryRobotPushSceneRequest(TeaModel):
    def __init__(
        self,
        robot_code: str = None,
    ):
        self.robot_code = robot_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        return self


class QueryRobotPushSceneRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryRobotPushSceneRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryRobotPushSceneRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class RobotPushSceneDTO(TeaModel):
    def __init__(
        self,
        robot_code: str = None,
        robot_name: str = None,
        scene_code: str = None,
        scene_name: str = None,
        scene_en_name: str = None,
        is_allow_unsubscribe: int = None,
        scene_order: int = None,
    ):
        self.robot_code = robot_code
        self.robot_name = robot_name
        self.scene_code = scene_code
        self.scene_name = scene_name
        self.scene_en_name = scene_en_name
        self.is_allow_unsubscribe = is_allow_unsubscribe
        self.scene_order = scene_order

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        if self.robot_name is not None:
            result['robotName'] = self.robot_name
        if self.scene_code is not None:
            result['sceneCode'] = self.scene_code
        if self.scene_name is not None:
            result['sceneName'] = self.scene_name
        if self.scene_en_name is not None:
            result['sceneEnName'] = self.scene_en_name
        if self.is_allow_unsubscribe is not None:
            result['isAllowUnsubscribe'] = self.is_allow_unsubscribe
        if self.scene_order is not None:
            result['sceneOrder'] = self.scene_order
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        if m.get('robotName') is not None:
            self.robot_name = m.get('robotName')
        if m.get('sceneCode') is not None:
            self.scene_code = m.get('sceneCode')
        if m.get('sceneName') is not None:
            self.scene_name = m.get('sceneName')
        if m.get('sceneEnName') is not None:
            self.scene_en_name = m.get('sceneEnName')
        if m.get('isAllowUnsubscribe') is not None:
            self.is_allow_unsubscribe = m.get('isAllowUnsubscribe')
        if m.get('sceneOrder') is not None:
            self.scene_order = m.get('sceneOrder')
        return self


class QueryRobotPushSceneResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        push_scenes: List[RobotPushSceneDTO] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.push_scenes = push_scenes

    def validate(self):
        if self.push_scenes:
            for k in self.push_scenes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['pushScenes'] = []
        if self.push_scenes is not None:
            for k in self.push_scenes:
                result['pushScenes'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.push_scenes = []
        if m.get('pushScenes') is not None:
            for k in m.get('pushScenes'):
                temp_model = RobotPushSceneDTO()
                self.push_scenes.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryRobotPushSceneResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryRobotPushSceneResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryRobotPushSceneResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryRobotPushSceneResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryRobotPushSceneResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryRobotPushSceneResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryRobotPushSceneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryRobotPushSceneResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryRobotPushSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryRobotUnsubscriptionRequest(TeaModel):
    def __init__(
        self,
        robot_code: str = None,
    ):
        self.robot_code = robot_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        return self


class QueryRobotUnsubscriptionRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryRobotUnsubscriptionRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryRobotUnsubscriptionRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryRobotUnsubscriptionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        unsubscribed_staff_ids: List[str] = None,
        page_no: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.unsubscribed_staff_ids = unsubscribed_staff_ids
        self.page_no = page_no
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.unsubscribed_staff_ids is not None:
            result['unsubscribedStaffIds'] = self.unsubscribed_staff_ids
        if self.page_no is not None:
            result['pageNo'] = self.page_no
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('unsubscribedStaffIds') is not None:
            self.unsubscribed_staff_ids = m.get('unsubscribedStaffIds')
        if m.get('pageNo') is not None:
            self.page_no = m.get('pageNo')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        return self


class ObjectResultExQueryRobotUnsubscriptionResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryRobotUnsubscriptionResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryRobotUnsubscriptionResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryRobotUnsubscriptionResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryRobotUnsubscriptionResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryRobotUnsubscriptionResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryRobotUnsubscriptionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryRobotUnsubscriptionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryRobotUnsubscriptionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOneKeyUnSubscribeStaffIdRequest(TeaModel):
    def __init__(
        self,
        request: QueryRobotUnsubscriptionRequest = None,
    ):
        self.request = request

    def validate(self):
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request') is not None:
            temp_model = QueryRobotUnsubscriptionRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ListResultExString(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryOneKeyUnSubscribeStaffIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListResultExString = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResultExString()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryRobotOwnerRequest(TeaModel):
    def __init__(
        self,
        robot_code: str = None,
    ):
        self.robot_code = robot_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        return self


class RobotOwnerDTO(TeaModel):
    def __init__(
        self,
        first_owner: str = None,
        owners: List[str] = None,
    ):
        self.first_owner = first_owner
        self.owners = owners

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.first_owner is not None:
            result['firstOwner'] = self.first_owner
        if self.owners is not None:
            result['owners'] = self.owners
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('firstOwner') is not None:
            self.first_owner = m.get('firstOwner')
        if m.get('owners') is not None:
            self.owners = m.get('owners')
        return self


class ObjectResultExRobotOwnerDTOObjectContent(TeaModel):
    def __init__(
        self,
        data: RobotOwnerDTO = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = RobotOwnerDTO()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExRobotOwnerDTO(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExRobotOwnerDTOObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExRobotOwnerDTOObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryRobotOwnerResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExRobotOwnerDTO = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExRobotOwnerDTO()
            self.body = temp_model.from_map(m['body'])
        return self


class UserSubscribeQryRequest(TeaModel):
    def __init__(
        self,
        work_no: str = None,
        robot_code: str = None,
    ):
        self.work_no = work_no
        self.robot_code = robot_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.work_no is not None:
            result['workNo'] = self.work_no
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workNo') is not None:
            self.work_no = m.get('workNo')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        return self


class QuerySubscribeByUserRequest(TeaModel):
    def __init__(
        self,
        request: UserSubscribeQryRequest = None,
    ):
        self.request = request

    def validate(self):
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request') is not None:
            temp_model = UserSubscribeQryRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UserSubscribeDTO(TeaModel):
    def __init__(
        self,
        one_key_status: bool = None,
        ub_subscribe_scenes: List[str] = None,
    ):
        self.one_key_status = one_key_status
        self.ub_subscribe_scenes = ub_subscribe_scenes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.one_key_status is not None:
            result['oneKeyStatus'] = self.one_key_status
        if self.ub_subscribe_scenes is not None:
            result['ubSubscribeScenes'] = self.ub_subscribe_scenes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('oneKeyStatus') is not None:
            self.one_key_status = m.get('oneKeyStatus')
        if m.get('ubSubscribeScenes') is not None:
            self.ub_subscribe_scenes = m.get('ubSubscribeScenes')
        return self


class ObjectResultExUserSubscribeDTOObjectContent(TeaModel):
    def __init__(
        self,
        data: UserSubscribeDTO = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UserSubscribeDTO()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUserSubscribeDTO(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUserSubscribeDTOObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUserSubscribeDTOObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QuerySubscribeByUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUserSubscribeDTO = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUserSubscribeDTO()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDingRobotUnSubscribeStaffIdBySceneRequest(TeaModel):
    def __init__(
        self,
        robot_code: str = None,
        scene_code: str = None,
    ):
        self.robot_code = robot_code
        self.scene_code = scene_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        if self.scene_code is not None:
            result['sceneCode'] = self.scene_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        if m.get('sceneCode') is not None:
            self.scene_code = m.get('sceneCode')
        return self


class QueryUnSubscribeStaffIdBySceneRequest(TeaModel):
    def __init__(
        self,
        request: QueryDingRobotUnSubscribeStaffIdBySceneRequest = None,
    ):
        self.request = request

    def validate(self):
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request') is not None:
            temp_model = QueryDingRobotUnSubscribeStaffIdBySceneRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryUnSubscribeStaffIdBySceneResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListResultExString = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResultExString()
            self.body = temp_model.from_map(m['body'])
        return self


class UserSubscribeRequest(TeaModel):
    def __init__(
        self,
        work_no: str = None,
        is_one_key_subscribe: bool = None,
        subscribe_or_no: bool = None,
        scene_code: str = None,
        robot_code: str = None,
        app_code: str = None,
    ):
        self.work_no = work_no
        self.is_one_key_subscribe = is_one_key_subscribe
        self.subscribe_or_no = subscribe_or_no
        self.scene_code = scene_code
        self.robot_code = robot_code
        self.app_code = app_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.work_no is not None:
            result['workNo'] = self.work_no
        if self.is_one_key_subscribe is not None:
            result['isOneKeySubscribe'] = self.is_one_key_subscribe
        if self.subscribe_or_no is not None:
            result['subscribeOrNo'] = self.subscribe_or_no
        if self.scene_code is not None:
            result['sceneCode'] = self.scene_code
        if self.robot_code is not None:
            result['robotCode'] = self.robot_code
        if self.app_code is not None:
            result['appCode'] = self.app_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workNo') is not None:
            self.work_no = m.get('workNo')
        if m.get('isOneKeySubscribe') is not None:
            self.is_one_key_subscribe = m.get('isOneKeySubscribe')
        if m.get('subscribeOrNo') is not None:
            self.subscribe_or_no = m.get('subscribeOrNo')
        if m.get('sceneCode') is not None:
            self.scene_code = m.get('sceneCode')
        if m.get('robotCode') is not None:
            self.robot_code = m.get('robotCode')
        if m.get('appCode') is not None:
            self.app_code = m.get('appCode')
        return self


class UserSubscribeRequestPrivate(TeaModel):
    def __init__(
        self,
        request: UserSubscribeRequest = None,
    ):
        self.request = request

    def validate(self):
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request') is not None:
            temp_model = UserSubscribeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ObjectResultExBooleanObjectContent(TeaModel):
    def __init__(
        self,
        data: bool = None,
    ):
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ObjectResultExBoolean(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExBooleanObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExBooleanObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UserSubscribeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExBoolean = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExBoolean()
            self.body = temp_model.from_map(m['body'])
        return self


class HelloRequest(TeaModel):
    def __init__(
        self,
        type: str = None,
        org_id: int = None,
    ):
        self.type = type
        self.org_id = org_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['type'] = self.type
        if self.org_id is not None:
            result['orgId'] = self.org_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        return self


class OneApiResultString(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class HelloResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: OneApiResultString = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OneApiResultString()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFileDownloadInfoRequestOption(TeaModel):
    def __init__(
        self,
        prefer_intranet: bool = None,
        version: int = None,
    ):
        self.prefer_intranet = prefer_intranet
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.prefer_intranet is not None:
            result['preferIntranet'] = self.prefer_intranet
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('preferIntranet') is not None:
            self.prefer_intranet = m.get('preferIntranet')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class GetFileDownloadInfoRequest(TeaModel):
    def __init__(
        self,
        space_id: str = None,
        dentry_id: str = None,
        option: GetFileDownloadInfoRequestOption = None,
    ):
        self.space_id = space_id
        self.dentry_id = dentry_id
        self.option = option

    def validate(self):
        if self.option:
            self.option.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.dentry_id is not None:
            result['dentryId'] = self.dentry_id
        if self.option is not None:
            result['option'] = self.option.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('dentryId') is not None:
            self.dentry_id = m.get('dentryId')
        if m.get('option') is not None:
            temp_model = GetFileDownloadInfoRequestOption()
            self.option = temp_model.from_map(m['option'])
        return self


class GetFileDownloadInfoRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetFileDownloadInfoRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetFileDownloadInfoRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetFileDownloadInfoResponseBodyGetFileDownloadInfoResponseBodyHeaderSignatureInfo(TeaModel):
    def __init__(
        self,
        expiration_seconds: int = None,
        headers: Dict[str, Any] = None,
        internal_resource_urls: List[str] = None,
        region: str = None,
        resource_urls: List[str] = None,
    ):
        self.expiration_seconds = expiration_seconds
        self.headers = headers
        self.internal_resource_urls = internal_resource_urls
        self.region = region
        self.resource_urls = resource_urls

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiration_seconds is not None:
            result['expirationSeconds'] = self.expiration_seconds
        if self.headers is not None:
            result['headers'] = self.headers
        if self.internal_resource_urls is not None:
            result['internalResourceUrls'] = self.internal_resource_urls
        if self.region is not None:
            result['region'] = self.region
        if self.resource_urls is not None:
            result['resourceUrls'] = self.resource_urls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expirationSeconds') is not None:
            self.expiration_seconds = m.get('expirationSeconds')
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('internalResourceUrls') is not None:
            self.internal_resource_urls = m.get('internalResourceUrls')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('resourceUrls') is not None:
            self.resource_urls = m.get('resourceUrls')
        return self


class GetFileDownloadInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        header_signature_info: GetFileDownloadInfoResponseBodyGetFileDownloadInfoResponseBodyHeaderSignatureInfo = None,
        protocol: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.header_signature_info = header_signature_info
        self.protocol = protocol

    def validate(self):
        if self.header_signature_info:
            self.header_signature_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.header_signature_info is not None:
            result['headerSignatureInfo'] = self.header_signature_info.to_map()
        if self.protocol is not None:
            result['protocol'] = self.protocol
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('headerSignatureInfo') is not None:
            temp_model = GetFileDownloadInfoResponseBodyGetFileDownloadInfoResponseBodyHeaderSignatureInfo()
            self.header_signature_info = temp_model.from_map(m['headerSignatureInfo'])
        if m.get('protocol') is not None:
            self.protocol = m.get('protocol')
        return self


class ObjectResultExGetFileDownloadInfoResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetFileDownloadInfoResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetFileDownloadInfoResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetFileDownloadInfoResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetFileDownloadInfoResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetFileDownloadInfoResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetFileDownloadInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetFileDownloadInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetFileDownloadInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDentriesRequest(TeaModel):
    def __init__(
        self,
        space_id: str = None,
        parent_id: str = None,
        max_results: int = None,
        next_token: str = None,
        order: str = None,
        order_by: str = None,
        with_thumbnail: bool = None,
    ):
        self.space_id = space_id
        self.parent_id = parent_id
        self.max_results = max_results
        self.next_token = next_token
        self.order = order
        self.order_by = order_by
        self.with_thumbnail = with_thumbnail

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.order is not None:
            result['order'] = self.order
        if self.order_by is not None:
            result['orderBy'] = self.order_by
        if self.with_thumbnail is not None:
            result['withThumbnail'] = self.with_thumbnail
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('orderBy') is not None:
            self.order_by = m.get('orderBy')
        if m.get('withThumbnail') is not None:
            self.with_thumbnail = m.get('withThumbnail')
        return self


class ListDentriesRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ListDentriesRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ListDentriesRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ListDentriesResponseBodyListDentriesResponseBodyDentriesProperties(TeaModel):
    def __init__(
        self,
        read_only: bool = None,
    ):
        self.read_only = read_only

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.read_only is not None:
            result['readOnly'] = self.read_only
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('readOnly') is not None:
            self.read_only = m.get('readOnly')
        return self


class ListDentriesResponseBodyListDentriesResponseBodyDentriesThumbnail(TeaModel):
    def __init__(
        self,
        height: int = None,
        url: str = None,
        width: int = None,
    ):
        self.height = height
        self.url = url
        self.width = width

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.height is not None:
            result['height'] = self.height
        if self.url is not None:
            result['url'] = self.url
        if self.width is not None:
            result['width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('width') is not None:
            self.width = m.get('width')
        return self


class ListDentriesResponseBodyListDentriesResponseBodyDentries(TeaModel):
    def __init__(
        self,
        app_properties: Dict[str, Any] = None,
        create_time: str = None,
        creator_id: str = None,
        extension: str = None,
        id: str = None,
        modified_time: str = None,
        modifier_id: str = None,
        name: str = None,
        parent_id: str = None,
        partition_type: str = None,
        path: str = None,
        properties: ListDentriesResponseBodyListDentriesResponseBodyDentriesProperties = None,
        size: int = None,
        space_id: str = None,
        status: str = None,
        storage_driver: str = None,
        thumbnail: ListDentriesResponseBodyListDentriesResponseBodyDentriesThumbnail = None,
        type: str = None,
        uuid: str = None,
        version: int = None,
    ):
        self.app_properties = app_properties
        self.create_time = create_time
        self.creator_id = creator_id
        self.extension = extension
        self.id = id
        self.modified_time = modified_time
        self.modifier_id = modifier_id
        self.name = name
        self.parent_id = parent_id
        self.partition_type = partition_type
        self.path = path
        self.properties = properties
        self.size = size
        self.space_id = space_id
        self.status = status
        self.storage_driver = storage_driver
        self.thumbnail = thumbnail
        self.type = type
        self.uuid = uuid
        self.version = version

    def validate(self):
        if self.properties:
            self.properties.validate()
        if self.thumbnail:
            self.thumbnail.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_properties is not None:
            result['appProperties'] = self.app_properties
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.extension is not None:
            result['extension'] = self.extension
        if self.id is not None:
            result['id'] = self.id
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['modifierId'] = self.modifier_id
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        if self.partition_type is not None:
            result['partitionType'] = self.partition_type
        if self.path is not None:
            result['path'] = self.path
        if self.properties is not None:
            result['properties'] = self.properties.to_map()
        if self.size is not None:
            result['size'] = self.size
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.status is not None:
            result['status'] = self.status
        if self.storage_driver is not None:
            result['storageDriver'] = self.storage_driver
        if self.thumbnail is not None:
            result['thumbnail'] = self.thumbnail.to_map()
        if self.type is not None:
            result['type'] = self.type
        if self.uuid is not None:
            result['uuid'] = self.uuid
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('appProperties') is not None:
            self.app_properties = m.get('appProperties')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('modifierId') is not None:
            self.modifier_id = m.get('modifierId')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        if m.get('partitionType') is not None:
            self.partition_type = m.get('partitionType')
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('properties') is not None:
            temp_model = ListDentriesResponseBodyListDentriesResponseBodyDentriesProperties()
            self.properties = temp_model.from_map(m['properties'])
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('storageDriver') is not None:
            self.storage_driver = m.get('storageDriver')
        if m.get('thumbnail') is not None:
            temp_model = ListDentriesResponseBodyListDentriesResponseBodyDentriesThumbnail()
            self.thumbnail = temp_model.from_map(m['thumbnail'])
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('uuid') is not None:
            self.uuid = m.get('uuid')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class ListDentriesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        dentries: List[ListDentriesResponseBodyListDentriesResponseBodyDentries] = None,
        next_token: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.dentries = dentries
        self.next_token = next_token

    def validate(self):
        if self.dentries:
            for k in self.dentries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['dentries'] = []
        if self.dentries is not None:
            for k in self.dentries:
                result['dentries'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.dentries = []
        if m.get('dentries') is not None:
            for k in m.get('dentries'):
                temp_model = ListDentriesResponseBodyListDentriesResponseBodyDentries()
                self.dentries.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class ObjectResultExListDentriesResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ListDentriesResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ListDentriesResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExListDentriesResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExListDentriesResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExListDentriesResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ListDentriesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExListDentriesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExListDentriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePersonalTodoTaskRequestNotifyConfigs(TeaModel):
    def __init__(
        self,
        ding_notify: str = None,
    ):
        self.ding_notify = ding_notify

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ding_notify is not None:
            result['dingNotify'] = self.ding_notify
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dingNotify') is not None:
            self.ding_notify = m.get('dingNotify')
        return self


class CreatePersonalTodoTaskRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        due_time: int = None,
        executor_ids: List[str] = None,
        notify_configs: CreatePersonalTodoTaskRequestNotifyConfigs = None,
        participant_ids: List[str] = None,
        subject: str = None,
    ):
        self.description = description
        self.due_time = due_time
        self.executor_ids = executor_ids
        self.notify_configs = notify_configs
        self.participant_ids = participant_ids
        self.subject = subject

    def validate(self):
        if self.notify_configs:
            self.notify_configs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.notify_configs is not None:
            result['notifyConfigs'] = self.notify_configs.to_map()
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.subject is not None:
            result['subject'] = self.subject
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('notifyConfigs') is not None:
            temp_model = CreatePersonalTodoTaskRequestNotifyConfigs()
            self.notify_configs = temp_model.from_map(m['notifyConfigs'])
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        return self


class CreatePersonalTodoTaskRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreatePersonalTodoTaskRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreatePersonalTodoTaskRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreatePersonalTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        created_time: int = None,
        task_id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.created_time = created_time
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.created_time is not None:
            result['createdTime'] = self.created_time
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('createdTime') is not None:
            self.created_time = m.get('createdTime')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class ObjectResultExCreatePersonalTodoTaskResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreatePersonalTodoTaskResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreatePersonalTodoTaskResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreatePersonalTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreatePersonalTodoTaskResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreatePersonalTodoTaskResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreatePersonalTodoTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreatePersonalTodoTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreatePersonalTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTodoTaskRequestContentFieldList(TeaModel):
    def __init__(
        self,
        field_key: str = None,
        field_value: str = None,
    ):
        self.field_key = field_key
        self.field_value = field_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_key is not None:
            result['fieldKey'] = self.field_key
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fieldKey') is not None:
            self.field_key = m.get('fieldKey')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class CreateTodoTaskRequestDetailUrl(TeaModel):
    def __init__(
        self,
        app_url: str = None,
        pc_url: str = None,
    ):
        self.app_url = app_url
        self.pc_url = pc_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_url is not None:
            result['appUrl'] = self.app_url
        if self.pc_url is not None:
            result['pcUrl'] = self.pc_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('appUrl') is not None:
            self.app_url = m.get('appUrl')
        if m.get('pcUrl') is not None:
            self.pc_url = m.get('pcUrl')
        return self


class CreateTodoTaskRequestNotifyConfigs(TeaModel):
    def __init__(
        self,
        ding_notify: str = None,
    ):
        self.ding_notify = ding_notify

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ding_notify is not None:
            result['dingNotify'] = self.ding_notify
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dingNotify') is not None:
            self.ding_notify = m.get('dingNotify')
        return self


class CreateTodoTaskRequest(TeaModel):
    def __init__(
        self,
        content_field_list: List[CreateTodoTaskRequestContentFieldList] = None,
        creator_id: str = None,
        description: str = None,
        detail_url: CreateTodoTaskRequestDetailUrl = None,
        due_time: int = None,
        executor_ids: List[str] = None,
        is_only_show_executor: bool = None,
        notify_configs: CreateTodoTaskRequestNotifyConfigs = None,
        participant_ids: List[str] = None,
        priority: int = None,
        source_id: str = None,
        subject: str = None,
        operator_id: str = None,
    ):
        self.content_field_list = content_field_list
        self.creator_id = creator_id
        self.description = description
        self.detail_url = detail_url
        self.due_time = due_time
        self.executor_ids = executor_ids
        self.is_only_show_executor = is_only_show_executor
        self.notify_configs = notify_configs
        self.participant_ids = participant_ids
        self.priority = priority
        self.source_id = source_id
        self.subject = subject
        self.operator_id = operator_id

    def validate(self):
        if self.content_field_list:
            for k in self.content_field_list:
                if k:
                    k.validate()
        if self.detail_url:
            self.detail_url.validate()
        if self.notify_configs:
            self.notify_configs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['contentFieldList'] = []
        if self.content_field_list is not None:
            for k in self.content_field_list:
                result['contentFieldList'].append(k.to_map() if k else None)
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.description is not None:
            result['description'] = self.description
        if self.detail_url is not None:
            result['detailUrl'] = self.detail_url.to_map()
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.is_only_show_executor is not None:
            result['isOnlyShowExecutor'] = self.is_only_show_executor
        if self.notify_configs is not None:
            result['notifyConfigs'] = self.notify_configs.to_map()
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.subject is not None:
            result['subject'] = self.subject
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content_field_list = []
        if m.get('contentFieldList') is not None:
            for k in m.get('contentFieldList'):
                temp_model = CreateTodoTaskRequestContentFieldList()
                self.content_field_list.append(temp_model.from_map(k))
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('detailUrl') is not None:
            temp_model = CreateTodoTaskRequestDetailUrl()
            self.detail_url = temp_model.from_map(m['detailUrl'])
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('isOnlyShowExecutor') is not None:
            self.is_only_show_executor = m.get('isOnlyShowExecutor')
        if m.get('notifyConfigs') is not None:
            temp_model = CreateTodoTaskRequestNotifyConfigs()
            self.notify_configs = temp_model.from_map(m['notifyConfigs'])
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        return self


class CreateTodoTaskRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateTodoTaskRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateTodoTaskRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyContentFieldList(TeaModel):
    def __init__(
        self,
        field_key: str = None,
        field_value: str = None,
    ):
        self.field_key = field_key
        self.field_value = field_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_key is not None:
            result['fieldKey'] = self.field_key
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fieldKey') is not None:
            self.field_key = m.get('fieldKey')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyDetailUrl(TeaModel):
    def __init__(
        self,
        app_url: str = None,
        pc_url: str = None,
    ):
        self.app_url = app_url
        self.pc_url = pc_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_url is not None:
            result['appUrl'] = self.app_url
        if self.pc_url is not None:
            result['pcUrl'] = self.pc_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('appUrl') is not None:
            self.app_url = m.get('appUrl')
        if m.get('pcUrl') is not None:
            self.pc_url = m.get('pcUrl')
        return self


class CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyNotifyConfigs(TeaModel):
    def __init__(
        self,
        ding_notify: str = None,
    ):
        self.ding_notify = ding_notify

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ding_notify is not None:
            result['dingNotify'] = self.ding_notify
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dingNotify') is not None:
            self.ding_notify = m.get('dingNotify')
        return self


class CreateTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        biz_tag: str = None,
        content_field_list: List[CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyContentFieldList] = None,
        created_time: int = None,
        creator_id: str = None,
        description: str = None,
        detail_url: CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyDetailUrl = None,
        done: bool = None,
        due_time: int = None,
        executor_ids: List[str] = None,
        finish_time: int = None,
        id: str = None,
        is_only_show_executor: bool = None,
        modified_time: int = None,
        modifier_id: str = None,
        notify_configs: CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyNotifyConfigs = None,
        participant_ids: List[str] = None,
        priority: int = None,
        source: str = None,
        source_id: str = None,
        start_time: int = None,
        subject: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.biz_tag = biz_tag
        self.content_field_list = content_field_list
        self.created_time = created_time
        self.creator_id = creator_id
        self.description = description
        self.detail_url = detail_url
        self.done = done
        self.due_time = due_time
        self.executor_ids = executor_ids
        self.finish_time = finish_time
        self.id = id
        self.is_only_show_executor = is_only_show_executor
        self.modified_time = modified_time
        self.modifier_id = modifier_id
        self.notify_configs = notify_configs
        self.participant_ids = participant_ids
        self.priority = priority
        self.source = source
        self.source_id = source_id
        self.start_time = start_time
        self.subject = subject

    def validate(self):
        if self.content_field_list:
            for k in self.content_field_list:
                if k:
                    k.validate()
        if self.detail_url:
            self.detail_url.validate()
        if self.notify_configs:
            self.notify_configs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.biz_tag is not None:
            result['bizTag'] = self.biz_tag
        result['contentFieldList'] = []
        if self.content_field_list is not None:
            for k in self.content_field_list:
                result['contentFieldList'].append(k.to_map() if k else None)
        if self.created_time is not None:
            result['createdTime'] = self.created_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.description is not None:
            result['description'] = self.description
        if self.detail_url is not None:
            result['detailUrl'] = self.detail_url.to_map()
        if self.done is not None:
            result['done'] = self.done
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.finish_time is not None:
            result['finishTime'] = self.finish_time
        if self.id is not None:
            result['id'] = self.id
        if self.is_only_show_executor is not None:
            result['isOnlyShowExecutor'] = self.is_only_show_executor
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['modifierId'] = self.modifier_id
        if self.notify_configs is not None:
            result['notifyConfigs'] = self.notify_configs.to_map()
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source is not None:
            result['source'] = self.source
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.subject is not None:
            result['subject'] = self.subject
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('bizTag') is not None:
            self.biz_tag = m.get('bizTag')
        self.content_field_list = []
        if m.get('contentFieldList') is not None:
            for k in m.get('contentFieldList'):
                temp_model = CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyContentFieldList()
                self.content_field_list.append(temp_model.from_map(k))
        if m.get('createdTime') is not None:
            self.created_time = m.get('createdTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('detailUrl') is not None:
            temp_model = CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyDetailUrl()
            self.detail_url = temp_model.from_map(m['detailUrl'])
        if m.get('done') is not None:
            self.done = m.get('done')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('finishTime') is not None:
            self.finish_time = m.get('finishTime')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOnlyShowExecutor') is not None:
            self.is_only_show_executor = m.get('isOnlyShowExecutor')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('modifierId') is not None:
            self.modifier_id = m.get('modifierId')
        if m.get('notifyConfigs') is not None:
            temp_model = CreateTodoTaskResponseBodyCreateTodoTaskResponseBodyNotifyConfigs()
            self.notify_configs = temp_model.from_map(m['notifyConfigs'])
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        return self


class ObjectResultExCreateTodoTaskResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateTodoTaskResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateTodoTaskResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateTodoTaskResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateTodoTaskResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateTodoTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateTodoTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteTodoTaskRequest(TeaModel):
    def __init__(
        self,
        operator_id: str = None,
        task_id: str = None,
    ):
        self.operator_id = operator_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class DeleteTodoTaskRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteTodoTaskRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteTodoTaskRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExDeleteTodoTaskResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteTodoTaskResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteTodoTaskResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteTodoTaskResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteTodoTaskResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteTodoTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteTodoTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOrgTodoTasksRequest(TeaModel):
    def __init__(
        self,
        is_done: bool = None,
        next_token: str = None,
    ):
        self.is_done = is_done
        self.next_token = next_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_done is not None:
            result['isDone'] = self.is_done
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class QueryOrgTodoTasksRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: QueryOrgTodoTasksRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = QueryOrgTodoTasksRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class QueryOrgTodoTasksResponseBodyQueryOrgTodoTasksResponseBodyTodoCardsDetailUrl(TeaModel):
    def __init__(
        self,
        app_url: str = None,
        pc_url: str = None,
    ):
        self.app_url = app_url
        self.pc_url = pc_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_url is not None:
            result['appUrl'] = self.app_url
        if self.pc_url is not None:
            result['pcUrl'] = self.pc_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('appUrl') is not None:
            self.app_url = m.get('appUrl')
        if m.get('pcUrl') is not None:
            self.pc_url = m.get('pcUrl')
        return self


class QueryOrgTodoTasksResponseBodyQueryOrgTodoTasksResponseBodyTodoCards(TeaModel):
    def __init__(
        self,
        biz_tag: str = None,
        created_time: int = None,
        creator_id: str = None,
        detail_url: QueryOrgTodoTasksResponseBodyQueryOrgTodoTasksResponseBodyTodoCardsDetailUrl = None,
        due_time: int = None,
        is_done: bool = None,
        modified_time: int = None,
        priority: int = None,
        source_id: str = None,
        subject: str = None,
        task_id: str = None,
    ):
        self.biz_tag = biz_tag
        self.created_time = created_time
        self.creator_id = creator_id
        self.detail_url = detail_url
        self.due_time = due_time
        self.is_done = is_done
        self.modified_time = modified_time
        self.priority = priority
        self.source_id = source_id
        self.subject = subject
        self.task_id = task_id

    def validate(self):
        if self.detail_url:
            self.detail_url.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_tag is not None:
            result['bizTag'] = self.biz_tag
        if self.created_time is not None:
            result['createdTime'] = self.created_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.detail_url is not None:
            result['detailUrl'] = self.detail_url.to_map()
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.is_done is not None:
            result['isDone'] = self.is_done
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.subject is not None:
            result['subject'] = self.subject
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizTag') is not None:
            self.biz_tag = m.get('bizTag')
        if m.get('createdTime') is not None:
            self.created_time = m.get('createdTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('detailUrl') is not None:
            temp_model = QueryOrgTodoTasksResponseBodyQueryOrgTodoTasksResponseBodyTodoCardsDetailUrl()
            self.detail_url = temp_model.from_map(m['detailUrl'])
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class QueryOrgTodoTasksResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        next_token: str = None,
        todo_cards: List[QueryOrgTodoTasksResponseBodyQueryOrgTodoTasksResponseBodyTodoCards] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.next_token = next_token
        self.todo_cards = todo_cards

    def validate(self):
        if self.todo_cards:
            for k in self.todo_cards:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['todoCards'] = []
        if self.todo_cards is not None:
            for k in self.todo_cards:
                result['todoCards'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.todo_cards = []
        if m.get('todoCards') is not None:
            for k in m.get('todoCards'):
                temp_model = QueryOrgTodoTasksResponseBodyQueryOrgTodoTasksResponseBodyTodoCards()
                self.todo_cards.append(temp_model.from_map(k))
        return self


class ObjectResultExQueryOrgTodoTasksResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: QueryOrgTodoTasksResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = QueryOrgTodoTasksResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExQueryOrgTodoTasksResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExQueryOrgTodoTasksResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExQueryOrgTodoTasksResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class QueryOrgTodoTasksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExQueryOrgTodoTasksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExQueryOrgTodoTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateTodoTaskRequest(TeaModel):
    def __init__(
        self,
        task_id: str = None,
        description: str = None,
        done: bool = None,
        due_time: int = None,
        executor_ids: List[str] = None,
        participant_ids: List[str] = None,
        subject: str = None,
    ):
        self.task_id = task_id
        self.description = description
        self.done = done
        self.due_time = due_time
        self.executor_ids = executor_ids
        self.participant_ids = participant_ids
        self.subject = subject

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.description is not None:
            result['description'] = self.description
        if self.done is not None:
            result['done'] = self.done
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.subject is not None:
            result['subject'] = self.subject
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('done') is not None:
            self.done = m.get('done')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        return self


class UpdateTodoTaskRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateTodoTaskRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateTodoTaskRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExUpdateTodoTaskResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateTodoTaskResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateTodoTaskResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateTodoTaskResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateTodoTaskResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateTodoTaskResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateTodoTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateTodoTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateTodoTaskExecutorStatusRequestExecutorStatusList(TeaModel):
    def __init__(
        self,
        id: str = None,
        is_done: bool = None,
    ):
        self.id = id
        self.is_done = is_done

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_done is not None:
            result['isDone'] = self.is_done
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        return self


class UpdateTodoTaskExecutorStatusRequest(TeaModel):
    def __init__(
        self,
        task_id: str = None,
        executor_status_list: List[UpdateTodoTaskExecutorStatusRequestExecutorStatusList] = None,
        operator_id: str = None,
    ):
        self.task_id = task_id
        self.executor_status_list = executor_status_list
        self.operator_id = operator_id

    def validate(self):
        if self.executor_status_list:
            for k in self.executor_status_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_id is not None:
            result['taskId'] = self.task_id
        result['executorStatusList'] = []
        if self.executor_status_list is not None:
            for k in self.executor_status_list:
                result['executorStatusList'].append(k.to_map() if k else None)
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        self.executor_status_list = []
        if m.get('executorStatusList') is not None:
            for k in m.get('executorStatusList'):
                temp_model = UpdateTodoTaskExecutorStatusRequestExecutorStatusList()
                self.executor_status_list.append(temp_model.from_map(k))
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        return self


class UpdateTodoTaskExecutorStatusRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateTodoTaskExecutorStatusRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateTodoTaskExecutorStatusRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateTodoTaskExecutorStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ObjectResultExUpdateTodoTaskExecutorStatusResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateTodoTaskExecutorStatusResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateTodoTaskExecutorStatusResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateTodoTaskExecutorStatusResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateTodoTaskExecutorStatusResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateTodoTaskExecutorStatusResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateTodoTaskExecutorStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateTodoTaskExecutorStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateTodoTaskExecutorStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ClearRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        range_address: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.range_address = range_address

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.range_address is not None:
            result['rangeAddress'] = self.range_address
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('rangeAddress') is not None:
            self.range_address = m.get('rangeAddress')
        return self


class ClearRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ClearRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ClearRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ClearResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        a_1notation: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.a_1notation = a_1notation

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.a_1notation is not None:
            result['a1Notation'] = self.a_1notation
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('a1Notation') is not None:
            self.a_1notation = m.get('a1Notation')
        return self


class ObjectResultExClearResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ClearResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ClearResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExClearResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExClearResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExClearResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ClearResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExClearResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExClearResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ClearDataRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        range_address: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.range_address = range_address

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.range_address is not None:
            result['rangeAddress'] = self.range_address
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('rangeAddress') is not None:
            self.range_address = m.get('rangeAddress')
        return self


class ClearDataRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: ClearDataRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = ClearDataRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class ClearDataResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        a_1notation: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.a_1notation = a_1notation

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.a_1notation is not None:
            result['a1Notation'] = self.a_1notation
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('a1Notation') is not None:
            self.a_1notation = m.get('a1Notation')
        return self


class ObjectResultExClearDataResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: ClearDataResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = ClearDataResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExClearDataResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExClearDataResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExClearDataResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class ClearDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExClearDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExClearDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSheetRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        name: str = None,
    ):
        self.workbook_id = workbook_id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class CreateSheetRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: CreateSheetRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = CreateSheetRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class CreateSheetResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
        name: str = None,
        visibility: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id
        self.name = name
        self.visibility = visibility

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.visibility is not None:
            result['visibility'] = self.visibility
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('visibility') is not None:
            self.visibility = m.get('visibility')
        return self


class ObjectResultExCreateSheetResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: CreateSheetResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = CreateSheetResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExCreateSheetResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExCreateSheetResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExCreateSheetResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class CreateSheetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExCreateSheetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExCreateSheetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteColumnsRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        column: int = None,
        column_count: int = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.column = column
        self.column_count = column_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.column is not None:
            result['column'] = self.column
        if self.column_count is not None:
            result['columnCount'] = self.column_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('column') is not None:
            self.column = m.get('column')
        if m.get('columnCount') is not None:
            self.column_count = m.get('columnCount')
        return self


class DeleteColumnsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteColumnsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteColumnsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteColumnsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ObjectResultExDeleteColumnsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteColumnsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteColumnsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteColumnsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteColumnsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteColumnsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteColumnsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteColumnsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteColumnsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteRowsRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        row: int = None,
        row_count: int = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.row = row
        self.row_count = row_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.row is not None:
            result['row'] = self.row
        if self.row_count is not None:
            result['rowCount'] = self.row_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('row') is not None:
            self.row = m.get('row')
        if m.get('rowCount') is not None:
            self.row_count = m.get('rowCount')
        return self


class DeleteRowsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteRowsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteRowsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteRowsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ObjectResultExDeleteRowsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteRowsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteRowsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteRowsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteRowsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteRowsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteRowsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteRowsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteRowsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSheetRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        return self


class DeleteSheetRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: DeleteSheetRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = DeleteSheetRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class DeleteSheetResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ObjectResultExDeleteSheetResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: DeleteSheetResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = DeleteSheetResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExDeleteSheetResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExDeleteSheetResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExDeleteSheetResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class DeleteSheetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExDeleteSheetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExDeleteSheetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAllSheetsRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
    ):
        self.workbook_id = workbook_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        return self


class GetAllSheetsRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetAllSheetsRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetAllSheetsRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetAllSheetsResponseBodyGetAllSheetsResponseBodyValue(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
    ):
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class GetAllSheetsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        value: List[GetAllSheetsResponseBodyGetAllSheetsResponseBodyValue] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.value = value

    def validate(self):
        if self.value:
            for k in self.value:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['value'] = []
        if self.value is not None:
            for k in self.value:
                result['value'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.value = []
        if m.get('value') is not None:
            for k in m.get('value'):
                temp_model = GetAllSheetsResponseBodyGetAllSheetsResponseBodyValue()
                self.value.append(temp_model.from_map(k))
        return self


class ObjectResultExGetAllSheetsResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetAllSheetsResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetAllSheetsResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetAllSheetsResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetAllSheetsResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetAllSheetsResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetAllSheetsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetAllSheetsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetAllSheetsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRangeRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        range_address: str = None,
        select: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.range_address = range_address
        self.select = select

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.range_address is not None:
            result['rangeAddress'] = self.range_address
        if self.select is not None:
            result['select'] = self.select
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('rangeAddress') is not None:
            self.range_address = m.get('rangeAddress')
        if m.get('select') is not None:
            self.select = m.get('select')
        return self


class GetRangeRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetRangeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetRangeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetRangeResponseBodyGetRangeResponseBodyBackgroundColors(TeaModel):
    def __init__(
        self,
        red: int = None,
        green: int = None,
        blue: int = None,
        hex_string: str = None,
    ):
        self.red = red
        self.green = green
        self.blue = blue
        self.hex_string = hex_string

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.red is not None:
            result['red'] = self.red
        if self.green is not None:
            result['green'] = self.green
        if self.blue is not None:
            result['blue'] = self.blue
        if self.hex_string is not None:
            result['hexString'] = self.hex_string
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('red') is not None:
            self.red = m.get('red')
        if m.get('green') is not None:
            self.green = m.get('green')
        if m.get('blue') is not None:
            self.blue = m.get('blue')
        if m.get('hexString') is not None:
            self.hex_string = m.get('hexString')
        return self


class GetRangeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        background_colors: List[List[GetRangeResponseBodyGetRangeResponseBodyBackgroundColors]] = None,
        display_values: List[List[str]] = None,
        formulas: List[List[str]] = None,
        values: List[Any] = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.background_colors = background_colors
        self.display_values = display_values
        self.formulas = formulas
        self.values = values

    def validate(self):
        if self.background_colors:
            for k in self.background_colors:
                for k1 in k:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        result['backgroundColors'] = []
        if self.background_colors is not None:
            for k in self.background_colors:
                l1 = []
                for k1 in k:
                    l1.append(k1.to_map() if k1 else None)
                result['backgroundColors'].append(l1)
        if self.display_values is not None:
            result['displayValues'] = self.display_values
        if self.formulas is not None:
            result['formulas'] = self.formulas
        if self.values is not None:
            result['values'] = self.values
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        self.background_colors = []
        if m.get('backgroundColors') is not None:
            for k in m.get('backgroundColors'):
                l1 = []
                for k1 in k:
                    temp_model = GetRangeResponseBodyGetRangeResponseBodyBackgroundColors()
                    l1.append(temp_model.from_map(k1))
                self.background_colors.append(l1)
        if m.get('displayValues') is not None:
            self.display_values = m.get('displayValues')
        if m.get('formulas') is not None:
            self.formulas = m.get('formulas')
        if m.get('values') is not None:
            self.values = m.get('values')
        return self


class ObjectResultExGetRangeResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetRangeResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetRangeResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetRangeResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetRangeResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetRangeResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetRangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetRangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSheetRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        return self


class GetSheetRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: GetSheetRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = GetSheetRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class GetSheetResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        column_count: int = None,
        id: str = None,
        last_non_empty_column: int = None,
        last_non_empty_row: int = None,
        name: str = None,
        row_count: int = None,
        visibility: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.column_count = column_count
        self.id = id
        self.last_non_empty_column = last_non_empty_column
        self.last_non_empty_row = last_non_empty_row
        self.name = name
        self.row_count = row_count
        self.visibility = visibility

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.column_count is not None:
            result['columnCount'] = self.column_count
        if self.id is not None:
            result['id'] = self.id
        if self.last_non_empty_column is not None:
            result['lastNonEmptyColumn'] = self.last_non_empty_column
        if self.last_non_empty_row is not None:
            result['lastNonEmptyRow'] = self.last_non_empty_row
        if self.name is not None:
            result['name'] = self.name
        if self.row_count is not None:
            result['rowCount'] = self.row_count
        if self.visibility is not None:
            result['visibility'] = self.visibility
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('columnCount') is not None:
            self.column_count = m.get('columnCount')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('lastNonEmptyColumn') is not None:
            self.last_non_empty_column = m.get('lastNonEmptyColumn')
        if m.get('lastNonEmptyRow') is not None:
            self.last_non_empty_row = m.get('lastNonEmptyRow')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('rowCount') is not None:
            self.row_count = m.get('rowCount')
        if m.get('visibility') is not None:
            self.visibility = m.get('visibility')
        return self


class ObjectResultExGetSheetResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: GetSheetResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = GetSheetResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExGetSheetResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExGetSheetResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExGetSheetResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class GetSheetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExGetSheetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExGetSheetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsertColumnsBeforeRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        column: int = None,
        column_count: int = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.column = column
        self.column_count = column_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.column is not None:
            result['column'] = self.column
        if self.column_count is not None:
            result['columnCount'] = self.column_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('column') is not None:
            self.column = m.get('column')
        if m.get('columnCount') is not None:
            self.column_count = m.get('columnCount')
        return self


class InsertColumnsBeforeRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: InsertColumnsBeforeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = InsertColumnsBeforeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class InsertColumnsBeforeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ObjectResultExInsertColumnsBeforeResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: InsertColumnsBeforeResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = InsertColumnsBeforeResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExInsertColumnsBeforeResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExInsertColumnsBeforeResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExInsertColumnsBeforeResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class InsertColumnsBeforeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExInsertColumnsBeforeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExInsertColumnsBeforeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsertRowsBeforeRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        row: int = None,
        row_count: int = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.row = row
        self.row_count = row_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.row is not None:
            result['row'] = self.row
        if self.row_count is not None:
            result['rowCount'] = self.row_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('row') is not None:
            self.row = m.get('row')
        if m.get('rowCount') is not None:
            self.row_count = m.get('rowCount')
        return self


class InsertRowsBeforeRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: InsertRowsBeforeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = InsertRowsBeforeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class InsertRowsBeforeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ObjectResultExInsertRowsBeforeResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: InsertRowsBeforeResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = InsertRowsBeforeResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExInsertRowsBeforeResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExInsertRowsBeforeResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExInsertRowsBeforeResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class InsertRowsBeforeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExInsertRowsBeforeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExInsertRowsBeforeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SetColumnsVisibilityRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        column: int = None,
        column_count: int = None,
        visibility: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.column = column
        self.column_count = column_count
        self.visibility = visibility

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.column is not None:
            result['column'] = self.column
        if self.column_count is not None:
            result['columnCount'] = self.column_count
        if self.visibility is not None:
            result['visibility'] = self.visibility
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('column') is not None:
            self.column = m.get('column')
        if m.get('columnCount') is not None:
            self.column_count = m.get('columnCount')
        if m.get('visibility') is not None:
            self.visibility = m.get('visibility')
        return self


class SetColumnsVisibilityRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SetColumnsVisibilityRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SetColumnsVisibilityRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SetColumnsVisibilityResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ObjectResultExSetColumnsVisibilityResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SetColumnsVisibilityResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SetColumnsVisibilityResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSetColumnsVisibilityResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSetColumnsVisibilityResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSetColumnsVisibilityResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SetColumnsVisibilityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSetColumnsVisibilityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSetColumnsVisibilityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SetRowsVisibilityRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        row: int = None,
        row_count: int = None,
        visibility: str = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.row = row
        self.row_count = row_count
        self.visibility = visibility

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.row is not None:
            result['row'] = self.row
        if self.row_count is not None:
            result['rowCount'] = self.row_count
        if self.visibility is not None:
            result['visibility'] = self.visibility
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('row') is not None:
            self.row = m.get('row')
        if m.get('rowCount') is not None:
            self.row_count = m.get('rowCount')
        if m.get('visibility') is not None:
            self.visibility = m.get('visibility')
        return self


class SetRowsVisibilityRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: SetRowsVisibilityRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = SetRowsVisibilityRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class SetRowsVisibilityResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        id: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ObjectResultExSetRowsVisibilityResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: SetRowsVisibilityResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = SetRowsVisibilityResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExSetRowsVisibilityResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExSetRowsVisibilityResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExSetRowsVisibilityResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class SetRowsVisibilityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExSetRowsVisibilityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExSetRowsVisibilityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateRangeRequestHyperlinks(TeaModel):
    def __init__(
        self,
        type: str = None,
        link: str = None,
        text: str = None,
    ):
        self.type = type
        self.link = link
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['type'] = self.type
        if self.link is not None:
            result['link'] = self.link
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('link') is not None:
            self.link = m.get('link')
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class UpdateRangeRequest(TeaModel):
    def __init__(
        self,
        workbook_id: str = None,
        sheet_id: str = None,
        range_address: str = None,
        background_colors: List[List[str]] = None,
        hyperlinks: List[List[UpdateRangeRequestHyperlinks]] = None,
        number_format: str = None,
        values: List[List[str]] = None,
    ):
        self.workbook_id = workbook_id
        self.sheet_id = sheet_id
        self.range_address = range_address
        self.background_colors = background_colors
        self.hyperlinks = hyperlinks
        self.number_format = number_format
        self.values = values

    def validate(self):
        if self.hyperlinks:
            for k in self.hyperlinks:
                for k1 in k:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.workbook_id is not None:
            result['workbookId'] = self.workbook_id
        if self.sheet_id is not None:
            result['sheetId'] = self.sheet_id
        if self.range_address is not None:
            result['rangeAddress'] = self.range_address
        if self.background_colors is not None:
            result['backgroundColors'] = self.background_colors
        result['hyperlinks'] = []
        if self.hyperlinks is not None:
            for k in self.hyperlinks:
                l1 = []
                for k1 in k:
                    l1.append(k1.to_map() if k1 else None)
                result['hyperlinks'].append(l1)
        if self.number_format is not None:
            result['numberFormat'] = self.number_format
        if self.values is not None:
            result['values'] = self.values
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workbookId') is not None:
            self.workbook_id = m.get('workbookId')
        if m.get('sheetId') is not None:
            self.sheet_id = m.get('sheetId')
        if m.get('rangeAddress') is not None:
            self.range_address = m.get('rangeAddress')
        if m.get('backgroundColors') is not None:
            self.background_colors = m.get('backgroundColors')
        self.hyperlinks = []
        if m.get('hyperlinks') is not None:
            for k in m.get('hyperlinks'):
                l1 = []
                for k1 in k:
                    temp_model = UpdateRangeRequestHyperlinks()
                    l1.append(temp_model.from_map(k1))
                self.hyperlinks.append(l1)
        if m.get('numberFormat') is not None:
            self.number_format = m.get('numberFormat')
        if m.get('values') is not None:
            self.values = m.get('values')
        return self


class UpdateRangeRequestPrivate(TeaModel):
    def __init__(
        self,
        gateway_context: GatewayContext = None,
        request: UpdateRangeRequest = None,
    ):
        self.gateway_context = gateway_context
        self.request = request

    def validate(self):
        if self.gateway_context:
            self.gateway_context.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gateway_context is not None:
            result['gatewayContext'] = self.gateway_context.to_map()
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gatewayContext') is not None:
            temp_model = GatewayContext()
            self.gateway_context = temp_model.from_map(m['gatewayContext'])
        if m.get('request') is not None:
            temp_model = UpdateRangeRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class UpdateRangeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        vendor_request_id: str = None,
        vendor_type: str = None,
        a_1notation: str = None,
    ):
        self.request_id = request_id
        self.vendor_request_id = vendor_request_id
        self.vendor_type = vendor_type
        self.a_1notation = a_1notation

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.a_1notation is not None:
            result['a1Notation'] = self.a_1notation
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('a1Notation') is not None:
            self.a_1notation = m.get('a1Notation')
        return self


class ObjectResultExUpdateRangeResponseBodyObjectContent(TeaModel):
    def __init__(
        self,
        data: UpdateRangeResponseBody = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            temp_model = UpdateRangeResponseBody()
            self.data = temp_model.from_map(m['data'])
        return self


class ObjectResultExUpdateRangeResponseBody(TeaModel):
    def __init__(
        self,
        success: bool = None,
        request_id: str = None,
        error_code: str = None,
        error_msg: str = None,
        http_status_code: int = None,
        content: ObjectResultExUpdateRangeResponseBodyObjectContent = None,
        error_ctx: Dict[str, Any] = None,
    ):
        self.success = success
        self.request_id = request_id
        self.error_code = error_code
        self.error_msg = error_msg
        self.http_status_code = http_status_code
        self.content = content
        self.error_ctx = error_ctx

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('content') is not None:
            temp_model = ObjectResultExUpdateRangeResponseBodyObjectContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        return self


class UpdateRangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ObjectResultExUpdateRangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ObjectResultExUpdateRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


