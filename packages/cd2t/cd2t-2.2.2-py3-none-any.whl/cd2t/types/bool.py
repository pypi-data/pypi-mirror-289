"""
Bool Data Type Class
"""

from cd2t.errors import SchemaError
from cd2t.results import AutogenerationInfo, FindingsList, ValidationFinding
from cd2t.run_time_env import RunTimeEnv
import cd2t.types.base


class Bool(cd2t.types.base.BaseDataType):
    customizable = True
    data_type_name = "bool"
    matching_classes = [bool]
    options = cd2t.types.base.BaseDataType.options + [
        # option_name, required, class
        ("autogenerate", False, bool, False),
        ("autogenerate_default", False, bool, None),
        ("allowed_value", False, bool, None),
    ]

    def __init__(self) -> None:
        super().__init__()
        self.autogenerate = False
        self.autogenerate_default = None
        self.allowed_value = None

    def verify_options(self, path: str):
        if self.autogenerate:
            if self.autogenerate_default is None:
                raise SchemaError(
                    "Option required, if autogenerate is enabled",
                    path + "autogenerate_default",
                )
            if (
                self.allowed_value is not None
                and self.autogenerate_default != self.allowed_value
            ):
                raise SchemaError(
                    "must be equal to 'allowed_value'", path + "autogenerate_default"
                )
        super().verify_options(path)

    def verify_data(self, data: any, path: str, RTE: RunTimeEnv) -> FindingsList:
        findings = FindingsList()
        if self.allowed_value is not None and data != self.allowed_value:
            findings.append(
                ValidationFinding(path=path, message="Value is not allowed")
            )
        return findings

    def autogenerate_data(self, data: any, path: str, RTE: RunTimeEnv):
        findings = FindingsList()
        if data is not None or not self.autogenerate:
            return data, findings
        new_value = self.autogenerate_default
        findings.append(
            AutogenerationInfo(path=path, message=f"Autogenerated value is {new_value}")
        )
        return new_value, findings
