# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'continent': 'str',
        'coordinates': 'object',
        'country_code': 'str',
        'country_name': 'str',
        'geo_point': 'str',
        'locale_code': 'str',
        'network': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'city': 'city',
        'continent': 'continent',
        'coordinates': 'coordinates',
        'country_code': 'country_code',
        'country_name': 'country_name',
        'geo_point': 'geo_point',
        'locale_code': 'locale_code',
        'network': 'network',
        'postal_code': 'postal_code'
    }

    def __init__(self, city=None, continent=None, coordinates=None, country_code=None, country_name=None, geo_point=None, locale_code=None, network=None, postal_code=None):  # noqa: E501
        """IPLocation - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._continent = None
        self._coordinates = None
        self._country_code = None
        self._country_name = None
        self._geo_point = None
        self._locale_code = None
        self._network = None
        self._postal_code = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if continent is not None:
            self.continent = continent
        if coordinates is not None:
            self.coordinates = coordinates
        if country_code is not None:
            self.country_code = country_code
        if country_name is not None:
            self.country_name = country_name
        if geo_point is not None:
            self.geo_point = geo_point
        if locale_code is not None:
            self.locale_code = locale_code
        if network is not None:
            self.network = network
        if postal_code is not None:
            self.postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this IPLocation.  # noqa: E501


        :return: The city of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IPLocation.


        :param city: The city of this IPLocation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def continent(self):
        """Gets the continent of this IPLocation.  # noqa: E501


        :return: The continent of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this IPLocation.


        :param continent: The continent of this IPLocation.  # noqa: E501
        :type: str
        """

        self._continent = continent

    @property
    def coordinates(self):
        """Gets the coordinates of this IPLocation.  # noqa: E501


        :return: The coordinates of this IPLocation.  # noqa: E501
        :rtype: object
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this IPLocation.


        :param coordinates: The coordinates of this IPLocation.  # noqa: E501
        :type: object
        """

        self._coordinates = coordinates

    @property
    def country_code(self):
        """Gets the country_code of this IPLocation.  # noqa: E501


        :return: The country_code of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this IPLocation.


        :param country_code: The country_code of this IPLocation.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this IPLocation.  # noqa: E501


        :return: The country_name of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this IPLocation.


        :param country_name: The country_name of this IPLocation.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def geo_point(self):
        """Gets the geo_point of this IPLocation.  # noqa: E501


        :return: The geo_point of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._geo_point

    @geo_point.setter
    def geo_point(self, geo_point):
        """Sets the geo_point of this IPLocation.


        :param geo_point: The geo_point of this IPLocation.  # noqa: E501
        :type: str
        """

        self._geo_point = geo_point

    @property
    def locale_code(self):
        """Gets the locale_code of this IPLocation.  # noqa: E501


        :return: The locale_code of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._locale_code

    @locale_code.setter
    def locale_code(self, locale_code):
        """Sets the locale_code of this IPLocation.


        :param locale_code: The locale_code of this IPLocation.  # noqa: E501
        :type: str
        """

        self._locale_code = locale_code

    @property
    def network(self):
        """Gets the network of this IPLocation.  # noqa: E501


        :return: The network of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IPLocation.


        :param network: The network of this IPLocation.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def postal_code(self):
        """Gets the postal_code of this IPLocation.  # noqa: E501


        :return: The postal_code of this IPLocation.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this IPLocation.


        :param postal_code: The postal_code of this IPLocation.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
