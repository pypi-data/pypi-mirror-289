# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateCertificateSearchData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fingerprint_md5': 'str',
        'fingerprint_sha1': 'str',
        'fingerprint_sha256': 'str',
        'issuer': 'CertificateCertificateHashResponseDataCertificateIssuer',
        'subject': 'CertificateCertificateHashResponseDataCertificateSubject',
        'subject_alt_name': 'CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName',
        'tags': 'list[str]',
        'validity': 'CertificateCertificateHashResponseDataCertificateValidity'
    }

    attribute_map = {
        'fingerprint_md5': 'fingerprint_md5',
        'fingerprint_sha1': 'fingerprint_sha1',
        'fingerprint_sha256': 'fingerprint_sha256',
        'issuer': 'issuer',
        'subject': 'subject',
        'subject_alt_name': 'subject_alt_name',
        'tags': 'tags',
        'validity': 'validity'
    }

    def __init__(self, fingerprint_md5=None, fingerprint_sha1=None, fingerprint_sha256=None, issuer=None, subject=None, subject_alt_name=None, tags=None, validity=None):  # noqa: E501
        """CertificateCertificateSearchData - a model defined in Swagger"""  # noqa: E501
        self._fingerprint_md5 = None
        self._fingerprint_sha1 = None
        self._fingerprint_sha256 = None
        self._issuer = None
        self._subject = None
        self._subject_alt_name = None
        self._tags = None
        self._validity = None
        self.discriminator = None
        if fingerprint_md5 is not None:
            self.fingerprint_md5 = fingerprint_md5
        if fingerprint_sha1 is not None:
            self.fingerprint_sha1 = fingerprint_sha1
        if fingerprint_sha256 is not None:
            self.fingerprint_sha256 = fingerprint_sha256
        if issuer is not None:
            self.issuer = issuer
        if subject is not None:
            self.subject = subject
        if subject_alt_name is not None:
            self.subject_alt_name = subject_alt_name
        if tags is not None:
            self.tags = tags
        if validity is not None:
            self.validity = validity

    @property
    def fingerprint_md5(self):
        """Gets the fingerprint_md5 of this CertificateCertificateSearchData.  # noqa: E501


        :return: The fingerprint_md5 of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint_md5

    @fingerprint_md5.setter
    def fingerprint_md5(self, fingerprint_md5):
        """Sets the fingerprint_md5 of this CertificateCertificateSearchData.


        :param fingerprint_md5: The fingerprint_md5 of this CertificateCertificateSearchData.  # noqa: E501
        :type: str
        """

        self._fingerprint_md5 = fingerprint_md5

    @property
    def fingerprint_sha1(self):
        """Gets the fingerprint_sha1 of this CertificateCertificateSearchData.  # noqa: E501


        :return: The fingerprint_sha1 of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint_sha1

    @fingerprint_sha1.setter
    def fingerprint_sha1(self, fingerprint_sha1):
        """Sets the fingerprint_sha1 of this CertificateCertificateSearchData.


        :param fingerprint_sha1: The fingerprint_sha1 of this CertificateCertificateSearchData.  # noqa: E501
        :type: str
        """

        self._fingerprint_sha1 = fingerprint_sha1

    @property
    def fingerprint_sha256(self):
        """Gets the fingerprint_sha256 of this CertificateCertificateSearchData.  # noqa: E501


        :return: The fingerprint_sha256 of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint_sha256

    @fingerprint_sha256.setter
    def fingerprint_sha256(self, fingerprint_sha256):
        """Sets the fingerprint_sha256 of this CertificateCertificateSearchData.


        :param fingerprint_sha256: The fingerprint_sha256 of this CertificateCertificateSearchData.  # noqa: E501
        :type: str
        """

        self._fingerprint_sha256 = fingerprint_sha256

    @property
    def issuer(self):
        """Gets the issuer of this CertificateCertificateSearchData.  # noqa: E501


        :return: The issuer of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateIssuer
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateCertificateSearchData.


        :param issuer: The issuer of this CertificateCertificateSearchData.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateIssuer
        """

        self._issuer = issuer

    @property
    def subject(self):
        """Gets the subject of this CertificateCertificateSearchData.  # noqa: E501


        :return: The subject of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateCertificateSearchData.


        :param subject: The subject of this CertificateCertificateSearchData.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateSubject
        """

        self._subject = subject

    @property
    def subject_alt_name(self):
        """Gets the subject_alt_name of this CertificateCertificateSearchData.  # noqa: E501


        :return: The subject_alt_name of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName
        """
        return self._subject_alt_name

    @subject_alt_name.setter
    def subject_alt_name(self, subject_alt_name):
        """Sets the subject_alt_name of this CertificateCertificateSearchData.


        :param subject_alt_name: The subject_alt_name of this CertificateCertificateSearchData.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName
        """

        self._subject_alt_name = subject_alt_name

    @property
    def tags(self):
        """Gets the tags of this CertificateCertificateSearchData.  # noqa: E501


        :return: The tags of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CertificateCertificateSearchData.


        :param tags: The tags of this CertificateCertificateSearchData.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def validity(self):
        """Gets the validity of this CertificateCertificateSearchData.  # noqa: E501


        :return: The validity of this CertificateCertificateSearchData.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this CertificateCertificateSearchData.


        :param validity: The validity of this CertificateCertificateSearchData.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateValidity
        """

        self._validity = validity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateCertificateSearchData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateCertificateSearchData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
