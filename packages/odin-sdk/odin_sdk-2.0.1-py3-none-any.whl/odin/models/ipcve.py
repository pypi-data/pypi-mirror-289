# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPCVE(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exploit': 'list[IPExploitDetails]',
        'id': 'str',
        'references': 'list[str]',
        'score': 'float',
        'services': 'list[str]',
        'severity': 'str',
        'summary': 'str',
        'vector_string': 'str',
        'weakness': 'str'
    }

    attribute_map = {
        'exploit': 'exploit',
        'id': 'id',
        'references': 'references',
        'score': 'score',
        'services': 'services',
        'severity': 'severity',
        'summary': 'summary',
        'vector_string': 'vector_string',
        'weakness': 'weakness'
    }

    def __init__(self, exploit=None, id=None, references=None, score=None, services=None, severity=None, summary=None, vector_string=None, weakness=None):  # noqa: E501
        """IPCVE - a model defined in Swagger"""  # noqa: E501
        self._exploit = None
        self._id = None
        self._references = None
        self._score = None
        self._services = None
        self._severity = None
        self._summary = None
        self._vector_string = None
        self._weakness = None
        self.discriminator = None
        if exploit is not None:
            self.exploit = exploit
        if id is not None:
            self.id = id
        if references is not None:
            self.references = references
        if score is not None:
            self.score = score
        if services is not None:
            self.services = services
        if severity is not None:
            self.severity = severity
        if summary is not None:
            self.summary = summary
        if vector_string is not None:
            self.vector_string = vector_string
        if weakness is not None:
            self.weakness = weakness

    @property
    def exploit(self):
        """Gets the exploit of this IPCVE.  # noqa: E501


        :return: The exploit of this IPCVE.  # noqa: E501
        :rtype: list[IPExploitDetails]
        """
        return self._exploit

    @exploit.setter
    def exploit(self, exploit):
        """Sets the exploit of this IPCVE.


        :param exploit: The exploit of this IPCVE.  # noqa: E501
        :type: list[IPExploitDetails]
        """

        self._exploit = exploit

    @property
    def id(self):
        """Gets the id of this IPCVE.  # noqa: E501


        :return: The id of this IPCVE.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPCVE.


        :param id: The id of this IPCVE.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def references(self):
        """Gets the references of this IPCVE.  # noqa: E501


        :return: The references of this IPCVE.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this IPCVE.


        :param references: The references of this IPCVE.  # noqa: E501
        :type: list[str]
        """

        self._references = references

    @property
    def score(self):
        """Gets the score of this IPCVE.  # noqa: E501


        :return: The score of this IPCVE.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this IPCVE.


        :param score: The score of this IPCVE.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def services(self):
        """Gets the services of this IPCVE.  # noqa: E501


        :return: The services of this IPCVE.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this IPCVE.


        :param services: The services of this IPCVE.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def severity(self):
        """Gets the severity of this IPCVE.  # noqa: E501


        :return: The severity of this IPCVE.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this IPCVE.


        :param severity: The severity of this IPCVE.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def summary(self):
        """Gets the summary of this IPCVE.  # noqa: E501


        :return: The summary of this IPCVE.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this IPCVE.


        :param summary: The summary of this IPCVE.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def vector_string(self):
        """Gets the vector_string of this IPCVE.  # noqa: E501


        :return: The vector_string of this IPCVE.  # noqa: E501
        :rtype: str
        """
        return self._vector_string

    @vector_string.setter
    def vector_string(self, vector_string):
        """Sets the vector_string of this IPCVE.


        :param vector_string: The vector_string of this IPCVE.  # noqa: E501
        :type: str
        """

        self._vector_string = vector_string

    @property
    def weakness(self):
        """Gets the weakness of this IPCVE.  # noqa: E501


        :return: The weakness of this IPCVE.  # noqa: E501
        :rtype: str
        """
        return self._weakness

    @weakness.setter
    def weakness(self, weakness):
        """Sets the weakness of this IPCVE.


        :param weakness: The weakness of this IPCVE.  # noqa: E501
        :type: str
        """

        self._weakness = weakness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPCVE, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPCVE):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
