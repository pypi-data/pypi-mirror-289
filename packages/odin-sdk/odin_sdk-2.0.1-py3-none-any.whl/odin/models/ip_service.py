# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meta': 'IPServiceMeta',
        'cve': 'list[IPCVE]',
        'extra_info': 'str',
        'last_updated_at': 'str',
        'modules': 'dict(str, object)',
        'name': 'str',
        'port': 'int',
        'product': 'str',
        'protocol': 'str',
        'softwares': 'list[IPServiceSoftware]',
        'tunnel': 'str',
        'url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'meta': '_meta',
        'cve': 'cve',
        'extra_info': 'extra_info',
        'last_updated_at': 'last_updated_at',
        'modules': 'modules',
        'name': 'name',
        'port': 'port',
        'product': 'product',
        'protocol': 'protocol',
        'softwares': 'softwares',
        'tunnel': 'tunnel',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, meta=None, cve=None, extra_info=None, last_updated_at=None, modules=None, name=None, port=None, product=None, protocol=None, softwares=None, tunnel=None, url=None, version=None):  # noqa: E501
        """IPService - a model defined in Swagger"""  # noqa: E501
        self._meta = None
        self._cve = None
        self._extra_info = None
        self._last_updated_at = None
        self._modules = None
        self._name = None
        self._port = None
        self._product = None
        self._protocol = None
        self._softwares = None
        self._tunnel = None
        self._url = None
        self._version = None
        self.discriminator = None
        if meta is not None:
            self.meta = meta
        if cve is not None:
            self.cve = cve
        if extra_info is not None:
            self.extra_info = extra_info
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if modules is not None:
            self.modules = modules
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if product is not None:
            self.product = product
        if protocol is not None:
            self.protocol = protocol
        if softwares is not None:
            self.softwares = softwares
        if tunnel is not None:
            self.tunnel = tunnel
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version

    @property
    def meta(self):
        """Gets the meta of this IPService.  # noqa: E501


        :return: The meta of this IPService.  # noqa: E501
        :rtype: IPServiceMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this IPService.


        :param meta: The meta of this IPService.  # noqa: E501
        :type: IPServiceMeta
        """

        self._meta = meta

    @property
    def cve(self):
        """Gets the cve of this IPService.  # noqa: E501


        :return: The cve of this IPService.  # noqa: E501
        :rtype: list[IPCVE]
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this IPService.


        :param cve: The cve of this IPService.  # noqa: E501
        :type: list[IPCVE]
        """

        self._cve = cve

    @property
    def extra_info(self):
        """Gets the extra_info of this IPService.  # noqa: E501


        :return: The extra_info of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this IPService.


        :param extra_info: The extra_info of this IPService.  # noqa: E501
        :type: str
        """

        self._extra_info = extra_info

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this IPService.  # noqa: E501


        :return: The last_updated_at of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this IPService.


        :param last_updated_at: The last_updated_at of this IPService.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def modules(self):
        """Gets the modules of this IPService.  # noqa: E501


        :return: The modules of this IPService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this IPService.


        :param modules: The modules of this IPService.  # noqa: E501
        :type: dict(str, object)
        """

        self._modules = modules

    @property
    def name(self):
        """Gets the name of this IPService.  # noqa: E501


        :return: The name of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IPService.


        :param name: The name of this IPService.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this IPService.  # noqa: E501


        :return: The port of this IPService.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IPService.


        :param port: The port of this IPService.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def product(self):
        """Gets the product of this IPService.  # noqa: E501


        :return: The product of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this IPService.


        :param product: The product of this IPService.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def protocol(self):
        """Gets the protocol of this IPService.  # noqa: E501


        :return: The protocol of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IPService.


        :param protocol: The protocol of this IPService.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def softwares(self):
        """Gets the softwares of this IPService.  # noqa: E501


        :return: The softwares of this IPService.  # noqa: E501
        :rtype: list[IPServiceSoftware]
        """
        return self._softwares

    @softwares.setter
    def softwares(self, softwares):
        """Sets the softwares of this IPService.


        :param softwares: The softwares of this IPService.  # noqa: E501
        :type: list[IPServiceSoftware]
        """

        self._softwares = softwares

    @property
    def tunnel(self):
        """Gets the tunnel of this IPService.  # noqa: E501


        :return: The tunnel of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._tunnel

    @tunnel.setter
    def tunnel(self, tunnel):
        """Sets the tunnel of this IPService.


        :param tunnel: The tunnel of this IPService.  # noqa: E501
        :type: str
        """

        self._tunnel = tunnel

    @property
    def url(self):
        """Gets the url of this IPService.  # noqa: E501


        :return: The url of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IPService.


        :param url: The url of this IPService.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this IPService.  # noqa: E501


        :return: The version of this IPService.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IPService.


        :param version: The version of this IPService.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
