# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateCertificateSummaryResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buckets': 'list[CertificateCertificateSummaryResponseDataBuckets]',
        'doc_count_error_upper_bound': 'int',
        'message': 'str',
        'sum_other_doc_count': 'int'
    }

    attribute_map = {
        'buckets': 'buckets',
        'doc_count_error_upper_bound': 'doc_count_error_upper_bound',
        'message': 'message',
        'sum_other_doc_count': 'sum_other_doc_count'
    }

    def __init__(self, buckets=None, doc_count_error_upper_bound=None, message=None, sum_other_doc_count=None):  # noqa: E501
        """CertificateCertificateSummaryResponseData - a model defined in Swagger"""  # noqa: E501
        self._buckets = None
        self._doc_count_error_upper_bound = None
        self._message = None
        self._sum_other_doc_count = None
        self.discriminator = None
        if buckets is not None:
            self.buckets = buckets
        if doc_count_error_upper_bound is not None:
            self.doc_count_error_upper_bound = doc_count_error_upper_bound
        if message is not None:
            self.message = message
        if sum_other_doc_count is not None:
            self.sum_other_doc_count = sum_other_doc_count

    @property
    def buckets(self):
        """Gets the buckets of this CertificateCertificateSummaryResponseData.  # noqa: E501


        :return: The buckets of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :rtype: list[CertificateCertificateSummaryResponseDataBuckets]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this CertificateCertificateSummaryResponseData.


        :param buckets: The buckets of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :type: list[CertificateCertificateSummaryResponseDataBuckets]
        """

        self._buckets = buckets

    @property
    def doc_count_error_upper_bound(self):
        """Gets the doc_count_error_upper_bound of this CertificateCertificateSummaryResponseData.  # noqa: E501


        :return: The doc_count_error_upper_bound of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :rtype: int
        """
        return self._doc_count_error_upper_bound

    @doc_count_error_upper_bound.setter
    def doc_count_error_upper_bound(self, doc_count_error_upper_bound):
        """Sets the doc_count_error_upper_bound of this CertificateCertificateSummaryResponseData.


        :param doc_count_error_upper_bound: The doc_count_error_upper_bound of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :type: int
        """

        self._doc_count_error_upper_bound = doc_count_error_upper_bound

    @property
    def message(self):
        """Gets the message of this CertificateCertificateSummaryResponseData.  # noqa: E501


        :return: The message of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CertificateCertificateSummaryResponseData.


        :param message: The message of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def sum_other_doc_count(self):
        """Gets the sum_other_doc_count of this CertificateCertificateSummaryResponseData.  # noqa: E501


        :return: The sum_other_doc_count of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :rtype: int
        """
        return self._sum_other_doc_count

    @sum_other_doc_count.setter
    def sum_other_doc_count(self, sum_other_doc_count):
        """Sets the sum_other_doc_count of this CertificateCertificateSummaryResponseData.


        :param sum_other_doc_count: The sum_other_doc_count of this CertificateCertificateSummaryResponseData.  # noqa: E501
        :type: int
        """

        self._sum_other_doc_count = sum_other_doc_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateCertificateSummaryResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateCertificateSummaryResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
