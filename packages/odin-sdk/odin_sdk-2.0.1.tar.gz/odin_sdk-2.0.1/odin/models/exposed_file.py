# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExposedFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accessible': 'bool',
        'bucket': 'str',
        'category': 'str',
        'etag': 'str',
        'ext': 'str',
        'ext_desc': 'str',
        'ins_at': 'str',
        'label': 'str',
        'mod_at': 'str',
        'name': 'str',
        'path': 'str',
        'provider': 'str',
        'region': 'str',
        'scan_at': 'str',
        'sensitive': 'bool',
        'size': 'int',
        'type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'accessible': 'accessible',
        'bucket': 'bucket',
        'category': 'category',
        'etag': 'etag',
        'ext': 'ext',
        'ext_desc': 'ext_desc',
        'ins_at': 'ins_at',
        'label': 'label',
        'mod_at': 'mod_at',
        'name': 'name',
        'path': 'path',
        'provider': 'provider',
        'region': 'region',
        'scan_at': 'scan_at',
        'sensitive': 'sensitive',
        'size': 'size',
        'type': 'type',
        'url': 'url'
    }

    def __init__(self, accessible=None, bucket=None, category=None, etag=None, ext=None, ext_desc=None, ins_at=None, label=None, mod_at=None, name=None, path=None, provider=None, region=None, scan_at=None, sensitive=None, size=None, type=None, url=None):  # noqa: E501
        """ExposedFile - a model defined in Swagger"""  # noqa: E501
        self._accessible = None
        self._bucket = None
        self._category = None
        self._etag = None
        self._ext = None
        self._ext_desc = None
        self._ins_at = None
        self._label = None
        self._mod_at = None
        self._name = None
        self._path = None
        self._provider = None
        self._region = None
        self._scan_at = None
        self._sensitive = None
        self._size = None
        self._type = None
        self._url = None
        self.discriminator = None
        if accessible is not None:
            self.accessible = accessible
        if bucket is not None:
            self.bucket = bucket
        if category is not None:
            self.category = category
        if etag is not None:
            self.etag = etag
        if ext is not None:
            self.ext = ext
        if ext_desc is not None:
            self.ext_desc = ext_desc
        if ins_at is not None:
            self.ins_at = ins_at
        if label is not None:
            self.label = label
        if mod_at is not None:
            self.mod_at = mod_at
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if provider is not None:
            self.provider = provider
        if region is not None:
            self.region = region
        if scan_at is not None:
            self.scan_at = scan_at
        if sensitive is not None:
            self.sensitive = sensitive
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url

    @property
    def accessible(self):
        """Gets the accessible of this ExposedFile.  # noqa: E501


        :return: The accessible of this ExposedFile.  # noqa: E501
        :rtype: bool
        """
        return self._accessible

    @accessible.setter
    def accessible(self, accessible):
        """Sets the accessible of this ExposedFile.


        :param accessible: The accessible of this ExposedFile.  # noqa: E501
        :type: bool
        """

        self._accessible = accessible

    @property
    def bucket(self):
        """Gets the bucket of this ExposedFile.  # noqa: E501


        :return: The bucket of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ExposedFile.


        :param bucket: The bucket of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def category(self):
        """Gets the category of this ExposedFile.  # noqa: E501


        :return: The category of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ExposedFile.


        :param category: The category of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def etag(self):
        """Gets the etag of this ExposedFile.  # noqa: E501


        :return: The etag of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ExposedFile.


        :param etag: The etag of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def ext(self):
        """Gets the ext of this ExposedFile.  # noqa: E501


        :return: The ext of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this ExposedFile.


        :param ext: The ext of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._ext = ext

    @property
    def ext_desc(self):
        """Gets the ext_desc of this ExposedFile.  # noqa: E501


        :return: The ext_desc of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._ext_desc

    @ext_desc.setter
    def ext_desc(self, ext_desc):
        """Sets the ext_desc of this ExposedFile.


        :param ext_desc: The ext_desc of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._ext_desc = ext_desc

    @property
    def ins_at(self):
        """Gets the ins_at of this ExposedFile.  # noqa: E501


        :return: The ins_at of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._ins_at

    @ins_at.setter
    def ins_at(self, ins_at):
        """Sets the ins_at of this ExposedFile.


        :param ins_at: The ins_at of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._ins_at = ins_at

    @property
    def label(self):
        """Gets the label of this ExposedFile.  # noqa: E501


        :return: The label of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ExposedFile.


        :param label: The label of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def mod_at(self):
        """Gets the mod_at of this ExposedFile.  # noqa: E501


        :return: The mod_at of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._mod_at

    @mod_at.setter
    def mod_at(self, mod_at):
        """Sets the mod_at of this ExposedFile.


        :param mod_at: The mod_at of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._mod_at = mod_at

    @property
    def name(self):
        """Gets the name of this ExposedFile.  # noqa: E501


        :return: The name of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExposedFile.


        :param name: The name of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ExposedFile.  # noqa: E501


        :return: The path of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ExposedFile.


        :param path: The path of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def provider(self):
        """Gets the provider of this ExposedFile.  # noqa: E501


        :return: The provider of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ExposedFile.


        :param provider: The provider of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this ExposedFile.  # noqa: E501


        :return: The region of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ExposedFile.


        :param region: The region of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def scan_at(self):
        """Gets the scan_at of this ExposedFile.  # noqa: E501


        :return: The scan_at of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._scan_at

    @scan_at.setter
    def scan_at(self, scan_at):
        """Sets the scan_at of this ExposedFile.


        :param scan_at: The scan_at of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._scan_at = scan_at

    @property
    def sensitive(self):
        """Gets the sensitive of this ExposedFile.  # noqa: E501


        :return: The sensitive of this ExposedFile.  # noqa: E501
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this ExposedFile.


        :param sensitive: The sensitive of this ExposedFile.  # noqa: E501
        :type: bool
        """

        self._sensitive = sensitive

    @property
    def size(self):
        """Gets the size of this ExposedFile.  # noqa: E501


        :return: The size of this ExposedFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ExposedFile.


        :param size: The size of this ExposedFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this ExposedFile.  # noqa: E501


        :return: The type of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExposedFile.


        :param type: The type of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this ExposedFile.  # noqa: E501


        :return: The url of this ExposedFile.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExposedFile.


        :param url: The url of this ExposedFile.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExposedFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExposedFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
