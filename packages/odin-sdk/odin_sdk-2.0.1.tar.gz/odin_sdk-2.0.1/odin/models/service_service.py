# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meta': 'ServiceIPServiceMeta',
        'asn': 'ServiceIPASN',
        'asn_updated_at': 'str',
        'banners': 'list[str]',
        'cve': 'list[ServiceFullCveData]',
        'domains': 'list[ServiceIPDomain]',
        'extra_info': 'str',
        'hostnames': 'list[ServiceIPHostname]',
        'ip': 'str',
        'is_ipv4': 'bool',
        'is_ipv6': 'bool',
        'is_vuln': 'bool',
        'last_updated_at': 'str',
        'location': 'ServiceIPLocation',
        'location_updated_at': 'str',
        'modules': 'dict(str, object)',
        'name': 'str',
        'port': 'int',
        'product': 'str',
        'protocol': 'str',
        'scan_id': 'int',
        'softwares': 'list[ServiceIPServiceSoftware]',
        'tags': 'list[ServiceIPTag]',
        'tunnel': 'str',
        'version': 'str',
        'whois': 'ServiceIPWhois',
        'whois_updated_at': 'str'
    }

    attribute_map = {
        'meta': '_meta',
        'asn': 'asn',
        'asn_updated_at': 'asn_updated_at',
        'banners': 'banners',
        'cve': 'cve',
        'domains': 'domains',
        'extra_info': 'extra_info',
        'hostnames': 'hostnames',
        'ip': 'ip',
        'is_ipv4': 'is_ipv4',
        'is_ipv6': 'is_ipv6',
        'is_vuln': 'is_vuln',
        'last_updated_at': 'last_updated_at',
        'location': 'location',
        'location_updated_at': 'location_updated_at',
        'modules': 'modules',
        'name': 'name',
        'port': 'port',
        'product': 'product',
        'protocol': 'protocol',
        'scan_id': 'scan_id',
        'softwares': 'softwares',
        'tags': 'tags',
        'tunnel': 'tunnel',
        'version': 'version',
        'whois': 'whois',
        'whois_updated_at': 'whois_updated_at'
    }

    def __init__(self, meta=None, asn=None, asn_updated_at=None, banners=None, cve=None, domains=None, extra_info=None, hostnames=None, ip=None, is_ipv4=None, is_ipv6=None, is_vuln=None, last_updated_at=None, location=None, location_updated_at=None, modules=None, name=None, port=None, product=None, protocol=None, scan_id=None, softwares=None, tags=None, tunnel=None, version=None, whois=None, whois_updated_at=None):  # noqa: E501
        """ServiceService - a model defined in Swagger"""  # noqa: E501
        self._meta = None
        self._asn = None
        self._asn_updated_at = None
        self._banners = None
        self._cve = None
        self._domains = None
        self._extra_info = None
        self._hostnames = None
        self._ip = None
        self._is_ipv4 = None
        self._is_ipv6 = None
        self._is_vuln = None
        self._last_updated_at = None
        self._location = None
        self._location_updated_at = None
        self._modules = None
        self._name = None
        self._port = None
        self._product = None
        self._protocol = None
        self._scan_id = None
        self._softwares = None
        self._tags = None
        self._tunnel = None
        self._version = None
        self._whois = None
        self._whois_updated_at = None
        self.discriminator = None
        if meta is not None:
            self.meta = meta
        if asn is not None:
            self.asn = asn
        if asn_updated_at is not None:
            self.asn_updated_at = asn_updated_at
        if banners is not None:
            self.banners = banners
        if cve is not None:
            self.cve = cve
        if domains is not None:
            self.domains = domains
        if extra_info is not None:
            self.extra_info = extra_info
        if hostnames is not None:
            self.hostnames = hostnames
        if ip is not None:
            self.ip = ip
        if is_ipv4 is not None:
            self.is_ipv4 = is_ipv4
        if is_ipv6 is not None:
            self.is_ipv6 = is_ipv6
        if is_vuln is not None:
            self.is_vuln = is_vuln
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if location is not None:
            self.location = location
        if location_updated_at is not None:
            self.location_updated_at = location_updated_at
        if modules is not None:
            self.modules = modules
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if product is not None:
            self.product = product
        if protocol is not None:
            self.protocol = protocol
        if scan_id is not None:
            self.scan_id = scan_id
        if softwares is not None:
            self.softwares = softwares
        if tags is not None:
            self.tags = tags
        if tunnel is not None:
            self.tunnel = tunnel
        if version is not None:
            self.version = version
        if whois is not None:
            self.whois = whois
        if whois_updated_at is not None:
            self.whois_updated_at = whois_updated_at

    @property
    def meta(self):
        """Gets the meta of this ServiceService.  # noqa: E501


        :return: The meta of this ServiceService.  # noqa: E501
        :rtype: ServiceIPServiceMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ServiceService.


        :param meta: The meta of this ServiceService.  # noqa: E501
        :type: ServiceIPServiceMeta
        """

        self._meta = meta

    @property
    def asn(self):
        """Gets the asn of this ServiceService.  # noqa: E501


        :return: The asn of this ServiceService.  # noqa: E501
        :rtype: ServiceIPASN
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this ServiceService.


        :param asn: The asn of this ServiceService.  # noqa: E501
        :type: ServiceIPASN
        """

        self._asn = asn

    @property
    def asn_updated_at(self):
        """Gets the asn_updated_at of this ServiceService.  # noqa: E501


        :return: The asn_updated_at of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._asn_updated_at

    @asn_updated_at.setter
    def asn_updated_at(self, asn_updated_at):
        """Sets the asn_updated_at of this ServiceService.


        :param asn_updated_at: The asn_updated_at of this ServiceService.  # noqa: E501
        :type: str
        """

        self._asn_updated_at = asn_updated_at

    @property
    def banners(self):
        """Gets the banners of this ServiceService.  # noqa: E501


        :return: The banners of this ServiceService.  # noqa: E501
        :rtype: list[str]
        """
        return self._banners

    @banners.setter
    def banners(self, banners):
        """Sets the banners of this ServiceService.


        :param banners: The banners of this ServiceService.  # noqa: E501
        :type: list[str]
        """

        self._banners = banners

    @property
    def cve(self):
        """Gets the cve of this ServiceService.  # noqa: E501


        :return: The cve of this ServiceService.  # noqa: E501
        :rtype: list[ServiceFullCveData]
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this ServiceService.


        :param cve: The cve of this ServiceService.  # noqa: E501
        :type: list[ServiceFullCveData]
        """

        self._cve = cve

    @property
    def domains(self):
        """Gets the domains of this ServiceService.  # noqa: E501


        :return: The domains of this ServiceService.  # noqa: E501
        :rtype: list[ServiceIPDomain]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ServiceService.


        :param domains: The domains of this ServiceService.  # noqa: E501
        :type: list[ServiceIPDomain]
        """

        self._domains = domains

    @property
    def extra_info(self):
        """Gets the extra_info of this ServiceService.  # noqa: E501


        :return: The extra_info of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this ServiceService.


        :param extra_info: The extra_info of this ServiceService.  # noqa: E501
        :type: str
        """

        self._extra_info = extra_info

    @property
    def hostnames(self):
        """Gets the hostnames of this ServiceService.  # noqa: E501


        :return: The hostnames of this ServiceService.  # noqa: E501
        :rtype: list[ServiceIPHostname]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this ServiceService.


        :param hostnames: The hostnames of this ServiceService.  # noqa: E501
        :type: list[ServiceIPHostname]
        """

        self._hostnames = hostnames

    @property
    def ip(self):
        """Gets the ip of this ServiceService.  # noqa: E501


        :return: The ip of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ServiceService.


        :param ip: The ip of this ServiceService.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def is_ipv4(self):
        """Gets the is_ipv4 of this ServiceService.  # noqa: E501


        :return: The is_ipv4 of this ServiceService.  # noqa: E501
        :rtype: bool
        """
        return self._is_ipv4

    @is_ipv4.setter
    def is_ipv4(self, is_ipv4):
        """Sets the is_ipv4 of this ServiceService.


        :param is_ipv4: The is_ipv4 of this ServiceService.  # noqa: E501
        :type: bool
        """

        self._is_ipv4 = is_ipv4

    @property
    def is_ipv6(self):
        """Gets the is_ipv6 of this ServiceService.  # noqa: E501


        :return: The is_ipv6 of this ServiceService.  # noqa: E501
        :rtype: bool
        """
        return self._is_ipv6

    @is_ipv6.setter
    def is_ipv6(self, is_ipv6):
        """Sets the is_ipv6 of this ServiceService.


        :param is_ipv6: The is_ipv6 of this ServiceService.  # noqa: E501
        :type: bool
        """

        self._is_ipv6 = is_ipv6

    @property
    def is_vuln(self):
        """Gets the is_vuln of this ServiceService.  # noqa: E501


        :return: The is_vuln of this ServiceService.  # noqa: E501
        :rtype: bool
        """
        return self._is_vuln

    @is_vuln.setter
    def is_vuln(self, is_vuln):
        """Sets the is_vuln of this ServiceService.


        :param is_vuln: The is_vuln of this ServiceService.  # noqa: E501
        :type: bool
        """

        self._is_vuln = is_vuln

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ServiceService.  # noqa: E501


        :return: The last_updated_at of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ServiceService.


        :param last_updated_at: The last_updated_at of this ServiceService.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def location(self):
        """Gets the location of this ServiceService.  # noqa: E501


        :return: The location of this ServiceService.  # noqa: E501
        :rtype: ServiceIPLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ServiceService.


        :param location: The location of this ServiceService.  # noqa: E501
        :type: ServiceIPLocation
        """

        self._location = location

    @property
    def location_updated_at(self):
        """Gets the location_updated_at of this ServiceService.  # noqa: E501


        :return: The location_updated_at of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._location_updated_at

    @location_updated_at.setter
    def location_updated_at(self, location_updated_at):
        """Sets the location_updated_at of this ServiceService.


        :param location_updated_at: The location_updated_at of this ServiceService.  # noqa: E501
        :type: str
        """

        self._location_updated_at = location_updated_at

    @property
    def modules(self):
        """Gets the modules of this ServiceService.  # noqa: E501

        services.tls -> services.modules.tls key names - if you mess up the key names  # noqa: E501

        :return: The modules of this ServiceService.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this ServiceService.

        services.tls -> services.modules.tls key names - if you mess up the key names  # noqa: E501

        :param modules: The modules of this ServiceService.  # noqa: E501
        :type: dict(str, object)
        """

        self._modules = modules

    @property
    def name(self):
        """Gets the name of this ServiceService.  # noqa: E501


        :return: The name of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceService.


        :param name: The name of this ServiceService.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this ServiceService.  # noqa: E501


        :return: The port of this ServiceService.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServiceService.


        :param port: The port of this ServiceService.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def product(self):
        """Gets the product of this ServiceService.  # noqa: E501


        :return: The product of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ServiceService.


        :param product: The product of this ServiceService.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def protocol(self):
        """Gets the protocol of this ServiceService.  # noqa: E501


        :return: The protocol of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ServiceService.


        :param protocol: The protocol of this ServiceService.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def scan_id(self):
        """Gets the scan_id of this ServiceService.  # noqa: E501


        :return: The scan_id of this ServiceService.  # noqa: E501
        :rtype: int
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this ServiceService.


        :param scan_id: The scan_id of this ServiceService.  # noqa: E501
        :type: int
        """

        self._scan_id = scan_id

    @property
    def softwares(self):
        """Gets the softwares of this ServiceService.  # noqa: E501


        :return: The softwares of this ServiceService.  # noqa: E501
        :rtype: list[ServiceIPServiceSoftware]
        """
        return self._softwares

    @softwares.setter
    def softwares(self, softwares):
        """Sets the softwares of this ServiceService.


        :param softwares: The softwares of this ServiceService.  # noqa: E501
        :type: list[ServiceIPServiceSoftware]
        """

        self._softwares = softwares

    @property
    def tags(self):
        """Gets the tags of this ServiceService.  # noqa: E501


        :return: The tags of this ServiceService.  # noqa: E501
        :rtype: list[ServiceIPTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServiceService.


        :param tags: The tags of this ServiceService.  # noqa: E501
        :type: list[ServiceIPTag]
        """

        self._tags = tags

    @property
    def tunnel(self):
        """Gets the tunnel of this ServiceService.  # noqa: E501


        :return: The tunnel of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._tunnel

    @tunnel.setter
    def tunnel(self, tunnel):
        """Sets the tunnel of this ServiceService.


        :param tunnel: The tunnel of this ServiceService.  # noqa: E501
        :type: str
        """

        self._tunnel = tunnel

    @property
    def version(self):
        """Gets the version of this ServiceService.  # noqa: E501


        :return: The version of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceService.


        :param version: The version of this ServiceService.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def whois(self):
        """Gets the whois of this ServiceService.  # noqa: E501


        :return: The whois of this ServiceService.  # noqa: E501
        :rtype: ServiceIPWhois
        """
        return self._whois

    @whois.setter
    def whois(self, whois):
        """Sets the whois of this ServiceService.


        :param whois: The whois of this ServiceService.  # noqa: E501
        :type: ServiceIPWhois
        """

        self._whois = whois

    @property
    def whois_updated_at(self):
        """Gets the whois_updated_at of this ServiceService.  # noqa: E501


        :return: The whois_updated_at of this ServiceService.  # noqa: E501
        :rtype: str
        """
        return self._whois_updated_at

    @whois_updated_at.setter
    def whois_updated_at(self, whois_updated_at):
        """Sets the whois_updated_at of this ServiceService.


        :param whois_updated_at: The whois_updated_at of this ServiceService.  # noqa: E501
        :type: str
        """

        self._whois_updated_at = whois_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
