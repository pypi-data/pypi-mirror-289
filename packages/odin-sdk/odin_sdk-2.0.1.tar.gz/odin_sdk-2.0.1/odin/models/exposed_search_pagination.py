# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExposedSearchPagination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last': 'list[object]',
        'limit': 'int',
        'start': 'list[object]',
        'total': 'int'
    }

    attribute_map = {
        'last': 'last',
        'limit': 'limit',
        'start': 'start',
        'total': 'total'
    }

    def __init__(self, last=None, limit=None, start=None, total=None):  # noqa: E501
        """ExposedSearchPagination - a model defined in Swagger"""  # noqa: E501
        self._last = None
        self._limit = None
        self._start = None
        self._total = None
        self.discriminator = None
        if last is not None:
            self.last = last
        if limit is not None:
            self.limit = limit
        if start is not None:
            self.start = start
        if total is not None:
            self.total = total

    @property
    def last(self):
        """Gets the last of this ExposedSearchPagination.  # noqa: E501


        :return: The last of this ExposedSearchPagination.  # noqa: E501
        :rtype: list[object]
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this ExposedSearchPagination.


        :param last: The last of this ExposedSearchPagination.  # noqa: E501
        :type: list[object]
        """

        self._last = last

    @property
    def limit(self):
        """Gets the limit of this ExposedSearchPagination.  # noqa: E501


        :return: The limit of this ExposedSearchPagination.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ExposedSearchPagination.


        :param limit: The limit of this ExposedSearchPagination.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def start(self):
        """Gets the start of this ExposedSearchPagination.  # noqa: E501


        :return: The start of this ExposedSearchPagination.  # noqa: E501
        :rtype: list[object]
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ExposedSearchPagination.


        :param start: The start of this ExposedSearchPagination.  # noqa: E501
        :type: list[object]
        """

        self._start = start

    @property
    def total(self):
        """Gets the total of this ExposedSearchPagination.  # noqa: E501


        :return: The total of this ExposedSearchPagination.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ExposedSearchPagination.


        :param total: The total of this ExposedSearchPagination.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExposedSearchPagination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExposedSearchPagination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
