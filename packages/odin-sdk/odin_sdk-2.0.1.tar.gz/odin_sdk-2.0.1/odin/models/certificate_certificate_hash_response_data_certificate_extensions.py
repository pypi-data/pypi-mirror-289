# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateCertificateHashResponseDataCertificateExtensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authority_info_access': 'CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess',
        'authority_key_id': 'str',
        'basic_constraints': 'CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints',
        'certificate_policies': 'list[CertificateCertificateHashResponseDataCertificateExtensionsCertificatePolicies]',
        'ct_poison': 'bool',
        'extended_key_usage': 'CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage',
        'key_usage': 'CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage',
        'subject_alt_name': 'CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName',
        'subject_key_id': 'str'
    }

    attribute_map = {
        'authority_info_access': 'authority_info_access',
        'authority_key_id': 'authority_key_id',
        'basic_constraints': 'basic_constraints',
        'certificate_policies': 'certificate_policies',
        'ct_poison': 'ct_poison',
        'extended_key_usage': 'extended_key_usage',
        'key_usage': 'key_usage',
        'subject_alt_name': 'subject_alt_name',
        'subject_key_id': 'subject_key_id'
    }

    def __init__(self, authority_info_access=None, authority_key_id=None, basic_constraints=None, certificate_policies=None, ct_poison=None, extended_key_usage=None, key_usage=None, subject_alt_name=None, subject_key_id=None):  # noqa: E501
        """CertificateCertificateHashResponseDataCertificateExtensions - a model defined in Swagger"""  # noqa: E501
        self._authority_info_access = None
        self._authority_key_id = None
        self._basic_constraints = None
        self._certificate_policies = None
        self._ct_poison = None
        self._extended_key_usage = None
        self._key_usage = None
        self._subject_alt_name = None
        self._subject_key_id = None
        self.discriminator = None
        if authority_info_access is not None:
            self.authority_info_access = authority_info_access
        if authority_key_id is not None:
            self.authority_key_id = authority_key_id
        if basic_constraints is not None:
            self.basic_constraints = basic_constraints
        if certificate_policies is not None:
            self.certificate_policies = certificate_policies
        if ct_poison is not None:
            self.ct_poison = ct_poison
        if extended_key_usage is not None:
            self.extended_key_usage = extended_key_usage
        if key_usage is not None:
            self.key_usage = key_usage
        if subject_alt_name is not None:
            self.subject_alt_name = subject_alt_name
        if subject_key_id is not None:
            self.subject_key_id = subject_key_id

    @property
    def authority_info_access(self):
        """Gets the authority_info_access of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The authority_info_access of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess
        """
        return self._authority_info_access

    @authority_info_access.setter
    def authority_info_access(self, authority_info_access):
        """Sets the authority_info_access of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param authority_info_access: The authority_info_access of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess
        """

        self._authority_info_access = authority_info_access

    @property
    def authority_key_id(self):
        """Gets the authority_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The authority_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: str
        """
        return self._authority_key_id

    @authority_key_id.setter
    def authority_key_id(self, authority_key_id):
        """Sets the authority_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param authority_key_id: The authority_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: str
        """

        self._authority_key_id = authority_key_id

    @property
    def basic_constraints(self):
        """Gets the basic_constraints of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The basic_constraints of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints
        """
        return self._basic_constraints

    @basic_constraints.setter
    def basic_constraints(self, basic_constraints):
        """Sets the basic_constraints of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param basic_constraints: The basic_constraints of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints
        """

        self._basic_constraints = basic_constraints

    @property
    def certificate_policies(self):
        """Gets the certificate_policies of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The certificate_policies of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: list[CertificateCertificateHashResponseDataCertificateExtensionsCertificatePolicies]
        """
        return self._certificate_policies

    @certificate_policies.setter
    def certificate_policies(self, certificate_policies):
        """Sets the certificate_policies of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param certificate_policies: The certificate_policies of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: list[CertificateCertificateHashResponseDataCertificateExtensionsCertificatePolicies]
        """

        self._certificate_policies = certificate_policies

    @property
    def ct_poison(self):
        """Gets the ct_poison of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The ct_poison of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: bool
        """
        return self._ct_poison

    @ct_poison.setter
    def ct_poison(self, ct_poison):
        """Sets the ct_poison of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param ct_poison: The ct_poison of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: bool
        """

        self._ct_poison = ct_poison

    @property
    def extended_key_usage(self):
        """Gets the extended_key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The extended_key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage
        """
        return self._extended_key_usage

    @extended_key_usage.setter
    def extended_key_usage(self, extended_key_usage):
        """Sets the extended_key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param extended_key_usage: The extended_key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage
        """

        self._extended_key_usage = extended_key_usage

    @property
    def key_usage(self):
        """Gets the key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage
        """
        return self._key_usage

    @key_usage.setter
    def key_usage(self, key_usage):
        """Sets the key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param key_usage: The key_usage of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage
        """

        self._key_usage = key_usage

    @property
    def subject_alt_name(self):
        """Gets the subject_alt_name of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The subject_alt_name of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName
        """
        return self._subject_alt_name

    @subject_alt_name.setter
    def subject_alt_name(self, subject_alt_name):
        """Sets the subject_alt_name of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param subject_alt_name: The subject_alt_name of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName
        """

        self._subject_alt_name = subject_alt_name

    @property
    def subject_key_id(self):
        """Gets the subject_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501


        :return: The subject_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :rtype: str
        """
        return self._subject_key_id

    @subject_key_id.setter
    def subject_key_id(self, subject_key_id):
        """Sets the subject_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.


        :param subject_key_id: The subject_key_id of this CertificateCertificateHashResponseDataCertificateExtensions.  # noqa: E501
        :type: str
        """

        self._subject_key_id = subject_key_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateCertificateHashResponseDataCertificateExtensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateCertificateHashResponseDataCertificateExtensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
