# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPTag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated_at': 'str',
        'name': 'str',
        'pretty_name': 'str',
        'value': 'bool'
    }

    attribute_map = {
        'last_updated_at': 'last_updated_at',
        'name': 'name',
        'pretty_name': 'pretty_name',
        'value': 'value'
    }

    def __init__(self, last_updated_at=None, name=None, pretty_name=None, value=None):  # noqa: E501
        """IPTag - a model defined in Swagger"""  # noqa: E501
        self._last_updated_at = None
        self._name = None
        self._pretty_name = None
        self._value = None
        self.discriminator = None
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if name is not None:
            self.name = name
        if pretty_name is not None:
            self.pretty_name = pretty_name
        if value is not None:
            self.value = value

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this IPTag.  # noqa: E501


        :return: The last_updated_at of this IPTag.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this IPTag.


        :param last_updated_at: The last_updated_at of this IPTag.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def name(self):
        """Gets the name of this IPTag.  # noqa: E501


        :return: The name of this IPTag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IPTag.


        :param name: The name of this IPTag.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pretty_name(self):
        """Gets the pretty_name of this IPTag.  # noqa: E501


        :return: The pretty_name of this IPTag.  # noqa: E501
        :rtype: str
        """
        return self._pretty_name

    @pretty_name.setter
    def pretty_name(self, pretty_name):
        """Sets the pretty_name of this IPTag.


        :param pretty_name: The pretty_name of this IPTag.  # noqa: E501
        :type: str
        """

        self._pretty_name = pretty_name

    @property
    def value(self):
        """Gets the value of this IPTag.  # noqa: E501


        :return: The value of this IPTag.  # noqa: E501
        :rtype: bool
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IPTag.


        :param value: The value of this IPTag.  # noqa: E501
        :type: bool
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPTag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
