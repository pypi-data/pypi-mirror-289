# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemaAudit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'expires_date': 'str',
        'is_modified': 'bool',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'expires_date': 'expires_date',
        'is_modified': 'is_modified',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, expires_date=None, is_modified=None, updated_at=None):  # noqa: E501
        """SchemaAudit - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._expires_date = None
        self._is_modified = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if expires_date is not None:
            self.expires_date = expires_date
        if is_modified is not None:
            self.is_modified = is_modified
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this SchemaAudit.  # noqa: E501


        :return: The created_at of this SchemaAudit.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SchemaAudit.


        :param created_at: The created_at of this SchemaAudit.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def expires_date(self):
        """Gets the expires_date of this SchemaAudit.  # noqa: E501


        :return: The expires_date of this SchemaAudit.  # noqa: E501
        :rtype: str
        """
        return self._expires_date

    @expires_date.setter
    def expires_date(self, expires_date):
        """Sets the expires_date of this SchemaAudit.


        :param expires_date: The expires_date of this SchemaAudit.  # noqa: E501
        :type: str
        """

        self._expires_date = expires_date

    @property
    def is_modified(self):
        """Gets the is_modified of this SchemaAudit.  # noqa: E501

        is audit logic applied (update in dates to fix invalid values)  # noqa: E501

        :return: The is_modified of this SchemaAudit.  # noqa: E501
        :rtype: bool
        """
        return self._is_modified

    @is_modified.setter
    def is_modified(self, is_modified):
        """Sets the is_modified of this SchemaAudit.

        is audit logic applied (update in dates to fix invalid values)  # noqa: E501

        :param is_modified: The is_modified of this SchemaAudit.  # noqa: E501
        :type: bool
        """

        self._is_modified = is_modified

    @property
    def updated_at(self):
        """Gets the updated_at of this SchemaAudit.  # noqa: E501


        :return: The updated_at of this SchemaAudit.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SchemaAudit.


        :param updated_at: The updated_at of this SchemaAudit.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaAudit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaAudit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
