# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VisionExploitDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'file': 'str',
        'id': 'str',
        'platform': 'str',
        'type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'description': 'description',
        'file': 'file',
        'id': 'id',
        'platform': 'platform',
        'type': 'type',
        'url': 'url'
    }

    def __init__(self, description=None, file=None, id=None, platform=None, type=None, url=None):  # noqa: E501
        """VisionExploitDetails - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._file = None
        self._id = None
        self._platform = None
        self._type = None
        self._url = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if file is not None:
            self.file = file
        if id is not None:
            self.id = id
        if platform is not None:
            self.platform = platform
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url

    @property
    def description(self):
        """Gets the description of this VisionExploitDetails.  # noqa: E501


        :return: The description of this VisionExploitDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VisionExploitDetails.


        :param description: The description of this VisionExploitDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file(self):
        """Gets the file of this VisionExploitDetails.  # noqa: E501


        :return: The file of this VisionExploitDetails.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this VisionExploitDetails.


        :param file: The file of this VisionExploitDetails.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this VisionExploitDetails.  # noqa: E501


        :return: The id of this VisionExploitDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VisionExploitDetails.


        :param id: The id of this VisionExploitDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def platform(self):
        """Gets the platform of this VisionExploitDetails.  # noqa: E501


        :return: The platform of this VisionExploitDetails.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VisionExploitDetails.


        :param platform: The platform of this VisionExploitDetails.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def type(self):
        """Gets the type of this VisionExploitDetails.  # noqa: E501


        :return: The type of this VisionExploitDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VisionExploitDetails.


        :param type: The type of this VisionExploitDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this VisionExploitDetails.  # noqa: E501


        :return: The url of this VisionExploitDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VisionExploitDetails.


        :param url: The url of this VisionExploitDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisionExploitDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisionExploitDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
