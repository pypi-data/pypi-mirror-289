# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPWhois(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encoding': 'Encoding',
        'descr': 'str',
        'network': 'str',
        'organization': 'str',
        'raw': 'str'
    }

    attribute_map = {
        'encoding': '_encoding',
        'descr': 'descr',
        'network': 'network',
        'organization': 'organization',
        'raw': 'raw'
    }

    def __init__(self, encoding=None, descr=None, network=None, organization=None, raw=None):  # noqa: E501
        """IPWhois - a model defined in Swagger"""  # noqa: E501
        self._encoding = None
        self._descr = None
        self._network = None
        self._organization = None
        self._raw = None
        self.discriminator = None
        if encoding is not None:
            self.encoding = encoding
        if descr is not None:
            self.descr = descr
        if network is not None:
            self.network = network
        if organization is not None:
            self.organization = organization
        if raw is not None:
            self.raw = raw

    @property
    def encoding(self):
        """Gets the encoding of this IPWhois.  # noqa: E501


        :return: The encoding of this IPWhois.  # noqa: E501
        :rtype: Encoding
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this IPWhois.


        :param encoding: The encoding of this IPWhois.  # noqa: E501
        :type: Encoding
        """

        self._encoding = encoding

    @property
    def descr(self):
        """Gets the descr of this IPWhois.  # noqa: E501


        :return: The descr of this IPWhois.  # noqa: E501
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """Sets the descr of this IPWhois.


        :param descr: The descr of this IPWhois.  # noqa: E501
        :type: str
        """

        self._descr = descr

    @property
    def network(self):
        """Gets the network of this IPWhois.  # noqa: E501


        :return: The network of this IPWhois.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IPWhois.


        :param network: The network of this IPWhois.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def organization(self):
        """Gets the organization of this IPWhois.  # noqa: E501


        :return: The organization of this IPWhois.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this IPWhois.


        :param organization: The organization of this IPWhois.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def raw(self):
        """Gets the raw of this IPWhois.  # noqa: E501


        :return: The raw of this IPWhois.  # noqa: E501
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this IPWhois.


        :param raw: The raw of this IPWhois.  # noqa: E501
        :type: str
        """

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPWhois, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPWhois):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
