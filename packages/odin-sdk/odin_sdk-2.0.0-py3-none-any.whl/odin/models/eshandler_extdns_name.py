# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EshandlerEXTDNSName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'fld': 'str',
        'subdomain': 'str',
        'tld': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'fld': 'fld',
        'subdomain': 'subdomain',
        'tld': 'tld'
    }

    def __init__(self, domain=None, fld=None, subdomain=None, tld=None):  # noqa: E501
        """EshandlerEXTDNSName - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._fld = None
        self._subdomain = None
        self._tld = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if fld is not None:
            self.fld = fld
        if subdomain is not None:
            self.subdomain = subdomain
        if tld is not None:
            self.tld = tld

    @property
    def domain(self):
        """Gets the domain of this EshandlerEXTDNSName.  # noqa: E501


        :return: The domain of this EshandlerEXTDNSName.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EshandlerEXTDNSName.


        :param domain: The domain of this EshandlerEXTDNSName.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def fld(self):
        """Gets the fld of this EshandlerEXTDNSName.  # noqa: E501


        :return: The fld of this EshandlerEXTDNSName.  # noqa: E501
        :rtype: str
        """
        return self._fld

    @fld.setter
    def fld(self, fld):
        """Sets the fld of this EshandlerEXTDNSName.


        :param fld: The fld of this EshandlerEXTDNSName.  # noqa: E501
        :type: str
        """

        self._fld = fld

    @property
    def subdomain(self):
        """Gets the subdomain of this EshandlerEXTDNSName.  # noqa: E501


        :return: The subdomain of this EshandlerEXTDNSName.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this EshandlerEXTDNSName.


        :param subdomain: The subdomain of this EshandlerEXTDNSName.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def tld(self):
        """Gets the tld of this EshandlerEXTDNSName.  # noqa: E501


        :return: The tld of this EshandlerEXTDNSName.  # noqa: E501
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this EshandlerEXTDNSName.


        :param tld: The tld of this EshandlerEXTDNSName.  # noqa: E501
        :type: str
        """

        self._tld = tld

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EshandlerEXTDNSName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EshandlerEXTDNSName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
