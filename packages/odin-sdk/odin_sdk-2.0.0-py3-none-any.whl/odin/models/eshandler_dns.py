# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EshandlerDNS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added_at': 'str',
        'domain': 'str',
        'ext_dns_name': 'EshandlerEXTDNSName',
        'subdomain': 'str'
    }

    attribute_map = {
        'added_at': 'added_at',
        'domain': 'domain',
        'ext_dns_name': 'ext_dns_name',
        'subdomain': 'subdomain'
    }

    def __init__(self, added_at=None, domain=None, ext_dns_name=None, subdomain=None):  # noqa: E501
        """EshandlerDNS - a model defined in Swagger"""  # noqa: E501
        self._added_at = None
        self._domain = None
        self._ext_dns_name = None
        self._subdomain = None
        self.discriminator = None
        if added_at is not None:
            self.added_at = added_at
        if domain is not None:
            self.domain = domain
        if ext_dns_name is not None:
            self.ext_dns_name = ext_dns_name
        if subdomain is not None:
            self.subdomain = subdomain

    @property
    def added_at(self):
        """Gets the added_at of this EshandlerDNS.  # noqa: E501


        :return: The added_at of this EshandlerDNS.  # noqa: E501
        :rtype: str
        """
        return self._added_at

    @added_at.setter
    def added_at(self, added_at):
        """Sets the added_at of this EshandlerDNS.


        :param added_at: The added_at of this EshandlerDNS.  # noqa: E501
        :type: str
        """

        self._added_at = added_at

    @property
    def domain(self):
        """Gets the domain of this EshandlerDNS.  # noqa: E501


        :return: The domain of this EshandlerDNS.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EshandlerDNS.


        :param domain: The domain of this EshandlerDNS.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ext_dns_name(self):
        """Gets the ext_dns_name of this EshandlerDNS.  # noqa: E501


        :return: The ext_dns_name of this EshandlerDNS.  # noqa: E501
        :rtype: EshandlerEXTDNSName
        """
        return self._ext_dns_name

    @ext_dns_name.setter
    def ext_dns_name(self, ext_dns_name):
        """Sets the ext_dns_name of this EshandlerDNS.


        :param ext_dns_name: The ext_dns_name of this EshandlerDNS.  # noqa: E501
        :type: EshandlerEXTDNSName
        """

        self._ext_dns_name = ext_dns_name

    @property
    def subdomain(self):
        """Gets the subdomain of this EshandlerDNS.  # noqa: E501


        :return: The subdomain of this EshandlerDNS.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this EshandlerDNS.


        :param subdomain: The subdomain of this EshandlerDNS.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EshandlerDNS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EshandlerDNS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
