# coding: utf-8

"""
    Odin

    ODIN APIs to search across IP Services, CVEs, Certificates, Exposed Files/Buckets, Domains and more  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceIPDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'dns_servers': 'list[str]',
        'emails': 'list[str]',
        'last_updated_at': 'str',
        'name': 'str',
        'web_server': 'str'
    }

    attribute_map = {
        'country': 'country',
        'dns_servers': 'dns_servers',
        'emails': 'emails',
        'last_updated_at': 'last_updated_at',
        'name': 'name',
        'web_server': 'web_server'
    }

    def __init__(self, country=None, dns_servers=None, emails=None, last_updated_at=None, name=None, web_server=None):  # noqa: E501
        """ServiceIPDomain - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._dns_servers = None
        self._emails = None
        self._last_updated_at = None
        self._name = None
        self._web_server = None
        self.discriminator = None
        if country is not None:
            self.country = country
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if emails is not None:
            self.emails = emails
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if name is not None:
            self.name = name
        if web_server is not None:
            self.web_server = web_server

    @property
    def country(self):
        """Gets the country of this ServiceIPDomain.  # noqa: E501


        :return: The country of this ServiceIPDomain.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ServiceIPDomain.


        :param country: The country of this ServiceIPDomain.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def dns_servers(self):
        """Gets the dns_servers of this ServiceIPDomain.  # noqa: E501


        :return: The dns_servers of this ServiceIPDomain.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this ServiceIPDomain.


        :param dns_servers: The dns_servers of this ServiceIPDomain.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def emails(self):
        """Gets the emails of this ServiceIPDomain.  # noqa: E501


        :return: The emails of this ServiceIPDomain.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ServiceIPDomain.


        :param emails: The emails of this ServiceIPDomain.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ServiceIPDomain.  # noqa: E501


        :return: The last_updated_at of this ServiceIPDomain.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ServiceIPDomain.


        :param last_updated_at: The last_updated_at of this ServiceIPDomain.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def name(self):
        """Gets the name of this ServiceIPDomain.  # noqa: E501


        :return: The name of this ServiceIPDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceIPDomain.


        :param name: The name of this ServiceIPDomain.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def web_server(self):
        """Gets the web_server of this ServiceIPDomain.  # noqa: E501


        :return: The web_server of this ServiceIPDomain.  # noqa: E501
        :rtype: str
        """
        return self._web_server

    @web_server.setter
    def web_server(self, web_server):
        """Sets the web_server of this ServiceIPDomain.


        :param web_server: The web_server of this ServiceIPDomain.  # noqa: E501
        :type: str
        """

        self._web_server = web_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceIPDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceIPDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
