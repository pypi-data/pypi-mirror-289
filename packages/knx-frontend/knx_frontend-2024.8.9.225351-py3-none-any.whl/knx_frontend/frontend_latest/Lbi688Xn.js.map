{"version":3,"file":"Lbi688Xn.js","mappings":";;;;;;AAyCA;;ACpBA;AACA;AACA;;AAGA;ACIA;AAGA;;AAGA;AACA;;AAEA;;AAGA;AACA;;;;;;AAMA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;;;;ACxFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AC9JA;;AAEA;;AAEA;AACA;AACA;;AAGA;;;;;;ACrBA;;AAGA;;;;;;;AAgBA;AArBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-circular-progress.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon-button-arrow-prev.ts","webpack://knx-frontend/./homeassistant-frontend/src/layouts/hass-loading-screen.ts","webpack://knx-frontend/./homeassistant-frontend/src/resources/styles.ts","webpack://knx-frontend/progress.ts","webpack://knx-frontend/circular-progress.ts"],"sourcesContent":["import { MdCircularProgress } from \"@material/web/progress/circular-progress\";\nimport { PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\nexport class HaCircularProgress extends MdCircularProgress {\n  @property({ attribute: \"aria-label\", type: String }) public ariaLabel =\n    \"Loading\";\n\n  @property() public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"size\")) {\n      switch (this.size) {\n        case \"tiny\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"16px\");\n          break;\n        case \"small\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"28px\");\n          break;\n        // medium is default size\n        case \"medium\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"48px\");\n          break;\n        case \"large\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"68px\");\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-color);\n        --md-circular-progress-size: 48px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { mdiArrowLeft, mdiArrowRight } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-arrow-prev\")\nexport class HaIconButtonArrowPrev extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon =\n    mainWindow.document.dir === \"rtl\" ? mdiArrowRight : mdiArrowLeft;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.back\") || \"Back\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-arrow-prev\": HaIconButtonArrowPrev;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/ha-circular-progress\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-loading-screen\")\nclass HassLoadingScreen extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean, attribute: \"no-toolbar\" })\n  public noToolbar = false;\n\n  @property({ type: Boolean }) public rootnav = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public message?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.noToolbar\n        ? \"\"\n        : html`<div class=\"toolbar\">\n            ${this.rootnav || history.state?.root\n              ? html`\n                  <ha-menu-button\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                  ></ha-menu-button>\n                `\n              : html`\n                  <ha-icon-button-arrow-prev\n                    .hass=${this.hass}\n                    @click=${this._handleBack}\n                  ></ha-icon-button-arrow-prev>\n                `}\n          </div>`}\n      <div class=\"content\">\n        <ha-circular-progress indeterminate></ha-circular-progress>\n        ${this.message\n          ? html`<div id=\"loading-text\">${this.message}</div>`\n          : nothing}\n      </div>\n    `;\n  }\n\n  private _handleBack() {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 100%;\n          background-color: var(--primary-background-color);\n        }\n        .toolbar {\n          display: flex;\n          align-items: center;\n          font-size: 20px;\n          height: var(--header-height);\n          padding: 8px 12px;\n          pointer-events: none;\n          background-color: var(--app-header-background-color);\n          font-weight: 400;\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n        }\n        @media (max-width: 599px) {\n          .toolbar {\n            padding: 4px;\n          }\n        }\n        ha-menu-button,\n        ha-icon-button-arrow-prev {\n          pointer-events: auto;\n        }\n        .content {\n          height: calc(100% - var(--header-height));\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n        }\n        #loading-text {\n          max-width: 350px;\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-loading-screen\": HassLoadingScreen;\n  }\n}\n","import { css } from \"lit\";\n\nexport const buttonLinkStyle = css`\n  button.link {\n    background: none;\n    color: inherit;\n    border: none;\n    padding: 0;\n    font: inherit;\n    text-align: left;\n    text-decoration: underline;\n    cursor: pointer;\n    outline: none;\n  }\n`;\n\nexport const haStyle = css`\n  :host {\n    font-family: var(--paper-font-body1_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-body1_-_-webkit-font-smoothing);\n    font-size: var(--paper-font-body1_-_font-size);\n    font-weight: var(--paper-font-body1_-_font-weight);\n    line-height: var(--paper-font-body1_-_line-height);\n  }\n\n  app-header div[sticky] {\n    height: 48px;\n  }\n\n  app-toolbar [main-title] {\n    margin-left: 20px;\n    margin-inline-start: 20px;\n    margin-inline-end: initial;\n  }\n\n  h1 {\n    font-family: var(--paper-font-headline_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-headline_-_-webkit-font-smoothing);\n    white-space: var(--paper-font-headline_-_white-space);\n    overflow: var(--paper-font-headline_-_overflow);\n    text-overflow: var(--paper-font-headline_-_text-overflow);\n    font-size: var(--paper-font-headline_-_font-size);\n    font-weight: var(--paper-font-headline_-_font-weight);\n    line-height: var(--paper-font-headline_-_line-height);\n  }\n\n  h2 {\n    font-family: var(--paper-font-title_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-title_-_-webkit-font-smoothing);\n    white-space: var(--paper-font-title_-_white-space);\n    overflow: var(--paper-font-title_-_overflow);\n    text-overflow: var(--paper-font-title_-_text-overflow);\n    font-size: var(--paper-font-title_-_font-size);\n    font-weight: var(--paper-font-title_-_font-weight);\n    line-height: var(--paper-font-title_-_line-height);\n  }\n\n  h3 {\n    font-family: var(--paper-font-subhead_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-subhead_-_-webkit-font-smoothing);\n    white-space: var(--paper-font-subhead_-_white-space);\n    overflow: var(--paper-font-subhead_-_overflow);\n    text-overflow: var(--paper-font-subhead_-_text-overflow);\n    font-size: var(--paper-font-subhead_-_font-size);\n    font-weight: var(--paper-font-subhead_-_font-weight);\n    line-height: var(--paper-font-subhead_-_line-height);\n  }\n\n  a {\n    color: var(--primary-color);\n  }\n\n  .secondary {\n    color: var(--secondary-text-color);\n  }\n\n  .error {\n    color: var(--error-color);\n  }\n\n  .warning {\n    color: var(--error-color);\n  }\n\n  ha-button.warning,\n  mwc-button.warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n\n  ${buttonLinkStyle}\n\n  .card-actions a {\n    text-decoration: none;\n  }\n\n  .card-actions .warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n\n  .layout.horizontal,\n  .layout.vertical {\n    display: flex;\n  }\n  .layout.inline {\n    display: inline-flex;\n  }\n  .layout.horizontal {\n    flex-direction: row;\n  }\n  .layout.vertical {\n    flex-direction: column;\n  }\n  .layout.wrap {\n    flex-wrap: wrap;\n  }\n  .layout.no-wrap {\n    flex-wrap: nowrap;\n  }\n  .layout.center,\n  .layout.center-center {\n    align-items: center;\n  }\n  .layout.bottom {\n    align-items: flex-end;\n  }\n  .layout.center-justified,\n  .layout.center-center {\n    justify-content: center;\n  }\n  .flex {\n    flex: 1;\n    flex-basis: 0.000000001px;\n  }\n  .flex-auto {\n    flex: 1 1 auto;\n  }\n  .flex-none {\n    flex: none;\n  }\n  .layout.justified {\n    justify-content: space-between;\n  }\n`;\n\nexport const haStyleDialog = css`\n  /* mwc-dialog (ha-dialog) styles */\n  ha-dialog {\n    --mdc-dialog-min-width: 400px;\n    --mdc-dialog-max-width: 600px;\n    --mdc-dialog-max-width: min(600px, 95vw);\n    --justify-action-buttons: space-between;\n  }\n\n  ha-dialog .form {\n    color: var(--primary-text-color);\n  }\n\n  a {\n    color: var(--primary-color);\n  }\n\n  /* make dialog fullscreen on small screens */\n  @media all and (max-width: 450px), all and (max-height: 500px) {\n    ha-dialog {\n      --mdc-dialog-min-width: calc(\n        100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n      );\n      --mdc-dialog-max-width: calc(\n        100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n      );\n      --mdc-dialog-min-height: 100%;\n      --mdc-dialog-max-height: 100%;\n      --vertical-align-dialog: flex-end;\n      --ha-dialog-border-radius: 0;\n    }\n  }\n  mwc-button.warning,\n  ha-button.warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n  .error {\n    color: var(--error-color);\n  }\n`;\n\nexport const haStyleScrollbar = css`\n  .ha-scrollbar::-webkit-scrollbar {\n    width: 0.4rem;\n    height: 0.4rem;\n  }\n\n  .ha-scrollbar::-webkit-scrollbar-thumb {\n    -webkit-border-radius: 4px;\n    border-radius: 4px;\n    background: var(--scrollbar-thumb-color);\n  }\n\n  .ha-scrollbar {\n    overflow-y: auto;\n    scrollbar-color: var(--scrollbar-thumb-color) transparent;\n    scrollbar-width: thin;\n  }\n`;\n\nexport const baseEntrypointStyles = css`\n  body {\n    background-color: var(--primary-background-color);\n    color: var(--primary-text-color);\n    height: calc(100vh - 32px);\n    width: 100vw;\n  }\n`;\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, LitElement, nothing, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\nimport {mixinDelegatesAria} from '../../internal/aria/delegate.js';\n\n// Separate variable needed for closure.\nconst progressBaseClass = mixinDelegatesAria(LitElement);\n\n/**\n * A progress component.\n */\nexport abstract class Progress extends progressBaseClass {\n  /**\n   * Progress to display, a fraction between 0 and `max`.\n   */\n  @property({type: Number}) value = 0;\n\n  /**\n   * Maximum progress to display, defaults to 1.\n   */\n  @property({type: Number}) max = 1;\n\n  /**\n   * Whether or not to display indeterminate progress, which gives no indication\n   * to how long an activity will take.\n   */\n  @property({type: Boolean}) indeterminate = false;\n\n  /**\n   * Whether or not to render indeterminate mode using 4 colors instead of one.\n   */\n  @property({type: Boolean, attribute: 'four-color'}) fourColor = false;\n\n  protected override render() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n      <div\n        class=\"progress ${classMap(this.getRenderClasses())}\"\n        role=\"progressbar\"\n        aria-label=\"${ariaLabel || nothing}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=${this.max}\n        aria-valuenow=${this.indeterminate ? nothing : this.value}\n        >${this.renderIndicator()}</div\n      >\n    `;\n  }\n\n  protected getRenderClasses() {\n    return {\n      'indeterminate': this.indeterminate,\n      'four-color': this.fourColor,\n    };\n  }\n\n  protected abstract renderIndicator(): TemplateResult;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html} from 'lit';\n\nimport {Progress} from './progress.js';\n\n/**\n * A circular progress component.\n */\nexport class CircularProgress extends Progress {\n  protected override renderIndicator() {\n    if (this.indeterminate) {\n      return this.renderIndeterminateContainer();\n    }\n\n    return this.renderDeterminateContainer();\n  }\n\n  // Determinate mode is rendered with an svg so the progress arc can be\n  // easily animated via stroke-dashoffset.\n  private renderDeterminateContainer() {\n    const dashOffset = (1 - this.value / this.max) * 100;\n    // note, dash-array/offset are relative to Setting `pathLength` but\n    // Chrome seems to render this inaccurately and using a large viewbox helps.\n    return html`\n      <svg viewBox=\"0 0 4800 4800\">\n        <circle class=\"track\" pathLength=\"100\"></circle>\n        <circle\n          class=\"active-track\"\n          pathLength=\"100\"\n          stroke-dashoffset=${dashOffset}></circle>\n      </svg>\n    `;\n  }\n\n  // Indeterminate mode rendered with 2 bordered-divs. The borders are\n  // clipped into half circles by their containers. The divs are then carefully\n  // animated to produce changes to the spinner arc size.\n  // This approach has 4.5x the FPS of rendering via svg on Chrome 111.\n  // See https://lit.dev/playground/#gist=febb773565272f75408ab06a0eb49746.\n  private renderIndeterminateContainer() {\n    return html` <div class=\"spinner\">\n      <div class=\"left\">\n        <div class=\"circle\"></div>\n      </div>\n      <div class=\"right\">\n        <div class=\"circle\"></div>\n      </div>\n    </div>`;\n  }\n}\n"],"names":[],"sourceRoot":""}