from collections.abc import Iterator
from typing import Any, Literal, SupportsIndex, overload
from typing_extensions import Self, TypeIs

import numpy as np
import numpy.typing as npt

from ._base import sparray
from ._bsr import bsr_array, bsr_matrix
from ._coo import coo_array, coo_matrix
from ._csc import csc_array, csc_matrix
from ._csr import csr_array, csr_matrix
from ._dia import dia_array, dia_matrix
from ._dok import dok_array, dok_matrix
from ._index import IndexMixin
from ._matrix import spmatrix
from .typing import (
    _SCT,
    SparseArray,
    _ArrayType,
    _CastingKind,
    _DType_co,
    _DTypeLike,
    _Formats,
    _NumberLike_co,
    _OrderType,
    _SCT_co,
    _SCT_uifcO,
    _ShapeAnno,
    _ShapeLike,
)

__all__ = ["lil_array", "lil_matrix", "isspmatrix_lil"]

def isspmatrix_lil(x: Any) -> TypeIs[lil_matrix[Any, Any]]: ...

class lil_array(sparray[_ShapeAnno, _DType_co], IndexMixin):
{array_body}

class lil_matrix(spmatrix[_ShapeAnno, _DType_co], IndexMixin):
{matrix_body}
