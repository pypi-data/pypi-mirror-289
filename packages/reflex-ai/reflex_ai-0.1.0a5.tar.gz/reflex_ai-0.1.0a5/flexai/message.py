"""Message types to send between the agent and the LLM."""

from __future__ import annotations
from typing import Any
import json

import reflex as rx


class Message(rx.Base):
    """The base message class."""

    # The role of the message (user, system, AI, tool).
    role: str

    # The content of the message.
    content: str


class SystemMessage(Message):
    """A system message."""

    role = "system"


class UserMessage(Message):
    """A message sent by a user."""

    role = "user"


class AIMessage(Message):
    """A message generated by the AI."""

    role = "assistant"


class ToolUseMessage(AIMessage):
    """A message to use a tool."""

    pass


class ToolResultMessage(UserMessage):
    """A message containing the result of a tool use."""

    @classmethod
    def from_result(cls, tool_use_id: str, result: Any) -> ToolResultMessage:
        """Create a tool result message from a tool result.

        Args:
            tool_use_id: The ID of the tool use.
            result: The result of the tool (or an exception).

        Returns:
            A tool result message.
        """
        # The base message data.
        data = {
            "type": "tool_result",
            "tool_use_id": tool_use_id,
            "content": result,
        }

        # Check for an exception.
        if isinstance(result, Exception):
            data.update(
                {
                    "content": str(result),
                    "is_error": True,
                }
            )

        # Return the message.
        return cls(content=json.dumps([data]))
