# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 version: pulumi.Input[str],
                 comments: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[str]] = None,
                 git_details: Optional[pulumi.Input['TemplateGitDetailsArgs']] = None,
                 git_import_details: Optional[pulumi.Input['TemplateGitImportDetailsArgs']] = None,
                 import_from_git: Optional[pulumi.Input[bool]] = None,
                 is_stable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_import_request: Optional[pulumi.Input['TemplateTemplateImportRequestArgs']] = None,
                 template_yaml: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Template resource.
        :param pulumi.Input[str] identifier: Unique identifier of the resource
        :param pulumi.Input[str] version: Version Label for Template.
        :param pulumi.Input[str] comments: Specify comment with respect to changes.
        :param pulumi.Input[str] description: Description of the entity. Description field is deprecated
        :param pulumi.Input[str] force_delete: Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        :param pulumi.Input['TemplateGitDetailsArgs'] git_details: Contains parameters related to creating an Entity for Git Experience.
        :param pulumi.Input['TemplateGitImportDetailsArgs'] git_import_details: Contains Git Information for importing entities from Git
        :param pulumi.Input[bool] import_from_git: Flag to set if importing from Git
        :param pulumi.Input[bool] is_stable: True if given version for template to be set as stable.
        :param pulumi.Input[str] name: Name of the Variable
        :param pulumi.Input[str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[str] project_id: Project Identifier for the Entity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource.
        :param pulumi.Input['TemplateTemplateImportRequestArgs'] template_import_request: Contains parameters for importing template.
        :param pulumi.Input[str] template_yaml: Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "version", version)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if description is not None:
            warnings.warn("""description field is deprecated""", DeprecationWarning)
            pulumi.log.warn("""description is deprecated: description field is deprecated""")
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if git_details is not None:
            pulumi.set(__self__, "git_details", git_details)
        if git_import_details is not None:
            pulumi.set(__self__, "git_import_details", git_import_details)
        if import_from_git is not None:
            pulumi.set(__self__, "import_from_git", import_from_git)
        if is_stable is not None:
            pulumi.set(__self__, "is_stable", is_stable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_import_request is not None:
            pulumi.set(__self__, "template_import_request", template_import_request)
        if template_yaml is not None:
            pulumi.set(__self__, "template_yaml", template_yaml)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Version Label for Template.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Specify comment with respect to changes.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""description field is deprecated""")
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the entity. Description field is deprecated
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[str]]:
        """
        Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="gitDetails")
    def git_details(self) -> Optional[pulumi.Input['TemplateGitDetailsArgs']]:
        """
        Contains parameters related to creating an Entity for Git Experience.
        """
        return pulumi.get(self, "git_details")

    @git_details.setter
    def git_details(self, value: Optional[pulumi.Input['TemplateGitDetailsArgs']]):
        pulumi.set(self, "git_details", value)

    @property
    @pulumi.getter(name="gitImportDetails")
    def git_import_details(self) -> Optional[pulumi.Input['TemplateGitImportDetailsArgs']]:
        """
        Contains Git Information for importing entities from Git
        """
        return pulumi.get(self, "git_import_details")

    @git_import_details.setter
    def git_import_details(self, value: Optional[pulumi.Input['TemplateGitImportDetailsArgs']]):
        pulumi.set(self, "git_import_details", value)

    @property
    @pulumi.getter(name="importFromGit")
    def import_from_git(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to set if importing from Git
        """
        return pulumi.get(self, "import_from_git")

    @import_from_git.setter
    def import_from_git(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "import_from_git", value)

    @property
    @pulumi.getter(name="isStable")
    def is_stable(self) -> Optional[pulumi.Input[bool]]:
        """
        True if given version for template to be set as stable.
        """
        return pulumi.get(self, "is_stable")

    @is_stable.setter
    def is_stable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_stable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Organization Identifier for the Entity
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Identifier for the Entity
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to associate with the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="templateImportRequest")
    def template_import_request(self) -> Optional[pulumi.Input['TemplateTemplateImportRequestArgs']]:
        """
        Contains parameters for importing template.
        """
        return pulumi.get(self, "template_import_request")

    @template_import_request.setter
    def template_import_request(self, value: Optional[pulumi.Input['TemplateTemplateImportRequestArgs']]):
        pulumi.set(self, "template_import_request", value)

    @property
    @pulumi.getter(name="templateYaml")
    def template_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        """
        return pulumi.get(self, "template_yaml")

    @template_yaml.setter
    def template_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_yaml", value)


@pulumi.input_type
class _TemplateState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[str]] = None,
                 git_details: Optional[pulumi.Input['TemplateGitDetailsArgs']] = None,
                 git_import_details: Optional[pulumi.Input['TemplateGitImportDetailsArgs']] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 import_from_git: Optional[pulumi.Input[bool]] = None,
                 is_stable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_import_request: Optional[pulumi.Input['TemplateTemplateImportRequestArgs']] = None,
                 template_yaml: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Template resources.
        :param pulumi.Input[str] comments: Specify comment with respect to changes.
        :param pulumi.Input[str] description: Description of the entity. Description field is deprecated
        :param pulumi.Input[str] force_delete: Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        :param pulumi.Input['TemplateGitDetailsArgs'] git_details: Contains parameters related to creating an Entity for Git Experience.
        :param pulumi.Input['TemplateGitImportDetailsArgs'] git_import_details: Contains Git Information for importing entities from Git
        :param pulumi.Input[str] identifier: Unique identifier of the resource
        :param pulumi.Input[bool] import_from_git: Flag to set if importing from Git
        :param pulumi.Input[bool] is_stable: True if given version for template to be set as stable.
        :param pulumi.Input[str] name: Name of the Variable
        :param pulumi.Input[str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[str] project_id: Project Identifier for the Entity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource.
        :param pulumi.Input['TemplateTemplateImportRequestArgs'] template_import_request: Contains parameters for importing template.
        :param pulumi.Input[str] template_yaml: Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        :param pulumi.Input[str] version: Version Label for Template.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if description is not None:
            warnings.warn("""description field is deprecated""", DeprecationWarning)
            pulumi.log.warn("""description is deprecated: description field is deprecated""")
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if git_details is not None:
            pulumi.set(__self__, "git_details", git_details)
        if git_import_details is not None:
            pulumi.set(__self__, "git_import_details", git_import_details)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if import_from_git is not None:
            pulumi.set(__self__, "import_from_git", import_from_git)
        if is_stable is not None:
            pulumi.set(__self__, "is_stable", is_stable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_import_request is not None:
            pulumi.set(__self__, "template_import_request", template_import_request)
        if template_yaml is not None:
            pulumi.set(__self__, "template_yaml", template_yaml)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Specify comment with respect to changes.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""description field is deprecated""")
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the entity. Description field is deprecated
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[str]]:
        """
        Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="gitDetails")
    def git_details(self) -> Optional[pulumi.Input['TemplateGitDetailsArgs']]:
        """
        Contains parameters related to creating an Entity for Git Experience.
        """
        return pulumi.get(self, "git_details")

    @git_details.setter
    def git_details(self, value: Optional[pulumi.Input['TemplateGitDetailsArgs']]):
        pulumi.set(self, "git_details", value)

    @property
    @pulumi.getter(name="gitImportDetails")
    def git_import_details(self) -> Optional[pulumi.Input['TemplateGitImportDetailsArgs']]:
        """
        Contains Git Information for importing entities from Git
        """
        return pulumi.get(self, "git_import_details")

    @git_import_details.setter
    def git_import_details(self, value: Optional[pulumi.Input['TemplateGitImportDetailsArgs']]):
        pulumi.set(self, "git_import_details", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="importFromGit")
    def import_from_git(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to set if importing from Git
        """
        return pulumi.get(self, "import_from_git")

    @import_from_git.setter
    def import_from_git(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "import_from_git", value)

    @property
    @pulumi.getter(name="isStable")
    def is_stable(self) -> Optional[pulumi.Input[bool]]:
        """
        True if given version for template to be set as stable.
        """
        return pulumi.get(self, "is_stable")

    @is_stable.setter
    def is_stable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_stable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Organization Identifier for the Entity
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Identifier for the Entity
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to associate with the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="templateImportRequest")
    def template_import_request(self) -> Optional[pulumi.Input['TemplateTemplateImportRequestArgs']]:
        """
        Contains parameters for importing template.
        """
        return pulumi.get(self, "template_import_request")

    @template_import_request.setter
    def template_import_request(self, value: Optional[pulumi.Input['TemplateTemplateImportRequestArgs']]):
        pulumi.set(self, "template_import_request", value)

    @property
    @pulumi.getter(name="templateYaml")
    def template_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        """
        return pulumi.get(self, "template_yaml")

    @template_yaml.setter
    def template_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_yaml", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version Label for Template.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[str]] = None,
                 git_details: Optional[pulumi.Input[pulumi.InputType['TemplateGitDetailsArgs']]] = None,
                 git_import_details: Optional[pulumi.Input[pulumi.InputType['TemplateGitImportDetailsArgs']]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 import_from_git: Optional[pulumi.Input[bool]] = None,
                 is_stable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_import_request: Optional[pulumi.Input[pulumi.InputType['TemplateTemplateImportRequestArgs']]] = None,
                 template_yaml: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource for creating a Template. Description field is deprecated

        ## Remote Pipeline template

        resource "platform.Template" "pipeline_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Pipeline
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stages:
              - stage:
                  identifier: dvvdvd
                  name: dvvdvd
                  description: ""
                  type: Deployment
                  spec:
                    deploymentType: Kubernetes
                    service:
                      serviceRef: <+input>
                      serviceInputs: <+input>
                    environment:
                      environmentRef: <+input>
                      deployToAll: false
                      environmentInputs: <+input>
                      serviceOverrideInputs: <+input>
                      infrastructureDefinitions: <+input>
                    execution:
                      steps:
                        - step:
                            name: Rollout Deployment
                            identifier: rolloutDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                      rollbackSteps:
                        - step:
                            name: Rollback Rollout Deployment
                            identifier: rollbackRolloutDeployment
                            type: K8sRollingRollback
                            timeout: 10m
                            spec:
                              pruningEnabled: false
                  tags: {}
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: StageRollback

          EOT
        }

        ## Remote Pipeline template to create new branch from existing base branch

        resource "platform.Template" "pipeline_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Pipeline
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stages:
              - stage:
                  identifier: dvvdvd
                  name: dvvdvd
                  description: ""
                  type: Deployment
                  spec:
                    deploymentType: Kubernetes
                    service:
                      serviceRef: <+input>
                      serviceInputs: <+input>
                    environment:
                      environmentRef: <+input>
                      deployToAll: false
                      environmentInputs: <+input>
                      serviceOverrideInputs: <+input>
                      infrastructureDefinitions: <+input>
                    execution:
                      steps:
                        - step:
                            name: Rollout Deployment
                            identifier: rolloutDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                      rollbackSteps:
                        - step:
                            name: Rollback Rollout Deployment
                            identifier: rollbackRolloutDeployment
                            type: K8sRollingRollback
                            timeout: 10m
                            spec:
                              pruningEnabled: false
                  tags: {}
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: StageRollback

          EOT
        }

        ## Inline Pipeline template

        resource "platform.Template" "pipeline_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Pipeline
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stages:
              - stage:
                  identifier: dvvdvd
                  name: dvvdvd
                  description: ""
                  type: Deployment
                  spec:
                    deploymentType: Kubernetes
                    service:
                      serviceRef: <+input>
                      serviceInputs: <+input>
                    environment:
                      environmentRef: <+input>
                      deployToAll: false
                      environmentInputs: <+input>
                      serviceOverrideInputs: <+input>
                      infrastructureDefinitions: <+input>
                    execution:
                      steps:
                        - step:
                            name: Rollout Deployment
                            identifier: rolloutDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                      rollbackSteps:
                        - step:
                            name: Rollback Rollout Deployment
                            identifier: rollbackRolloutDeployment
                            type: K8sRollingRollback
                            timeout: 10m
                            spec:
                              pruningEnabled: false
                  tags: {}
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: StageRollback

          EOT
        }

        ## Inline Step template

        resource "platform.Template" "step_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Step
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            timeout: 10m
            type: ShellScript
            spec:
              shell: Bash
              onDelegate: true
              source:
                type: Inline
                spec:
                  script: <+input>
              environmentVariables: []
              outputVariables: []

          EOT
        }

        ## Remote Step template

        resource "platform.Template" "step_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Step
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            timeout: 10m
            type: ShellScript
            spec:
              shell: Bash
              onDelegate: true
              source:
                type: Inline
                spec:
                  script: <+input>
              environmentVariables: []
              outputVariables: []

          EOT
        }

        ## Remote Step template to create new branch from existing branch

        resource "platform.Template" "step_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Step
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            timeout: 10m
            type: ShellScript
            spec:
              shell: Bash
              onDelegate: true
              source:
                type: Inline
                spec:
                  script: <+input>
              environmentVariables: []
              outputVariables: []

          EOT
        }

        ## Inline Stage template

        resource "platform.Template" "stage_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Stage
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: <+input>
                serviceInputs: <+input>
              environment:
                environmentRef: <+input>
                deployToAll: false
                environmentInputs: <+input>
                infrastructureDefinitions: <+input>
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Shell Script_1
                      identifier: ShellScript_1
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: <+input>
                        environmentVariables: []
                        outputVariables: []
                      timeout: <+input>
                rollbackSteps: []
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback

          EOT
        }

        ## Remote Stage template

        resource "platform.Template" "stage_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Stage
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: <+input>
                serviceInputs: <+input>
              environment:
                environmentRef: <+input>
                deployToAll: false
                environmentInputs: <+input>
                infrastructureDefinitions: <+input>
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Shell Script_1
                      identifier: ShellScript_1
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: <+input>
                        environmentVariables: []
                        outputVariables: []
                      timeout: <+input>
                rollbackSteps: []
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback

          EOT
        }

        ## Remote Stage template to create new branch from existing branch

        resource "platform.Template" "stage_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Stage
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: <+input>
                serviceInputs: <+input>
              environment:
                environmentRef: <+input>
                deployToAll: false
                environmentInputs: <+input>
                infrastructureDefinitions: <+input>
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Shell Script_1
                      identifier: ShellScript_1
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: <+input>
                        environmentVariables: []
                        outputVariables: []
                      timeout: <+input>
                rollbackSteps: []
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback

          EOT
        }

        ## Inline StepGroup template

        resource "platform.Template" "stepgroup_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: StepGroup
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stageType: Deployment
            steps:
              - step:
                  type: ShellScript
                  name: Shell Script_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: <+input>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m

          EOT
        }

        ## Remote StepGroup template

        resource "platform.Template" "stepgroup_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: StepGroup
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stageType: Deployment
            steps:
              - step:
                  type: ShellScript
                  name: Shell Script_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: <+input>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m

          EOT
        }

        ## Remote StepGroup template to create new branch from existing branch

        resource "platform.Template" "stepgroup_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: StepGroup
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stageType: Deployment
            steps:
              - step:
                  type: ShellScript
                  name: Shell Script_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: <+input>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m

          EOT
        }

        ## Inline Monitered Service template

        resource "platform.Template" "monitered_service_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: MonitoredService
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            serviceRef: <+input>
            environmentRef: <+input>
            type: Application
            sources:
              changeSources:
                - name: Harness CD Next Gen
                  identifier: harness_cd_next_gen
                  type: HarnessCDNextGen
                  enabled: true
                  category: Deployment
                  spec: {}
              healthSources:
                - name: health
                  identifier: health
                  type: AppDynamics
                  spec:
                    applicationName: <+input>
                    tierName: <+input>
                    metricData:
                      Errors: true
                      Performance: true
                    metricDefinitions: []
                    feature: Application Monitoring
                    connectorRef: <+input>
                    metricPacks:
                      - identifier: Errors
                      - identifier: Performance

          EOT
        }

        ## Artifact Source template

        resource "platform.Template" "artifact_source_template" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: ArtifactSource
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: DockerRegistry
            spec:
              imagePath: library/nginx
              tag: <+input>
              connectorRef: account.Harness_DockerHub

          EOT
        }

        ## Deployment template

        resource "platform.Template" "deployment_template" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: CustomDeployment
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            infrastructure:
              variables:
                - name: kubeConnector
                  type: Connector
                  value: <+input>
                  description: ""
              fetchInstancesScript:
                store:
                  type: Inline
                  spec:
                    content: |
                      #
                      # Script is expected to query Infrastructure and dump json
                      # in $INSTANCE_OUTPUT_PATH file path
                      #
                      # Harness is expected to initialize ${INSTANCE_OUTPUT_PATH}
                      # environment variable - a random unique file path on delegate,
                      # so script execution can save the result.
                      #
                      /opt/harness-delegate/client-tools/kubectl/v1.19.2/kubectl get pods --namespace=harness-delegate-ng -o json > $INSTANCE_OUTPUT_PATH
              instanceAttributes:
                - name: instancename
                  jsonPath: metadata.name
                  description: ""
              instancesListPath: items
            execution:
              stepTemplateRefs: []

          EOT
        }

        ## Secrets Manager template

        resource "platform.Template" "secrets_manager_template" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: SecretManager
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            executionTarget: {}
            shell: Bash
            onDelegate: true
            source:
              spec:
                script: |-
                  curl -o secret.json -X GET https://example.com/<+secretManager.environmentVariables.enginename>/<+secretManager.environmentVariables.path> -H 'X-Vault-Token: <+secrets.getValue("vaultTokenOne")>'
                  secret=$(jq -r '.data."<+secretManager.environmentVariables.key>"' secret.json)
                type: Inline
            environmentVariables:
              - name: enginename
                type: String
                value: <+input>
              - name: path
                type: String
                value: <+input>
              - name: key
                type: String
                value: <+input>

          EOT
        }

        ### Creating Multiple Versions of a Template
        ##Stable version of the Template
        resource "platform.Template" "template_v1" {
          identifier    = "temp"
          org_id        = harness_platform_project.test.org_id
          name          = "temp"
          comments      = "comments"
          version       = "v1"
          is_stable     = true
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v1
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback

              EOT
        }

        ##Unstable version of the Template
        resource "platform.Template" "template_v2" {
          identifier    = "temp"
          org_id        = harness_platform_organization.test.id
          name          = "temp"
          comments      = "comments"
          version       = "v2"
          is_stable     = false
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v2
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback
              EOT
        }

        ##Updating the Stable Version of the Template from v1 to v2.
        resource "platform.Template" "template_v2" {
          identifier    = "temp"
          org_id        = harness_platform_organization.test.id
          name          = "temp"
          comments      = "comments"
          version       = "v2"
          is_stable     = true
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v2
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback
              EOT
        }

        resource "platform.Template" "template_v1" {
          identifier    = "temp"
          org_id        = harness_platform_organization.test.id
          name          = "temp"
          comments      = "comments"
          version       = "v1"
          is_stable     = false
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v1
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback

              EOT

          depends_on = [time_sleep.wait_10_seconds]
        }

        resource "time_sleep" "wait_10_seconds" {
          depends_on       = [harness_platform_template.test2]
          destroy_duration = "10s"
        }

        ##Importing Account Level Templates
        resource "platform.Template" "test" {
          identifier      = "accounttemplate"
          name            = "accounttemplate"
          version         = "v2"
          is_stable       = false
          import_from_git = true
          git_import_details {
            branch_name   = "main"
            file_path     = ".harness/accounttemplate.yaml"
            connector_ref = "account.DoNotDeleteGithub"
            repo_name     = "open-repo"
          }
          template_import_request {
            template_name        = "accounttemplate"
            template_version     = "v2"
            template_description = ""
          }
        }

        ##Importing Org Level Templates
        resource "platform.Template" "test" {
          identifier      = "orgtemplate"
          name            = "orgtemplate"
          org_id          = "org"
          version         = "v2"
          is_stable       = false
          import_from_git = true
          git_import_details {
            branch_name   = "main"
            file_path     = ".harness/orgtemplate.yaml"
            connector_ref = "account.DoNotDeleteGithub"
            repo_name     = "open-repo"
          }
          template_import_request {
            template_name        = "orgtemplate"
            template_version     = "v2"
            template_description = ""
          }
        }

        ##Importing Project Level Templates
        resource "platform.Template" "test" {
          identifier      = "projecttemplate"
          name            = "projecttemplate"
          org_id          = "org"
          project_id      = "project"
          version         = "v2"
          is_stable       = false
          import_from_git = true
          git_import_details {
            branch_name   = "main"
            file_path     = ".harness/projecttemplate.yaml"
            connector_ref = "account.DoNotDeleteGithub"
            repo_name     = "open-repo"
          }
          template_import_request {
            template_name        = "projecttemplate"
            template_version     = "v2"
            template_description = ""
          }
        }

        Import org level template

        ```sh
        $ pulumi import harness:platform/template:Template example <ord_id>/<template_id>
        ```

        Import project level template

        ```sh
        $ pulumi import harness:platform/template:Template example <org_id>/<project_id>/<template_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Specify comment with respect to changes.
        :param pulumi.Input[str] description: Description of the entity. Description field is deprecated
        :param pulumi.Input[str] force_delete: Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        :param pulumi.Input[pulumi.InputType['TemplateGitDetailsArgs']] git_details: Contains parameters related to creating an Entity for Git Experience.
        :param pulumi.Input[pulumi.InputType['TemplateGitImportDetailsArgs']] git_import_details: Contains Git Information for importing entities from Git
        :param pulumi.Input[str] identifier: Unique identifier of the resource
        :param pulumi.Input[bool] import_from_git: Flag to set if importing from Git
        :param pulumi.Input[bool] is_stable: True if given version for template to be set as stable.
        :param pulumi.Input[str] name: Name of the Variable
        :param pulumi.Input[str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[str] project_id: Project Identifier for the Entity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource.
        :param pulumi.Input[pulumi.InputType['TemplateTemplateImportRequestArgs']] template_import_request: Contains parameters for importing template.
        :param pulumi.Input[str] template_yaml: Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        :param pulumi.Input[str] version: Version Label for Template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for creating a Template. Description field is deprecated

        ## Remote Pipeline template

        resource "platform.Template" "pipeline_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Pipeline
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stages:
              - stage:
                  identifier: dvvdvd
                  name: dvvdvd
                  description: ""
                  type: Deployment
                  spec:
                    deploymentType: Kubernetes
                    service:
                      serviceRef: <+input>
                      serviceInputs: <+input>
                    environment:
                      environmentRef: <+input>
                      deployToAll: false
                      environmentInputs: <+input>
                      serviceOverrideInputs: <+input>
                      infrastructureDefinitions: <+input>
                    execution:
                      steps:
                        - step:
                            name: Rollout Deployment
                            identifier: rolloutDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                      rollbackSteps:
                        - step:
                            name: Rollback Rollout Deployment
                            identifier: rollbackRolloutDeployment
                            type: K8sRollingRollback
                            timeout: 10m
                            spec:
                              pruningEnabled: false
                  tags: {}
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: StageRollback

          EOT
        }

        ## Remote Pipeline template to create new branch from existing base branch

        resource "platform.Template" "pipeline_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Pipeline
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stages:
              - stage:
                  identifier: dvvdvd
                  name: dvvdvd
                  description: ""
                  type: Deployment
                  spec:
                    deploymentType: Kubernetes
                    service:
                      serviceRef: <+input>
                      serviceInputs: <+input>
                    environment:
                      environmentRef: <+input>
                      deployToAll: false
                      environmentInputs: <+input>
                      serviceOverrideInputs: <+input>
                      infrastructureDefinitions: <+input>
                    execution:
                      steps:
                        - step:
                            name: Rollout Deployment
                            identifier: rolloutDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                      rollbackSteps:
                        - step:
                            name: Rollback Rollout Deployment
                            identifier: rollbackRolloutDeployment
                            type: K8sRollingRollback
                            timeout: 10m
                            spec:
                              pruningEnabled: false
                  tags: {}
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: StageRollback

          EOT
        }

        ## Inline Pipeline template

        resource "platform.Template" "pipeline_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Pipeline
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stages:
              - stage:
                  identifier: dvvdvd
                  name: dvvdvd
                  description: ""
                  type: Deployment
                  spec:
                    deploymentType: Kubernetes
                    service:
                      serviceRef: <+input>
                      serviceInputs: <+input>
                    environment:
                      environmentRef: <+input>
                      deployToAll: false
                      environmentInputs: <+input>
                      serviceOverrideInputs: <+input>
                      infrastructureDefinitions: <+input>
                    execution:
                      steps:
                        - step:
                            name: Rollout Deployment
                            identifier: rolloutDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                      rollbackSteps:
                        - step:
                            name: Rollback Rollout Deployment
                            identifier: rollbackRolloutDeployment
                            type: K8sRollingRollback
                            timeout: 10m
                            spec:
                              pruningEnabled: false
                  tags: {}
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: StageRollback

          EOT
        }

        ## Inline Step template

        resource "platform.Template" "step_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Step
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            timeout: 10m
            type: ShellScript
            spec:
              shell: Bash
              onDelegate: true
              source:
                type: Inline
                spec:
                  script: <+input>
              environmentVariables: []
              outputVariables: []

          EOT
        }

        ## Remote Step template

        resource "platform.Template" "step_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Step
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            timeout: 10m
            type: ShellScript
            spec:
              shell: Bash
              onDelegate: true
              source:
                type: Inline
                spec:
                  script: <+input>
              environmentVariables: []
              outputVariables: []

          EOT
        }

        ## Remote Step template to create new branch from existing branch

        resource "platform.Template" "step_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Step
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            timeout: 10m
            type: ShellScript
            spec:
              shell: Bash
              onDelegate: true
              source:
                type: Inline
                spec:
                  script: <+input>
              environmentVariables: []
              outputVariables: []

          EOT
        }

        ## Inline Stage template

        resource "platform.Template" "stage_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Stage
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: <+input>
                serviceInputs: <+input>
              environment:
                environmentRef: <+input>
                deployToAll: false
                environmentInputs: <+input>
                infrastructureDefinitions: <+input>
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Shell Script_1
                      identifier: ShellScript_1
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: <+input>
                        environmentVariables: []
                        outputVariables: []
                      timeout: <+input>
                rollbackSteps: []
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback

          EOT
        }

        ## Remote Stage template

        resource "platform.Template" "stage_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Stage
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: <+input>
                serviceInputs: <+input>
              environment:
                environmentRef: <+input>
                deployToAll: false
                environmentInputs: <+input>
                infrastructureDefinitions: <+input>
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Shell Script_1
                      identifier: ShellScript_1
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: <+input>
                        environmentVariables: []
                        outputVariables: []
                      timeout: <+input>
                rollbackSteps: []
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback

          EOT
        }

        ## Remote Stage template to create new branch from existing branch

        resource "platform.Template" "stage_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: Stage
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: <+input>
                serviceInputs: <+input>
              environment:
                environmentRef: <+input>
                deployToAll: false
                environmentInputs: <+input>
                infrastructureDefinitions: <+input>
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Shell Script_1
                      identifier: ShellScript_1
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: <+input>
                        environmentVariables: []
                        outputVariables: []
                      timeout: <+input>
                rollbackSteps: []
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback

          EOT
        }

        ## Inline StepGroup template

        resource "platform.Template" "stepgroup_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: StepGroup
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stageType: Deployment
            steps:
              - step:
                  type: ShellScript
                  name: Shell Script_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: <+input>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m

          EOT
        }

        ## Remote StepGroup template

        resource "platform.Template" "stepgroup_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "main"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: StepGroup
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stageType: Deployment
            steps:
              - step:
                  type: ShellScript
                  name: Shell Script_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: <+input>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m

          EOT
        }

        ## Remote StepGroup template to create new branch from existing branch

        resource "platform.Template" "stepgroup_template_remote" {
          identifier = "identifier"
          org_id     = harness_platform_project.test.org_id
          project_id = harness_platform_project.test.id
          name       = "name"
          comments   = "comments"
          version    = "ab"
          is_stable  = true
          git_details {
            branch_name    = "new_branch"
            commit_message = "Commit"
            file_path      = "file_path"
            connector_ref  = "account.connector_ref"
            store_type     = "REMOTE"
            repo_name      = "repo_name"
            base_branch    = "main"
          }
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: StepGroup
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            stageType: Deployment
            steps:
              - step:
                  type: ShellScript
                  name: Shell Script_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: <+input>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m

          EOT
        }

        ## Inline Monitered Service template

        resource "platform.Template" "monitered_service_template_inline" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: MonitoredService
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            serviceRef: <+input>
            environmentRef: <+input>
            type: Application
            sources:
              changeSources:
                - name: Harness CD Next Gen
                  identifier: harness_cd_next_gen
                  type: HarnessCDNextGen
                  enabled: true
                  category: Deployment
                  spec: {}
              healthSources:
                - name: health
                  identifier: health
                  type: AppDynamics
                  spec:
                    applicationName: <+input>
                    tierName: <+input>
                    metricData:
                      Errors: true
                      Performance: true
                    metricDefinitions: []
                    feature: Application Monitoring
                    connectorRef: <+input>
                    metricPacks:
                      - identifier: Errors
                      - identifier: Performance

          EOT
        }

        ## Artifact Source template

        resource "platform.Template" "artifact_source_template" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: ArtifactSource
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            type: DockerRegistry
            spec:
              imagePath: library/nginx
              tag: <+input>
              connectorRef: account.Harness_DockerHub

          EOT
        }

        ## Deployment template

        resource "platform.Template" "deployment_template" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: CustomDeployment
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            infrastructure:
              variables:
                - name: kubeConnector
                  type: Connector
                  value: <+input>
                  description: ""
              fetchInstancesScript:
                store:
                  type: Inline
                  spec:
                    content: |
                      #
                      # Script is expected to query Infrastructure and dump json
                      # in $INSTANCE_OUTPUT_PATH file path
                      #
                      # Harness is expected to initialize ${INSTANCE_OUTPUT_PATH}
                      # environment variable - a random unique file path on delegate,
                      # so script execution can save the result.
                      #
                      /opt/harness-delegate/client-tools/kubectl/v1.19.2/kubectl get pods --namespace=harness-delegate-ng -o json > $INSTANCE_OUTPUT_PATH
              instanceAttributes:
                - name: instancename
                  jsonPath: metadata.name
                  description: ""
              instancesListPath: items
            execution:
              stepTemplateRefs: []

          EOT
        }

        ## Secrets Manager template

        resource "platform.Template" "secrets_manager_template" {
          identifier    = "identifier"
          org_id        = harness_platform_project.test.org_id
          project_id    = harness_platform_project.test.id
          name          = "name"
          comments      = "comments"
          version       = "ab"
          is_stable     = true
          template_yaml = <<-EOT
        template:
          name: "name"
          identifier: "identifier"
          versionLabel: "ab"
          type: SecretManager
          projectIdentifier: ${harness_platform_project.test.id}
          orgIdentifier: ${harness_platform_project.test.org_id}
          tags: {}
          spec:
            executionTarget: {}
            shell: Bash
            onDelegate: true
            source:
              spec:
                script: |-
                  curl -o secret.json -X GET https://example.com/<+secretManager.environmentVariables.enginename>/<+secretManager.environmentVariables.path> -H 'X-Vault-Token: <+secrets.getValue("vaultTokenOne")>'
                  secret=$(jq -r '.data."<+secretManager.environmentVariables.key>"' secret.json)
                type: Inline
            environmentVariables:
              - name: enginename
                type: String
                value: <+input>
              - name: path
                type: String
                value: <+input>
              - name: key
                type: String
                value: <+input>

          EOT
        }

        ### Creating Multiple Versions of a Template
        ##Stable version of the Template
        resource "platform.Template" "template_v1" {
          identifier    = "temp"
          org_id        = harness_platform_project.test.org_id
          name          = "temp"
          comments      = "comments"
          version       = "v1"
          is_stable     = true
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v1
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback

              EOT
        }

        ##Unstable version of the Template
        resource "platform.Template" "template_v2" {
          identifier    = "temp"
          org_id        = harness_platform_organization.test.id
          name          = "temp"
          comments      = "comments"
          version       = "v2"
          is_stable     = false
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v2
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback
              EOT
        }

        ##Updating the Stable Version of the Template from v1 to v2.
        resource "platform.Template" "template_v2" {
          identifier    = "temp"
          org_id        = harness_platform_organization.test.id
          name          = "temp"
          comments      = "comments"
          version       = "v2"
          is_stable     = true
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v2
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback
              EOT
        }

        resource "platform.Template" "template_v1" {
          identifier    = "temp"
          org_id        = harness_platform_organization.test.id
          name          = "temp"
          comments      = "comments"
          version       = "v1"
          is_stable     = false
          force_delete  = true
          template_yaml = <<-EOT
        			template:
              name: "temp"
              identifier: "temp"
              versionLabel: v1
              type: Pipeline
              orgIdentifier: ${harness_platform_organization.test.id}
              tags: {}
              spec:
                stages:
                  - stage:
                      name: dvvdvd
                      identifier: dvvdvd
                      description: ""
                      type: Deployment
                      spec:
                        deploymentType: Kubernetes
                        service:
                          serviceRef: <+input>
                          serviceInputs: <+input>
                        environment:
                          environmentRef: <+input>
                          deployToAll: false
                          environmentInputs: <+input>
                          serviceOverrideInputs: <+input>
                          infrastructureDefinitions: <+input>
                        execution:
                          steps:
                            - step:
                                name: Rollout Deployment
                                identifier: rolloutDeployment
                                type: K8sRollingDeploy
                                timeout: 10m
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                          rollbackSteps:
                            - step:
                                name: Rollback Rollout Deployment
                                identifier: rollbackRolloutDeployment
                                type: K8sRollingRollback
                                timeout: 10m
                                spec:
                                  pruningEnabled: false
                      tags: {}
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: StageRollback

              EOT

          depends_on = [time_sleep.wait_10_seconds]
        }

        resource "time_sleep" "wait_10_seconds" {
          depends_on       = [harness_platform_template.test2]
          destroy_duration = "10s"
        }

        ##Importing Account Level Templates
        resource "platform.Template" "test" {
          identifier      = "accounttemplate"
          name            = "accounttemplate"
          version         = "v2"
          is_stable       = false
          import_from_git = true
          git_import_details {
            branch_name   = "main"
            file_path     = ".harness/accounttemplate.yaml"
            connector_ref = "account.DoNotDeleteGithub"
            repo_name     = "open-repo"
          }
          template_import_request {
            template_name        = "accounttemplate"
            template_version     = "v2"
            template_description = ""
          }
        }

        ##Importing Org Level Templates
        resource "platform.Template" "test" {
          identifier      = "orgtemplate"
          name            = "orgtemplate"
          org_id          = "org"
          version         = "v2"
          is_stable       = false
          import_from_git = true
          git_import_details {
            branch_name   = "main"
            file_path     = ".harness/orgtemplate.yaml"
            connector_ref = "account.DoNotDeleteGithub"
            repo_name     = "open-repo"
          }
          template_import_request {
            template_name        = "orgtemplate"
            template_version     = "v2"
            template_description = ""
          }
        }

        ##Importing Project Level Templates
        resource "platform.Template" "test" {
          identifier      = "projecttemplate"
          name            = "projecttemplate"
          org_id          = "org"
          project_id      = "project"
          version         = "v2"
          is_stable       = false
          import_from_git = true
          git_import_details {
            branch_name   = "main"
            file_path     = ".harness/projecttemplate.yaml"
            connector_ref = "account.DoNotDeleteGithub"
            repo_name     = "open-repo"
          }
          template_import_request {
            template_name        = "projecttemplate"
            template_version     = "v2"
            template_description = ""
          }
        }

        Import org level template

        ```sh
        $ pulumi import harness:platform/template:Template example <ord_id>/<template_id>
        ```

        Import project level template

        ```sh
        $ pulumi import harness:platform/template:Template example <org_id>/<project_id>/<template_id>
        ```

        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[str]] = None,
                 git_details: Optional[pulumi.Input[pulumi.InputType['TemplateGitDetailsArgs']]] = None,
                 git_import_details: Optional[pulumi.Input[pulumi.InputType['TemplateGitImportDetailsArgs']]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 import_from_git: Optional[pulumi.Input[bool]] = None,
                 is_stable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_import_request: Optional[pulumi.Input[pulumi.InputType['TemplateTemplateImportRequestArgs']]] = None,
                 template_yaml: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["description"] = description
            __props__.__dict__["force_delete"] = force_delete
            __props__.__dict__["git_details"] = git_details
            __props__.__dict__["git_import_details"] = git_import_details
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["import_from_git"] = import_from_git
            __props__.__dict__["is_stable"] = is_stable
            __props__.__dict__["name"] = name
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template_import_request"] = template_import_request
            __props__.__dict__["template_yaml"] = template_yaml
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        super(Template, __self__).__init__(
            'harness:platform/template:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            force_delete: Optional[pulumi.Input[str]] = None,
            git_details: Optional[pulumi.Input[pulumi.InputType['TemplateGitDetailsArgs']]] = None,
            git_import_details: Optional[pulumi.Input[pulumi.InputType['TemplateGitImportDetailsArgs']]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            import_from_git: Optional[pulumi.Input[bool]] = None,
            is_stable: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            template_import_request: Optional[pulumi.Input[pulumi.InputType['TemplateTemplateImportRequestArgs']]] = None,
            template_yaml: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Specify comment with respect to changes.
        :param pulumi.Input[str] description: Description of the entity. Description field is deprecated
        :param pulumi.Input[str] force_delete: Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        :param pulumi.Input[pulumi.InputType['TemplateGitDetailsArgs']] git_details: Contains parameters related to creating an Entity for Git Experience.
        :param pulumi.Input[pulumi.InputType['TemplateGitImportDetailsArgs']] git_import_details: Contains Git Information for importing entities from Git
        :param pulumi.Input[str] identifier: Unique identifier of the resource
        :param pulumi.Input[bool] import_from_git: Flag to set if importing from Git
        :param pulumi.Input[bool] is_stable: True if given version for template to be set as stable.
        :param pulumi.Input[str] name: Name of the Variable
        :param pulumi.Input[str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[str] project_id: Project Identifier for the Entity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource.
        :param pulumi.Input[pulumi.InputType['TemplateTemplateImportRequestArgs']] template_import_request: Contains parameters for importing template.
        :param pulumi.Input[str] template_yaml: Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        :param pulumi.Input[str] version: Version Label for Template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateState.__new__(_TemplateState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["description"] = description
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["git_details"] = git_details
        __props__.__dict__["git_import_details"] = git_import_details
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["import_from_git"] = import_from_git
        __props__.__dict__["is_stable"] = is_stable
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["template_import_request"] = template_import_request
        __props__.__dict__["template_yaml"] = template_yaml
        __props__.__dict__["version"] = version
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Specify comment with respect to changes.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    @_utilities.deprecated("""description field is deprecated""")
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the entity. Description field is deprecated
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[str]:
        """
        Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="gitDetails")
    def git_details(self) -> pulumi.Output['outputs.TemplateGitDetails']:
        """
        Contains parameters related to creating an Entity for Git Experience.
        """
        return pulumi.get(self, "git_details")

    @property
    @pulumi.getter(name="gitImportDetails")
    def git_import_details(self) -> pulumi.Output[Optional['outputs.TemplateGitImportDetails']]:
        """
        Contains Git Information for importing entities from Git
        """
        return pulumi.get(self, "git_import_details")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="importFromGit")
    def import_from_git(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag to set if importing from Git
        """
        return pulumi.get(self, "import_from_git")

    @property
    @pulumi.getter(name="isStable")
    def is_stable(self) -> pulumi.Output[bool]:
        """
        True if given version for template to be set as stable.
        """
        return pulumi.get(self, "is_stable")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[Optional[str]]:
        """
        Organization Identifier for the Entity
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Project Identifier for the Entity
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags to associate with the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateImportRequest")
    def template_import_request(self) -> pulumi.Output[Optional['outputs.TemplateTemplateImportRequest']]:
        """
        Contains parameters for importing template.
        """
        return pulumi.get(self, "template_import_request")

    @property
    @pulumi.getter(name="templateYaml")
    def template_yaml(self) -> pulumi.Output[str]:
        """
        Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        """
        return pulumi.get(self, "template_yaml")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version Label for Template.
        """
        return pulumi.get(self, "version")

