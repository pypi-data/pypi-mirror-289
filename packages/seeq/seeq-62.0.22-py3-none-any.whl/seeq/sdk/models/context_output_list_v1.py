# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 62.0.22-v202408071639
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ContextOutputListV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'list[ContextCommentOutputV1]',
        'labels': 'list[ContextLabelOutputV1]',
        'opaque': 'list[ContextOpaqueOutputV1]',
        'total_results': 'int'
    }

    attribute_map = {
        'comments': 'comments',
        'labels': 'labels',
        'opaque': 'opaque',
        'total_results': 'totalResults'
    }

    def __init__(self, comments=None, labels=None, opaque=None, total_results=None):
        """
        ContextOutputListV1 - a model defined in Swagger
        """

        self._comments = None
        self._labels = None
        self._opaque = None
        self._total_results = None

        if comments is not None:
          self.comments = comments
        if labels is not None:
          self.labels = labels
        if opaque is not None:
          self.opaque = opaque
        if total_results is not None:
          self.total_results = total_results

    @property
    def comments(self):
        """
        Gets the comments of this ContextOutputListV1.
        A list of comments

        :return: The comments of this ContextOutputListV1.
        :rtype: list[ContextCommentOutputV1]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this ContextOutputListV1.
        A list of comments

        :param comments: The comments of this ContextOutputListV1.
        :type: list[ContextCommentOutputV1]
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def labels(self):
        """
        Gets the labels of this ContextOutputListV1.
        A list of labels

        :return: The labels of this ContextOutputListV1.
        :rtype: list[ContextLabelOutputV1]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this ContextOutputListV1.
        A list of labels

        :param labels: The labels of this ContextOutputListV1.
        :type: list[ContextLabelOutputV1]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def opaque(self):
        """
        Gets the opaque of this ContextOutputListV1.
        A list of opaque context

        :return: The opaque of this ContextOutputListV1.
        :rtype: list[ContextOpaqueOutputV1]
        """
        return self._opaque

    @opaque.setter
    def opaque(self, opaque):
        """
        Sets the opaque of this ContextOutputListV1.
        A list of opaque context

        :param opaque: The opaque of this ContextOutputListV1.
        :type: list[ContextOpaqueOutputV1]
        """
        if opaque is None:
            raise ValueError("Invalid value for `opaque`, must not be `None`")

        self._opaque = opaque

    @property
    def total_results(self):
        """
        Gets the total_results of this ContextOutputListV1.
        The total number of context

        :return: The total_results of this ContextOutputListV1.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """
        Sets the total_results of this ContextOutputListV1.
        The total number of context

        :param total_results: The total_results of this ContextOutputListV1.
        :type: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContextOutputListV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
