# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from typing import Optional

from pydantic import BaseModel, StrictStr, validator


class ValidateConnectionCredentialsResponse(BaseModel):
    """
    Response message for `ValidateConnectionCredentials` method.
    """

    status: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    __properties = ["status", "message"]

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "VALIDATION_STATUS_UNKNOWN",
            "VALIDATION_STATUS_VALIDATING",
            "VALIDATION_STATUS_VALID",
            "VALIDATION_STATUS_INVALID",
        ):
            raise ValueError(
                "must be one of enum values ('VALIDATION_STATUS_UNKNOWN', 'VALIDATION_STATUS_VALIDATING', 'VALIDATION_STATUS_VALID', 'VALIDATION_STATUS_INVALID')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidateConnectionCredentialsResponse:
        """Create an instance of ValidateConnectionCredentialsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidateConnectionCredentialsResponse:
        """Create an instance of ValidateConnectionCredentialsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidateConnectionCredentialsResponse.parse_obj(obj)

        _obj = ValidateConnectionCredentialsResponse.parse_obj(
            {"status": obj.get("status"), "message": obj.get("message")}
        )
        return _obj
