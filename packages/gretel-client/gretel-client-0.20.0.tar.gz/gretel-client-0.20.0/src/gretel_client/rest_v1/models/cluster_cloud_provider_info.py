# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from typing import Any, Dict, Optional

from pydantic import BaseModel, StrictStr


class ClusterCloudProviderInfo(BaseModel):
    """
    ClusterCloudProviderInfo
    """

    region: Optional[StrictStr] = None
    aws: Optional[Dict[str, Any]] = None
    gcp: Optional[Dict[str, Any]] = None
    azure: Optional[Dict[str, Any]] = None
    __properties = ["region", "aws", "gcp", "azure"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterCloudProviderInfo:
        """Create an instance of ClusterCloudProviderInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterCloudProviderInfo:
        """Create an instance of ClusterCloudProviderInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClusterCloudProviderInfo.parse_obj(obj)

        _obj = ClusterCloudProviderInfo.parse_obj(
            {
                "region": obj.get("region"),
                "aws": obj.get("aws"),
                "gcp": obj.get("gcp"),
                "azure": obj.get("azure"),
            }
        )
        return _obj
