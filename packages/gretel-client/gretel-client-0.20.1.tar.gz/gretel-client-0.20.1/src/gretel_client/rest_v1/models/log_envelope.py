# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictStr


class LogEnvelope(BaseModel):
    """
    A LogEnvelope represents a log line suitable for displaying job specific information. These logs are currently used to display workflow and (v2) model related logs across our product.
    """

    msg: Optional[StrictStr] = Field(
        None,
        description="The string message for the log line. This message will get displayed across various Gretel products views.",
    )
    ts: Optional[datetime] = Field(
        None, description="The timestamp for the associated log message."
    )
    __properties = ["msg", "ts"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LogEnvelope:
        """Create an instance of LogEnvelope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LogEnvelope:
        """Create an instance of LogEnvelope from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LogEnvelope.parse_obj(obj)

        _obj = LogEnvelope.parse_obj({"msg": obj.get("msg"), "ts": obj.get("ts")})
        return _obj
