"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from comfydeploy import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetRunRequest:
    run_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'run_id', 'style': 'form', 'explode': True }})
    



@dataclasses.dataclass
class WorkflowInputs:
    pass


@dataclasses.dataclass
class GetRunWorkflowAPI:
    pass


class Origin(str, Enum):
    MANUAL = 'manual'
    API = 'api'
    PUBLIC_SHARE = 'public-share'
    PUBLIC_TEMPLATE = 'public-template'
    WORKSPACE = 'workspace'


class Status(str, Enum):
    NOT_STARTED = 'not-started'
    RUNNING = 'running'
    UPLOADING = 'uploading'
    SUCCESS = 'success'
    FAILED = 'failed'
    STARTED = 'started'
    QUEUED = 'queued'
    TIMEOUT = 'timeout'
    CANCELLED = 'cancelled'


class GetRunGpu(str, Enum):
    T4 = 'T4'
    L4 = 'L4'
    A10_G = 'A10G'
    A100 = 'A100'
    H100 = 'H100'


class MachineType(str, Enum):
    CLASSIC = 'classic'
    RUNPOD_SERVERLESS = 'runpod-serverless'
    MODAL_SERVERLESS = 'modal-serverless'
    COMFY_DEPLOY_SERVERLESS = 'comfy-deploy-serverless'
    WORKSPACE = 'workspace'
    WORKSPACE_V2 = 'workspace-v2'


@dataclasses.dataclass
class RunLog:
    pass


class WebhookStatus(str, Enum):
    SUCCESS = 'success'
    FAILED = 'failed'
    NOT_STARTED = 'not-started'
    RUNNING = 'running'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetRunResponseBody:
    r"""Retrieve the output"""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    workflow_version_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_version_id') }})
    workflow_inputs: WorkflowInputs = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_inputs') }})
    workflow_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_id') }})
    workflow_api: GetRunWorkflowAPI = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_api') }})
    machine_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machine_id') }})
    origin: Origin = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    status: Status = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    ended_at: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ended_at') }})
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    queued_at: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queued_at') }})
    started_at: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started_at') }})
    gpu: Optional[GetRunGpu] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpu') }})
    machine_version: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machine_version') }})
    machine_type: Optional[MachineType] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machine_type') }})
    modal_function_call_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modal_function_call_id') }})
    user_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})
    org_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_id') }})
    run_log: RunLog = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_log') }})
    live_status: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('live_status') }})
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    is_realtime: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_realtime') }})
    webhook: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook') }})
    webhook_status: Optional[WebhookStatus] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook_status') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetRunResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field(metadata={'dataclasses_json': { 'exclude': lambda f: True }})
    object: Optional[GetRunResponseBody] = dataclasses.field(default=None)
    r"""Retrieve the output"""
    

