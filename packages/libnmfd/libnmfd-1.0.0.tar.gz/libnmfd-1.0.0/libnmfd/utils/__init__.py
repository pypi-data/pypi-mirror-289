import numpy as np
import os
import scipy

EPS = 2.0 ** -52
MAX_WAV_VALUE = 2.0 ** 15
PATH_TO_MATRICES = 'matrices/'

def freq2midi(freq):
    """Converts a given frequency in Hz to the corresponding MIDI pitch, thereby
    applying a quantization to semi-tone steps on the equal tempered scale.
    No sanity checks on the validity of the input are performed.

    Parameters
    ----------
    freq: float
        The given frequency in Hz

    Returns
    -------
    midi: float
        The MIDI pitch, quantized to equal temp. scale
    """
    midi = round(69 + 12 * np.log2(freq/440))
    return midi


def midi2freq(midi):
    """Converts a given MIDI pitch to the corresponding frequency in Hz. No
    sanity checks on the validity of the input are performed.

    Parameters
    ----------
    midi: array-like / float
        The MIDI pitch, can also be floating value

    Returns
    -------
    freq: array-like / float
        The frequency in Hz
    """
    freq = (440.0 / 32) * 2 ** ((midi - 9) / 12)

    return freq


def make_monaural(audio):
    """Converts multichannel audio to mono-channel output

    Parameters
    ----------
    audio: array-like
        Audio input in numpy format

    Returns
    -------
    audio: array-like
        Monochannel audio

    """
    audio = np.mean(audio, axis=1) if len(audio.shape) == 2 else audio

    return audio


def load_matlab_dict(filepath:str, field:str) -> np.ndarray:
    """Loads .mat file from the directory

    Parameters
    ----------
    filepath: str
        Path to the .mat file

    field: str
        Name of the MATLAB matrix, which is the key of the dictionary

    Returns
    -------
    mat[field]: np.ndarray
        MATLAB matrix in python
    """
    mat = scipy.io.loadmat(filepath)
    return mat[field]


def get_matlab_matrices(function_name):
    """Loads the matrices generated by MATLAB for unit tests

    Parameters
    ----------
    function_name: str
        Function name, e.g. NMFD

    Returns
    -------
    matrix_dict: dict
        MATLAB matrix in dict format
    """
    base_dir = os.path.join(PATH_TO_MATRICES, function_name)
    filename_list = os.listdir(base_dir)

    matrix_dict = dict()

    for filename in filename_list:
        filepath = os.path.join(base_dir, filename)
        matrix_id = filename.split('.')[0]
        matlab_matrix = load_matlab_dict(filepath, matrix_id)
        matrix_dict[matrix_id] = matlab_matrix

    return matrix_dict

def pcm_int16_to_float32np(audio:np.ndarray) -> np.ndarray:
    """Converts the data type of the input from int16 to float32

    Parameters
    ----------
    audio: np.ndarray
        Numpy array in int16 type

    Returns
    -------
    res: np.ndarray
        Numpy array in float32 type

    """
    res = np.array(audio, dtype=np.float32) / MAX_WAV_VALUE
    res[res > 1] = 1
    res[res < -1] = -1

    return res