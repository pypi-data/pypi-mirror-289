"use strict";(self.webpackChunkjupyterlab_collaborative_chat=self.webpackChunkjupyterlab_collaborative_chat||[]).push([[288],{1288:(e,t,a)=>{a.r(t),a.d(t,{default:()=>B});var s=a(538),n=a(9111),i=a(974),o=a(2607),r=a(4074),d=a(9360),c=a(31),h=a(7656),l=a(765),g=a(6605),m=a(1355),u=a(9994),p=a(4602),y=a(7262),C=a(2697);class _ extends C.YDocument{constructor(e){super(e),this.version="1.0.0",this._usersObserver=e=>{const t=new Array;e.keysChanged.forEach((a=>{const s=e.changes.keys.get(a);if(s)switch(s.action){case"add":t.push({key:a,newValue:this._users.get(a),type:"add"});break;case"delete":t.push({key:a,oldValue:s.oldValue,type:"remove"});break;case"update":t.push({key:a,oldValue:s.oldValue,newValue:this._users.get(a),type:"change"})}})),this._changed.emit({userChange:t})},this._messagesObserver=e=>{const t=e.delta;this._changed.emit({messageChanges:t})},this._metadataObserver=e=>{const t=new Array;e.changes.keys.forEach(((e,a)=>{switch(e.action){case"add":t.push({key:a,newValue:this._metadata.get(a),type:"add"});break;case"delete":t.push({key:a,oldValue:e.oldValue,type:"remove"});break;case"update":t.push({key:a,oldValue:e.oldValue,newValue:this._metadata.get(a),type:"change"})}})),this._changed.emit({metadataChanges:t})},this._users=this.ydoc.getMap("users"),this._users.observe(this._usersObserver),this._messages=this.ydoc.getArray("messages"),this._messages.observe(this._messagesObserver),this._metadata=this.ydoc.getMap("metadata"),this._metadata.observe(this._metadataObserver)}static create(e){return new _(e)}get id(){return this._metadata.get("id")||""}get users(){return y.JSONExt.deepCopy(this._users.toJSON())}get messages(){return y.JSONExt.deepCopy(this._messages.toJSON())}getUser(e){if(e)return this._users.get(e)}setUser(e){this.transact((()=>{this._users.set(e.username,e)}))}getMessage(e){return this._messages.get(e)}addMessage(e){this.transact((()=>{this._messages.push([e])}))}updateMessage(e,t){this.transact((()=>{this._messages.delete(e),this._messages.insert(e,[t])}))}getMessageIndex(e){return this._messages.toArray().findIndex((t=>t.id===e))}deleteMessage(e){this.transact((()=>{this._messages.delete(e)}))}}class b extends s.ChatModel{constructor(e){super(e),this.collaborative=!0,this._onchange=(e,t)=>{if(t.messageChanges){const e=t.messageChanges;let a=0;e.forEach((e=>{if(e.retain)a+=e.retain;else if(e.insert){const t=e.insert.map((e=>({...e,sender:this.sharedModel.getUser(e.sender)||{username:"User undefined"}})));this.messagesInserted(a,t),a+=t.length}else e.delete&&this.messagesDeleted(a,e.delete)}))}t.metadataChanges&&t.metadataChanges.forEach((e=>{"id"===e.key&&(this.id=e.newValue)}))},this.defaultKernelName="",this.defaultKernelLanguage="",this._dirty=!1,this._readOnly=!1,this._disposed=new p.Signal(this),this._contentChanged=new p.Signal(this),this._stateChanged=new p.Signal(this),this._user=e.user||{username:"user undefined"};const{widgetConfig:t,sharedModel:a}=e;this._sharedModel=a||_.create(),this.id=this._sharedModel.id,this.sharedModel.changed.connect(this._onchange,this),this.config=t.config,t.configChanged.connect(((e,t)=>{this.config=t}))}get user(){return this._user}get sharedModel(){return this._sharedModel}get contentChanged(){return this._contentChanged}get stateChanged(){return this._stateChanged}get dirty(){return this._dirty}set dirty(e){this._dirty=e}get readOnly(){return this._readOnly}set readOnly(e){this._readOnly=e}get disposed(){return this._disposed}dispose(){this.isDisposed||(super.dispose(),this._sharedModel.dispose(),this._disposed.emit(),p.Signal.clearData(this))}toString(){return JSON.stringify({},null,2)}fromString(e){}toJSON(){return JSON.parse(this.toString())}fromJSON(e){}addMessage(e){const t={type:"msg",id:y.UUID.uuid4(),body:e.body,time:Date.now()/1e3,sender:this._user.username,raw_time:!0};this.sharedModel.getUser(this._user.username)!==this._user&&this.sharedModel.setUser(this._user),this.sharedModel.addMessage(t)}updateMessage(e,t){const a=this.sharedModel.getMessageIndex(e);let s=this.sharedModel.getMessage(a);if(s)s.body=t.body,s.edited=!0;else{const a=t.sender.username;s={type:"msg",id:e||y.UUID.uuid4(),body:t.body,time:t.time||Date.now()/1e3,sender:a,edited:!0}}this.sharedModel.updateMessage(a,s)}deleteMessage(e){const t=this.sharedModel.getMessageIndex(e),a=this.sharedModel.getMessage(t);a?(a.body="",a.deleted=!0,this.sharedModel.updateMessage(t,a)):console.error("The message to delete does not exist")}}var f=a(3345),v=a.n(f);const M={name:"chat",displayName:"Chat",mimeTypes:["text/json","application/json"],extensions:[".chat"],fileFormat:"text",contentType:"chat",icon:s.chatIcon},w=new y.Token("jupyter-collaborative-chat:IChatFactory"),x="collaborative-chat:create",I="collaborative-chat:open",k="collaborative-chat:moveToSide",R="collaborative-chat:markAsRead",T=new y.Token("jupyter-collaborative-chat:IChatPanel"),S=new y.Token("jupyter-collaborative-chat:IActiveCellManager"),N="jp-collab-chat-title-unread";class j extends u.DocumentWidget{constructor(e){super(e),this._unreadChanged=(e,t)=>{t.length?this.title.className.includes(N)||(this.title.className+=` ${N}`):this.title.className=this.title.className.replace(N,"")},this.addClass("jp-collab-chat-main-panel"),this.model.name=this.context.localPath,this.model.unreadChanged.connect(this._unreadChanged)}dispose(){this.model.unreadChanged.disconnect(this._unreadChanged),this.context.dispose(),this.content.dispose(),super.dispose()}get model(){return this.content.model}}class E extends m.SidePanel{constructor(e){super(e),this.updateChatNames=async()=>{const e=M.extensions[0];this._drive.get(".").then((t=>{const a=t.content.filter((t=>"file"===t.type&&t.name.endsWith(e))).map((t=>r.PathExt.basename(t.name,e)));this._chatNamesChanged.emit(a)})).catch((e=>console.error("Error getting the chat files from drive",e)))},this._chatSelected=e=>{const t=e.target.value;if("-"===t)return;const a=this.widgets.findIndex((e=>e.name===t));-1===a?this._commands.execute(I,{filepath:`${t}${M.extensions[0]}`,inSidePanel:!0}):this.widgets[a].isVisible||this.content.expand(a),e.target.selectedIndex=0},this._chatNamesChanged=new p.Signal(this),this._config={},this.addClass("jp-collab-chat-sidepanel"),this._commands=e.commands,this._drive=e.drive,this._rmRegistry=e.rmRegistry,this._themeManager=e.themeManager,this._autocompletionRegistry=e.autocompletionRegistry;const t=new m.CommandToolbarButton({commands:this._commands,id:x,args:{inSidePanel:!0},icon:m.addIcon});t.addClass("jp-collab-chat-add"),this.toolbar.addItem("createChat",t),this._openChat=m.ReactWidget.create(v().createElement(W,{chatNamesChanged:this._chatNamesChanged,handleChange:this._chatSelected.bind(this)})),this._openChat.addClass("jp-collab-chat-open"),this.toolbar.addItem("openChat",this._openChat),this.content.expansionToggled.connect(this._onExpansionToggled,this)}get config(){return this._config}set config(e){this._config={...this._config,...e},this.widgets.forEach((t=>{t.model.config=e}))}addChat(e,t){const a=this.content;for(let e=0;e<this.widgets.length;e++)a.collapse(e);e.name=t;const n=new s.ChatWidget({model:e,rmRegistry:this._rmRegistry,themeManager:this._themeManager,autocompletionRegistry:this._autocompletionRegistry});this.addWidget(new A({name:t,widget:n,commands:this._commands}))}onAfterShow(e){var t;null===(t=this._openChat.renderPromise)||void 0===t||t.then((()=>this.updateChatNames()))}_onExpansionToggled(e,t){if(this.widgets[t].isVisible)for(let a=0;a<this.widgets.length;a++)a!==t&&e.collapse(a)}}class A extends m.PanelWithToolbar{constructor(e){var t;super(e),this._unreadChanged=(e,t)=>{this._markAsRead.enabled=t.length>0},this.addClass("jp-collab-chat-section"),this._name=e.name,this.title.label=this._name,this.title.caption=this._name,this.toolbar.addClass("jp-collab-chat-toolbar"),this._markAsRead=new m.ToolbarButton({icon:s.readIcon,iconLabel:"Mark chat as read",className:"jp-mod-styled",onClick:()=>this.model.unreadMessages=[]});const a=new m.ToolbarButton({icon:m.launchIcon,iconLabel:"Move the chat to the main area",className:"jp-mod-styled",onClick:()=>{this.model.dispose(),e.commands.execute(I,{filepath:`${this._name}${M.extensions[0]}`}),this.dispose()}}),n=new m.ToolbarButton({icon:m.closeIcon,iconLabel:"Close the chat",className:"jp-mod-styled",onClick:()=>{this.model.dispose(),this.dispose()}});this.toolbar.addItem("collaborativeChat-markRead",this._markAsRead),this.toolbar.addItem("collaborativeChat-moveMain",a),this.toolbar.addItem("collaborativeChat-close",n),this.addWidget(e.widget),null===(t=this.model.unreadChanged)||void 0===t||t.connect(this._unreadChanged),this._markAsRead.enabled=this.model.unreadMessages.length>0,e.widget.node.style.height="100%"}get name(){return this._name}get model(){return this.widgets[0].model}dispose(){var e;null===(e=this.model.unreadChanged)||void 0===e||e.disconnect(this._unreadChanged),super.dispose()}}function W({chatNamesChanged:e,handleChange:t}){const[a,s]=(0,f.useState)([]);return e.connect(((e,t)=>{s(t)})),v().createElement(m.HTMLSelect,{onChange:t},v().createElement("option",{value:"-"},"Open a chat"),a.map((e=>v().createElement("option",{value:e},e))))}class O{constructor(e){this.configChanged=new p.Signal(this),this.config=e,this.configChanged.connect(((e,t)=>{this.config={...this.config,...t}}))}}class P extends u.ABCWidgetFactory{constructor(e){super(e),this._themeManager=e.themeManager,this._rmRegistry=e.rmRegistry,this._autocompletionRegistry=e.autocompletionRegistry}createNewWidget(e){return e.rmRegistry=this._rmRegistry,e.themeManager=this._themeManager,e.autocompletionRegistry=this._autocompletionRegistry,new j({context:e,content:new s.ChatWidget(e)})}}class D{constructor(e){var t;this.collaborative=!0,this._disposed=!1,this._user=e.user,this._widgetConfig=e.widgetConfig,this._commands=e.commands,this._activeCellManager=null!==(t=e.activeCellManager)&&void 0!==t?t:null}get name(){return"chat"}get contentType(){return"chat"}get fileFormat(){return"text"}get isDisposed(){return this._disposed}dispose(){this._disposed=!0}preferredLanguage(e){return""}createNew(e){return new b({...e,user:this._user,widgetConfig:this._widgetConfig,commands:this._commands,activeCellManager:this._activeCellManager})}}const V="Chat",F="jupyterlab-collaborative-chat:factory",$={id:"jupyterlab-collaborative-chat:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:s.IAutocompletionRegistry,activate:e=>new s.AutocompletionRegistry},J={id:F,description:"A document factories for collaborative chat",autoStart:!0,requires:[h.IRenderMimeRegistry],optional:[S,s.IAutocompletionRegistry,n.ICollaborativeDrive,i.ILayoutRestorer,l.ISettingRegistry,o.IThemeManager,o.IToolbarWidgetRegistry,g.ITranslator],provides:w,activate:(e,t,a,s,n,i,r,d,c,h)=>{const l=null!=h?h:g.nullTranslator;let m,u=!1,p=!0,y=!0,C=!0;function b(e){u=e.get("sendWithShiftEnter").composite,p=e.get("stackMessages").composite,y=e.get("unreadNotifications").composite,C=e.get("enableCodeToolbar").composite,f.configChanged.emit({sendWithShiftEnter:u,stackMessages:p,unreadNotifications:y,enableCodeToolbar:C})}r&&(c&&(m=(0,o.createToolbarFactory)(c,r,V,F,l)),Promise.all([e.restored,r.load(F)]).then((([,e])=>{b(e),e.changed.connect(b)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const f=new O({sendWithShiftEnter:u,stackMessages:p,unreadNotifications:y,enableCodeToolbar:C}),v=new o.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(M),n){const e=()=>_.create();n.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,s=new D({user:t,widgetConfig:f,commands:e.commands,activeCellManager:a});e.docRegistry.addModelFactory(s)})).catch((e=>console.error("The collaborative chat model factory is not initialized",e)));const w=new P({name:V,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:d,rmRegistry:t,toolbarFactory:m,translator:l,autocompletionRegistry:s});return w.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{v.save(a)})),v.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(R)))})),e.docRegistry.addWidgetFactory(w),i&&i.restore(v,{command:"docmanager:open",args:e=>({path:e.context.path,factory:V}),name:e=>e.context.path,when:e.serviceManager.ready}),{widgetConfig:f,tracker:v}}},U={id:"jupyterlab-collaborative-chat:commands",description:"The commands to create or open a chat",autoStart:!0,requires:[n.ICollaborativeDrive,w],optional:[S,T,o.ICommandPalette,d.ILauncher],activate:(e,t,a,n,i,d,c)=>{const{commands:h}=e,{tracker:l,widgetConfig:g}=a;h.addCommand(x,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:s.chatIcon,execute:async e=>{var a,s;const n=null!==(a=e.inSidePanel)&&void 0!==a&&a;let i=null!==(s=e.name)&&void 0!==s?s:null,r="";if(i||(i=(await o.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===i)return;i&&(r=i.endsWith(M.extensions[0])?i:`${i}${M.extensions[0]}`);let d=!0;if(r?await t.get(r,{content:!1}).catch((()=>{d=!1})):d=!1,!d){let e=await t.newUntitled({type:"file",ext:M.extensions[0]});if(r&&(e=await t.rename(e.path,r)),!e)return(0,o.showErrorMessage)("Error creating a chat","An error occured while creating the chat"),"";r=e.path}if(h.hasCommand(I))return h.execute(I,{filepath:r,inSidePanel:n});h.execute("docmanager:open",{path:`RTC:${r}`,factory:V})}}),d&&d.addItem({category:"Chat",command:x,args:{isPalette:!0}}),c&&c.add({command:x,category:"Chat",rank:1}),h.addCommand(R,{caption:"Mark chat as read",icon:s.readIcon,isEnabled:()=>null!==l.currentWidget&&l.currentWidget===e.shell.currentWidget&&l.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof j&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${R}' should be executed from the toolbar button only`)}}),l.currentChanged.connect((()=>{h.notifyCommandChanged(R)})),e.serviceManager.ready.then((()=>{const a=e.serviceManager.user.identity;h.addCommand(I,{label:"Open a chat",execute:async s=>{var d,c;const l=null!==(d=s.inSidePanel)&&void 0!==d&&d;let m=null!==(c=s.filepath)&&void 0!==c?c:null;if(null===m&&(m=(await o.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!m)return;let u=!0;if(await t.get(m,{content:!1}).catch((()=>{u=!1})),u)if(l&&i){e.shell.activateById(i.id);const s=await t.get(m),o=t.sharedModelFactory.createNew({path:s.path,format:s.format,contentType:M.contentType,collaborative:!0}),d=new b({user:a,sharedModel:o,widgetConfig:g,commands:e.commands,activeCellManager:n});i.addChat(d,r.PathExt.basename(s.name,M.extensions[0]))}else h.execute("docmanager:open",{path:`RTC:${m}`,factory:V});else(0,o.showErrorMessage)("Error opening chat",`'${m}' is not a valid path`)}}),d&&d.addItem({category:"Chat",command:I})})).catch((e=>console.error("The command to open a chat is not initialized\n",e)))}},L={id:"jupyterlab-collaborative-chat:chat-panel",description:"A chat extension for Jupyter",autoStart:!0,provides:T,requires:[n.ICollaborativeDrive,h.IRenderMimeRegistry],optional:[s.IAutocompletionRegistry,i.ILayoutRestorer,c.INotebookTracker,o.IThemeManager],activate:(e,t,a,n,i,o,r)=>{const{commands:d}=e,c=new E({commands:d,drive:t,rmRegistry:a,themeManager:r,autocompletionRegistry:n});c.id="JupyterCollaborationChat:sidepanel",c.title.icon=s.chatIcon,c.title.caption="Jupyter Chat",e.shell.add(c,"left",{rank:2e3}),i&&i.add(c,"jupyter-chat");const h=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;h.includes(e)&&c.updateChatNames()}})),d.addCommand(k,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:m.launchIcon,isEnabled:()=>d.hasCommand(I),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof j&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${k}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();d.execute(I,{filepath:a,inSidePanel:!0}),t.dispose()}}),c}},B=[{id:"jupyterlab-collaborative-chat:activeCellManager",description:"the active cell manager plugin",autoStart:!0,requires:[c.INotebookTracker],provides:S,activate:(e,t)=>new s.ActiveCellManager({tracker:t,shell:e.shell})},$,U,J,L]}}]);