#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__all__ = [
    '_atomspecParser',
    '_atomspecSemantics',
    'main'
]

KEYWORDS = {}


class _atomspecBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(_atomspecBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class _atomspecParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=_atomspecBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(_atomspecParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _atom_specifier_(self):
        with self._choice():
            with self._option():
                self._as_term_()
                self.name_last_node('left')
                self._token('&')
                self.name_last_node('operator')
                self._atom_specifier_()
                self.name_last_node('right')
            with self._option():
                self._as_term_()
                self.name_last_node('left')
                self._token('|')
                self.name_last_node('operator')
                self._atom_specifier_()
                self.name_last_node('right')
            with self._option():
                self._as_term_()
                self.name_last_node('left')
            self._error('no available options')
        self.ast._define(
            ['left', 'operator', 'right'],
            []
        )

    @graken()
    def _as_term_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._atom_specifier_()
                self.name_last_node('atomspec')
                self._token(')')
                with self._optional():
                    self._zone_selector_()
                    self.name_last_node('zone')
            with self._option():
                self._token('~')
                self._as_term_()
                self.name_last_node('tilde')
                with self._optional():
                    self._zone_selector_()
                    self.name_last_node('zone')
            with self._option():
                self._selector_name_()
                self.name_last_node('selector')
                with self._optional():
                    self._zone_selector_()
                    self.name_last_node('zone')
            with self._option():
                self._model_list_()
                self.name_last_node('models')
            self._error('no available options')
        self.ast._define(
            ['atomspec', 'models', 'selector', 'tilde', 'zone'],
            []
        )

    @graken()
    def _selector_name_(self):
        self._pattern(r'[a-zA-Z_][-+a-zA-Z0-9_]*')
        self.name_last_node('name')
        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _model_list_(self):

        def block0():
            self._model_()
            self.add_last_node_to_name('model')
        self._positive_closure(block0)
        self.ast._define(
            [],
            ['model']
        )

    @graken()
    def _model_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('#!')
                        with self._option():
                            self._token('#')
                        self._error('expecting one of: # #!')
                self.name_last_node('exact_match')
                self._model_hierarchy_()
                self.name_last_node('hierarchy')
                with self._optional():
                    self._token('##')
                    self._attribute_list_()
                    self.name_last_node('attrs')
                with self._optional():
                    self._model_parts_()
                    self.name_last_node('parts')
                with self._optional():
                    self._zone_selector_()
                    self.name_last_node('zone')
            with self._option():
                self._token('##')
                self._attribute_list_()
                self.name_last_node('attrs')
                with self._optional():
                    self._model_parts_()
                    self.name_last_node('parts')
                with self._optional():
                    self._zone_selector_()
                    self.name_last_node('zone')
            with self._option():
                self._model_parts_()
                self.name_last_node('parts')
                with self._optional():
                    self._zone_selector_()
                    self.name_last_node('zone')
            self._error('no available options')
        self.ast._define(
            ['attrs', 'exact_match', 'hierarchy', 'parts', 'zone'],
            []
        )

    @graken()
    def _model_hierarchy_(self):
        self._model_range_list_()
        self.name_last_node('range_list')

        def block1():
            self._pattern(r'(?<!\s)\.')
            self._model_hierarchy_()
            self.name_last_node('hierarchy')
        self._closure(block1)
        self.ast._define(
            ['hierarchy', 'range_list'],
            []
        )

    @graken()
    def _model_range_list_(self):
        self._model_range_()
        self.name_last_node('range')

        def block1():
            self._token(',')
            self._model_range_list_()
            self.name_last_node('range_list')
        self._closure(block1)
        self.ast._define(
            ['range', 'range_list'],
            []
        )

    @graken()
    def _model_range_(self):
        with self._choice():
            with self._option():
                self._model_spec_start_()
                self.name_last_node('start')
                self._pattern(r'-')
                self._model_spec_end_()
                self.name_last_node('end')
            with self._option():
                self._model_spec_any_()
                self.name_last_node('start')
            self._error('no available options')
        self.ast._define(
            ['end', 'start'],
            []
        )

    @graken()
    def _model_spec_any_(self):
        with self._choice():
            with self._option():
                self._model_spec_()
                self.name_last_node('number')
            with self._option():
                self._token('*')
                self.name_last_node('word')
            self._error('expecting one of: *')
        self.ast._define(
            ['number', 'word'],
            []
        )

    @graken()
    def _model_spec_start_(self):
        with self._choice():
            with self._option():
                self._model_spec_()
                self.name_last_node('number')
            with self._option():
                self._token('start')
                self.name_last_node('word')
            with self._option():
                self._token('*')
                self.name_last_node('word')
            self._error('expecting one of: * start')
        self.ast._define(
            ['number', 'word'],
            []
        )

    @graken()
    def _model_spec_end_(self):
        with self._choice():
            with self._option():
                self._model_spec_()
                self.name_last_node('number')
            with self._option():
                self._token('end')
                self.name_last_node('word')
            with self._option():
                self._token('*')
                self.name_last_node('word')
            self._error('expecting one of: * end')
        self.ast._define(
            ['number', 'word'],
            []
        )

    @graken()
    def _model_spec_(self):
        self._pattern(r'[0-9]{1,5}(?![0-9A-Fa-f])')
        self.name_last_node('number')
        self.ast._define(
            ['number'],
            []
        )

    @graken()
    def _model_parts_(self):

        def block0():
            self._chain_()
            self.add_last_node_to_name('chain')
        self._positive_closure(block0)
        self.ast._define(
            [],
            ['chain']
        )

    @graken()
    def _chain_(self):
        with self._choice():
            with self._option():
                self._token('/')
                self._part_list_()
                self.name_last_node('parts')
                with self._optional():
                    self._token('//')
                    self._attribute_list_()
                    self.name_last_node('attrs')

                def block2():
                    self._residue_()
                    self.add_last_node_to_name('residue')
                self._closure(block2)
            with self._option():
                self._token('//')
                self._attribute_list_()
                self.name_last_node('attrs')

                def block5():
                    self._residue_()
                    self.add_last_node_to_name('residue')
                self._closure(block5)
            with self._option():

                def block7():
                    self._residue_()
                    self.add_last_node_to_name('residue')
                self._positive_closure(block7)
            self._error('no available options')
        self.ast._define(
            ['attrs', 'parts'],
            ['residue']
        )

    @graken()
    def _residue_(self):
        with self._choice():
            with self._option():
                self._token(':')
                self._part_list_()
                self.name_last_node('parts')
                with self._optional():
                    self._token('::')
                    self._attribute_list_()
                    self.name_last_node('attrs')

                def block2():
                    self._atom_()
                    self.add_last_node_to_name('atom')
                self._closure(block2)
            with self._option():
                self._token('::')
                self._attribute_list_()
                self.name_last_node('attrs')

                def block5():
                    self._atom_()
                    self.add_last_node_to_name('atom')
                self._closure(block5)
            with self._option():

                def block7():
                    self._atom_()
                    self.add_last_node_to_name('atom')
                self._positive_closure(block7)
            self._error('no available options')
        self.ast._define(
            ['attrs', 'parts'],
            ['atom']
        )

    @graken()
    def _part_list_(self):
        with self._choice():
            with self._option():
                self._part_range_list_()
                self.name_last_node('range')
                self._token(',')
                self._part_list_()
                self.name_last_node('part')
            with self._option():
                self._part_range_list_()
                self.name_last_node('range')
            self._error('no available options')
        self.ast._define(
            ['part', 'range'],
            []
        )

    @graken()
    def _part_range_list_(self):
        self._pattern(r'-?[a-zA-Z0-9_\'"*?\[\]\\]+')
        self.name_last_node('start')
        with self._optional():
            self._pattern(r'-')
            self._pattern(r'[-a-zA-Z0-9_\'"\\]+')
            self.name_last_node('end')
        self.ast._define(
            ['end', 'start'],
            []
        )

    @graken()
    def _atom_(self):
        with self._choice():
            with self._option():
                self._token('@')
                self._atom_list_()
                self.name_last_node('parts')
                with self._optional():
                    self._token('@@')
                    self._attribute_list_()
                    self.name_last_node('attrs')
            with self._option():
                self._token('@@')
                self._attribute_list_()
                self.name_last_node('attrs')
            self._error('no available options')
        self.ast._define(
            ['attrs', 'parts'],
            []
        )

    @graken()
    def _atom_list_(self):
        with self._choice():
            with self._option():
                self._atom_name_()
                self.name_last_node('name')
                self._token(',')
                self._atom_list_()
                self.name_last_node('part')
            with self._option():
                self._atom_name_()
                self.name_last_node('name')
            self._error('no available options')
        self.ast._define(
            ['name', 'part'],
            []
        )

    @graken()
    def _atom_name_(self):
        self._pattern(r'-?[a-zA-Z0-9_\'"*?\[\]\\]+')
        self.name_last_node('name')
        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _attribute_list_(self):
        self._attr_test_()

        def block0():
            self._token(',')
            self._attr_test_()
        self._closure(block0)

    @graken()
    def _attr_test_(self):
        with self._choice():
            with self._option():
                self._attr_name_()
                self.name_last_node('name')
                self._attr_operator_()
                self.name_last_node('op')
                self._attr_value_()
                self.name_last_node('value')
            with self._option():
                self._attr_name_()
                self.name_last_node('name')
            with self._option():
                self._token('^')
                self.name_last_node('no')
                self._attr_name_()
                self.name_last_node('name')
            self._error('no available options')
        self.ast._define(
            ['name', 'no', 'op', 'value'],
            []
        )

    @graken()
    def _attr_name_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z0-9_]*')

    @graken()
    def _attr_operator_(self):
        with self._choice():
            with self._option():
                self._token('>=')
            with self._option():
                self._token('>')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('<')
            with self._option():
                self._token('==')
            with self._option():
                self._token('=')
            with self._option():
                self._token('!==')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('<>')
            self._error('expecting one of: != !== < <= <> = == > >=')

    @graken()
    def _attr_value_(self):
        with self._choice():
            with self._option():
                self._token('"')
                self._pattern(r'[^"]+')
                self._token('"')
            with self._option():
                self._token("'")
                self._pattern(r"[^']+")
                self._token("'")
            with self._option():
                self._pattern(r'[^,#/:@ \t]+')
            self._error('expecting one of: " \' [^,#/:@ \\t]+')

    @graken()
    def _zone_selector_(self):
        self._zone_operator_()
        self._real_number_()

    @graken()
    def _zone_operator_(self):
        with self._choice():
            with self._option():
                self._token('@>')
            with self._option():
                self._token('@<')
            with self._option():
                self._token(':>')
            with self._option():
                self._token(':<')
            with self._option():
                self._token('/>')
            with self._option():
                self._token('/<')
            with self._option():
                self._token('#>')
            with self._option():
                self._token('#<')
            self._error('expecting one of: #< #> /< /> :< :> @< @>')

    @graken()
    def _real_number_(self):
        self._pattern(r'[0-9]*\.?[0-9]+')


class _atomspecSemantics(object):
    def atom_specifier(self, ast):
        return ast

    def as_term(self, ast):
        return ast

    def selector_name(self, ast):
        return ast

    def model_list(self, ast):
        return ast

    def model(self, ast):
        return ast

    def model_hierarchy(self, ast):
        return ast

    def model_range_list(self, ast):
        return ast

    def model_range(self, ast):
        return ast

    def model_spec_any(self, ast):
        return ast

    def model_spec_start(self, ast):
        return ast

    def model_spec_end(self, ast):
        return ast

    def model_spec(self, ast):
        return ast

    def model_parts(self, ast):
        return ast

    def chain(self, ast):
        return ast

    def residue(self, ast):
        return ast

    def part_list(self, ast):
        return ast

    def part_range_list(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def atom_list(self, ast):
        return ast

    def atom_name(self, ast):
        return ast

    def attribute_list(self, ast):
        return ast

    def attr_test(self, ast):
        return ast

    def attr_name(self, ast):
        return ast

    def attr_operator(self, ast):
        return ast

    def attr_value(self, ast):
        return ast

    def zone_selector(self, ast):
        return ast

    def zone_operator(self, ast):
        return ast

    def real_number(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = _atomspecParser(parseinfo=False)
    return parser.parse(text, startrule, filename=filename, **kwargs)

if __name__ == '__main__':
    import json
    ast = generic_main(main, _atomspecParser, name='_atomspec')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
