{
  "src/lib/components/PivotTable.react.js": {
    "description": "Pivot tables are useful for interactive presentation of\nsummary statistics computed for data contained in another table.\n\nThis function provides a convenient Dash interface\nto the `react-pivottable` component, which makes it easy to embed\npivot tables into Dash for R applications.\n\nWithin React, the interactive component provided by `react-pivottable`\nis `PivotTableUI`, but output rendering is delegated to the non-interactive\n`PivotTable` component, which accepts a subset of its properties.\n`PivotTable` in turn delegates to a specific renderer component, such as\nthe default `TableRenderer`, which accepts a subset of the same properties.\nFinally, most renderers will create non-React PivotData objects to handle\nthe actual computations, which also accept a subset of the same properties\nas the rest of the stack.\n\nThe arguments for this function correspond to properties of the component;\na full list is provided below.\n\n`react-pivottable` was developed by Nicolas Kruchten; source\nfor this component is available from https://github.com/plotly/react-pivottable.",
    "displayName": "PivotTable",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "state",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
      },
      "data": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "data to be summarized"
      },
      "hiddenAttributes": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "contains attribute names to omit from the UI",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "extraAttributes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "contains attribute names to add to the UI, useful when aggregation is done in the backend\ne.g. { \"Test\": { 'a': 1, 'b': 1, 'c': 1 }, \"Test2\": {'x': 1, 'y': 1} }\nwhere 1 stands for the count of the value (but it's optional to provide the true row count with backend aggregation)",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "hiddenFromAggregators": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "contains attribute names to omit from the aggregator arguments dropdowns",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "hiddenFromDragDrop": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "contains attribute names to omit from the drag'n'drop portion of the UI",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "menuLimit": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "maximum number of values to list in the double-click menu",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "unusedOrientationCutoff": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If the attributes' names' combined length in characters exceeds this\nvalue then the unused attributes area will be shown vertically to the\nleft of the UI instead of horizontally above it. 0 therefore means\n'always vertical', and Infinity means 'always horizontal'.",
        "defaultValue": {
          "value": "85",
          "computed": false
        }
      },
      "cols": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Which columns are currently in the column area"
      },
      "colOrder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "the order in which column data is provided to the renderer, must be one\nof \"key_a_to_z\", \"value_a_to_z\", \"value_z_to_a\", ordering by value\norders by column total"
      },
      "rows": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Which rows is currently inside the row area."
      },
      "rowOrder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "the order in which row data is provided to the renderer, must be one\nof \"key_a_to_z\", \"value_a_to_z\", \"value_z_to_a\", ordering by value\norders by row total"
      },
      "aggregatorName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which aggregator is currently selected. E.g. Count, Sum, Average, etc."
      },
      "vals": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Vals for the aggregator."
      },
      "valueFilter": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Value filter for each attribute name."
      },
      "rendererName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which renderer is currently selected. E.g. Table, Line Chart, Scatter\nChart, etc."
      },
      "listedAggregators": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Optional list of aggregators",
        "defaultValue": {
          "value": "['Value']",
          "computed": false
        }
      },
      "listedAggregationValues": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Optional list of aggregators values",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "listedRenderers": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Optional list of renderer",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "showUI": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If disabled, the entire pivot configuration UI is hidden",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "plotlyOptions": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "to change plot options, e.g. the size of the graph {with:100, height:300}",
        "defaultValue": {
          "value": "{width: 100, height: 100}",
          "computed": false
        }
      },
      "tableOptions": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "to change the table renderer options e.g\n    {\n    \"rowTotals\": true,\n    \"colTotals\": true,\n    \"colTotalValues\": {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6},\n    \"rowTotalValues\": {Female: 7, Male: 8},\n    \"grandTotalValue\": 99,\n    }",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "plotlyConfig": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "to change plot config, e.g. display the mode bar: {displayModeBar: false}\nhttps://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  }
}