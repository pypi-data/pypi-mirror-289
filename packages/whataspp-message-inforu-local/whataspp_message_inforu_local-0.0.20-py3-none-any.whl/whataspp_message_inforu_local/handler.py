from logger_local.LoggerLocal import Logger
from python_sdk_local.http_response import handler_decorator
from python_sdk_local.utilities import DEFAULT_LANG_CODE_STR
from message_local.MessageLocal import MessageLocal

from .WhatsAppLocalConstants import get_logger_object


logger = get_logger_object()


@handler_decorator(logger)
def createHandler(request_parameters: dict) -> dict:
    # In all serverless-com handlers' logger.start()- Add optional parameter
    # to logger.start() which called api_call, so logger.start will call
    # api_management to insert into api_call_table all fields including
    # session_id.
    """Read parameters from the payload and insert them"""

    is_test_data = request_parameters.get("isTestData", False)
    message_id = MessageLocal().insert_message_data(request_parameters)
    message = {"message": "Message created successfully", "message_id": message_id}
    return message


# TODO: except ValueError as exception, BAD_REQUEST / INTERNAL_SERVER_ERROR...


@handler_decorator(logger)
def deleteHandler(request_parameters: dict) -> dict:
    """url/5   (5 is the eventId)"""

    message_id = request_parameters.get('eventId')
    is_test_data = request_parameters.get("isTestData", False)
    MessageLocal().delete_by_message_id(message_id=message_id)
    message = {"message": "Message deleted successfully"}
    return message


# TODO This should be imported from entity-type-python-package (this file will be generated by Sql2Code)
@handler_decorator(logger)
def getAllHandler(request_parameters: dict) -> list:
    """url?langCode=en&limit=10"""

    lang_code_str = request_parameters.get("langCode") or DEFAULT_LANG_CODE_STR
    limit = request_parameters.get("limit")
    is_test_data = request_parameters.get("isTestData", False)
    messages_list = MessageLocal().select_all_messages(lang_code_str, limit=limit)
    return messages_list


@handler_decorator(logger)
def getMessageByProfileIdHandler(request_parameters: dict) -> list:
    """url/5?limit=10   (5 is the profileId)"""

    request_parameters = request_parameters
    profile_id = request_parameters.get("profileId")
    limit = request_parameters.get("limit")

    is_test_data = request_parameters.get("isTestData", False)
    messages_list = MessageLocal().select_messages_by_profile_id(profile_id, limit=limit)
    return messages_list


@handler_decorator(logger)
def getMessageByeventIdHandler(request_parameters: dict) -> dict:
    """url/5?isTestData=true   (eventId)"""

    message_id = request_parameters.get("eventId")

    is_test_data = request_parameters.get("isTestData", False)
    message = MessageLocal().select_by_message_id(message_id)
    if not message:
        raise Exception(f"Message not found with message_id: {message_id}")
    return message


@handler_decorator(logger)
def updateHandler(request_parameters: dict) -> dict:
    """url/5  (eventId)
    Read parameters from the payload and update them"""

    message_id = request_parameters.get('eventId')
    is_test_data = request_parameters.get("isTestData", False)
    if not message_id:
        raise Exception("message_id is required")

    MessageLocal().update_by_message_id(message_id, request_parameters)
    message = {"message": "Message updated successfully"}
    return message


@handler_decorator(logger)
def getMessageByMessageTitleHandler(request_parameters: dict) -> list:  # TODO: test
    """url/SomeTitle?limit=10"""

    title = request_parameters.get("title")

    limit = request_parameters.get("limit")
    is_test_data = request_parameters.get("isTestData", False)
    messages_list = MessageLocal().select_events_by_title(title, limit=limit)
    return messages_list