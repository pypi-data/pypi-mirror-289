Metadata-Version: 2.3
Name: telegramlib
Version: 0.1.0
Summary: Easiest Python package to create Telegram bots
Project-URL: Repository, https://github.com/ilLancio/telegramlib
Project-URL: Issues, https://github.com/ilLancio/telegramlib/issues
Project-URL: Documentation, https://illancio.github.io/telegramlib/
Author-email: Daniele Lanciotti <daniele9001@gmail.com>
License-File: LICENSE
Keywords: api,bot,easy,telegram
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Requires-Dist: anyio==4.4.0
Requires-Dist: apscheduler==3.10.4
Requires-Dist: build==1.2.1
Requires-Dist: certifi==2024.7.4
Requires-Dist: charset-normalizer==3.3.2
Requires-Dist: click==8.1.7
Requires-Dist: colorama==0.4.6
Requires-Dist: emoji==2.12.1
Requires-Dist: googletrans-py==4.0.0
Requires-Dist: gtts==2.5.2
Requires-Dist: h11==0.14.0
Requires-Dist: h2==4.1.0
Requires-Dist: hpack==4.0.0
Requires-Dist: httpcore==1.0.5
Requires-Dist: httpx==0.27.0
Requires-Dist: hyperframe==6.0.1
Requires-Dist: idna==3.7
Requires-Dist: packaging==24.1
Requires-Dist: playsound==1.3.0
Requires-Dist: pydub==0.25.1
Requires-Dist: pyobjc-core==10.3.1
Requires-Dist: pyobjc-framework-accessibility==10.3.1
Requires-Dist: pyobjc-framework-accounts==10.3.1
Requires-Dist: pyobjc-framework-addressbook==10.3.1
Requires-Dist: pyobjc-framework-adservices==10.3.1
Requires-Dist: pyobjc-framework-adsupport==10.3.1
Requires-Dist: pyobjc-framework-applescriptkit==10.3.1
Requires-Dist: pyobjc-framework-applescriptobjc==10.3.1
Requires-Dist: pyobjc-framework-applicationservices==10.3.1
Requires-Dist: pyobjc-framework-apptrackingtransparency==10.3.1
Requires-Dist: pyobjc-framework-audiovideobridging==10.3.1
Requires-Dist: pyobjc-framework-authenticationservices==10.3.1
Requires-Dist: pyobjc-framework-automaticassessmentconfiguration==10.3.1
Requires-Dist: pyobjc-framework-automator==10.3.1
Requires-Dist: pyobjc-framework-avfoundation==10.3.1
Requires-Dist: pyobjc-framework-avkit==10.3.1
Requires-Dist: pyobjc-framework-avrouting==10.3.1
Requires-Dist: pyobjc-framework-backgroundassets==10.3.1
Requires-Dist: pyobjc-framework-browserenginekit==10.3.1
Requires-Dist: pyobjc-framework-businesschat==10.3.1
Requires-Dist: pyobjc-framework-calendarstore==10.3.1
Requires-Dist: pyobjc-framework-callkit==10.3.1
Requires-Dist: pyobjc-framework-cfnetwork==10.3.1
Requires-Dist: pyobjc-framework-cinematic==10.3.1
Requires-Dist: pyobjc-framework-classkit==10.3.1
Requires-Dist: pyobjc-framework-cloudkit==10.3.1
Requires-Dist: pyobjc-framework-cocoa==10.3.1
Requires-Dist: pyobjc-framework-collaboration==10.3.1
Requires-Dist: pyobjc-framework-colorsync==10.3.1
Requires-Dist: pyobjc-framework-contacts==10.3.1
Requires-Dist: pyobjc-framework-contactsui==10.3.1
Requires-Dist: pyobjc-framework-coreaudio==10.3.1
Requires-Dist: pyobjc-framework-coreaudiokit==10.3.1
Requires-Dist: pyobjc-framework-corebluetooth==10.3.1
Requires-Dist: pyobjc-framework-coredata==10.3.1
Requires-Dist: pyobjc-framework-corehaptics==10.3.1
Requires-Dist: pyobjc-framework-corelocation==10.3.1
Requires-Dist: pyobjc-framework-coremedia==10.3.1
Requires-Dist: pyobjc-framework-coremediaio==10.3.1
Requires-Dist: pyobjc-framework-coremidi==10.3.1
Requires-Dist: pyobjc-framework-coreml==10.3.1
Requires-Dist: pyobjc-framework-coremotion==10.3.1
Requires-Dist: pyobjc-framework-coreservices==10.3.1
Requires-Dist: pyobjc-framework-corespotlight==10.3.1
Requires-Dist: pyobjc-framework-coretext==10.3.1
Requires-Dist: pyobjc-framework-corewlan==10.3.1
Requires-Dist: pyobjc-framework-cryptotokenkit==10.3.1
Requires-Dist: pyobjc-framework-datadetection==10.3.1
Requires-Dist: pyobjc-framework-devicecheck==10.3.1
Requires-Dist: pyobjc-framework-dictionaryservices==10.3.1
Requires-Dist: pyobjc-framework-discrecording==10.3.1
Requires-Dist: pyobjc-framework-discrecordingui==10.3.1
Requires-Dist: pyobjc-framework-diskarbitration==10.3.1
Requires-Dist: pyobjc-framework-dvdplayback==10.3.1
Requires-Dist: pyobjc-framework-eventkit==10.3.1
Requires-Dist: pyobjc-framework-exceptionhandling==10.3.1
Requires-Dist: pyobjc-framework-executionpolicy==10.3.1
Requires-Dist: pyobjc-framework-extensionkit==10.3.1
Requires-Dist: pyobjc-framework-externalaccessory==10.3.1
Requires-Dist: pyobjc-framework-fileprovider==10.3.1
Requires-Dist: pyobjc-framework-fileproviderui==10.3.1
Requires-Dist: pyobjc-framework-findersync==10.3.1
Requires-Dist: pyobjc-framework-fsevents==10.3.1
Requires-Dist: pyobjc-framework-gamecenter==10.3.1
Requires-Dist: pyobjc-framework-gamecontroller==10.3.1
Requires-Dist: pyobjc-framework-gamekit==10.3.1
Requires-Dist: pyobjc-framework-gameplaykit==10.3.1
Requires-Dist: pyobjc-framework-healthkit==10.3.1
Requires-Dist: pyobjc-framework-imagecapturecore==10.3.1
Requires-Dist: pyobjc-framework-inputmethodkit==10.3.1
Requires-Dist: pyobjc-framework-installerplugins==10.3.1
Requires-Dist: pyobjc-framework-instantmessage==10.3.1
Requires-Dist: pyobjc-framework-intents==10.3.1
Requires-Dist: pyobjc-framework-intentsui==10.3.1
Requires-Dist: pyobjc-framework-iobluetooth==10.3.1
Requires-Dist: pyobjc-framework-iobluetoothui==10.3.1
Requires-Dist: pyobjc-framework-iosurface==10.3.1
Requires-Dist: pyobjc-framework-ituneslibrary==10.3.1
Requires-Dist: pyobjc-framework-kernelmanagement==10.3.1
Requires-Dist: pyobjc-framework-latentsemanticmapping==10.3.1
Requires-Dist: pyobjc-framework-launchservices==10.3.1
Requires-Dist: pyobjc-framework-libdispatch==10.3.1
Requires-Dist: pyobjc-framework-libxpc==10.3.1
Requires-Dist: pyobjc-framework-linkpresentation==10.3.1
Requires-Dist: pyobjc-framework-localauthentication==10.3.1
Requires-Dist: pyobjc-framework-localauthenticationembeddedui==10.3.1
Requires-Dist: pyobjc-framework-mailkit==10.3.1
Requires-Dist: pyobjc-framework-mapkit==10.3.1
Requires-Dist: pyobjc-framework-mediaaccessibility==10.3.1
Requires-Dist: pyobjc-framework-medialibrary==10.3.1
Requires-Dist: pyobjc-framework-mediaplayer==10.3.1
Requires-Dist: pyobjc-framework-mediatoolbox==10.3.1
Requires-Dist: pyobjc-framework-metal==10.3.1
Requires-Dist: pyobjc-framework-metalfx==10.3.1
Requires-Dist: pyobjc-framework-metalkit==10.3.1
Requires-Dist: pyobjc-framework-metalperformanceshaders==10.3.1
Requires-Dist: pyobjc-framework-metalperformanceshadersgraph==10.3.1
Requires-Dist: pyobjc-framework-metrickit==10.3.1
Requires-Dist: pyobjc-framework-mlcompute==10.3.1
Requires-Dist: pyobjc-framework-modelio==10.3.1
Requires-Dist: pyobjc-framework-multipeerconnectivity==10.3.1
Requires-Dist: pyobjc-framework-naturallanguage==10.3.1
Requires-Dist: pyobjc-framework-netfs==10.3.1
Requires-Dist: pyobjc-framework-network==10.3.1
Requires-Dist: pyobjc-framework-networkextension==10.3.1
Requires-Dist: pyobjc-framework-notificationcenter==10.3.1
Requires-Dist: pyobjc-framework-opendirectory==10.3.1
Requires-Dist: pyobjc-framework-osakit==10.3.1
Requires-Dist: pyobjc-framework-oslog==10.3.1
Requires-Dist: pyobjc-framework-passkit==10.3.1
Requires-Dist: pyobjc-framework-pencilkit==10.3.1
Requires-Dist: pyobjc-framework-phase==10.3.1
Requires-Dist: pyobjc-framework-photos==10.3.1
Requires-Dist: pyobjc-framework-photosui==10.3.1
Requires-Dist: pyobjc-framework-preferencepanes==10.3.1
Requires-Dist: pyobjc-framework-pushkit==10.3.1
Requires-Dist: pyobjc-framework-quartz==10.3.1
Requires-Dist: pyobjc-framework-quicklookthumbnailing==10.3.1
Requires-Dist: pyobjc-framework-replaykit==10.3.1
Requires-Dist: pyobjc-framework-safariservices==10.3.1
Requires-Dist: pyobjc-framework-safetykit==10.3.1
Requires-Dist: pyobjc-framework-scenekit==10.3.1
Requires-Dist: pyobjc-framework-screencapturekit==10.3.1
Requires-Dist: pyobjc-framework-screensaver==10.3.1
Requires-Dist: pyobjc-framework-screentime==10.3.1
Requires-Dist: pyobjc-framework-scriptingbridge==10.3.1
Requires-Dist: pyobjc-framework-searchkit==10.3.1
Requires-Dist: pyobjc-framework-security==10.3.1
Requires-Dist: pyobjc-framework-securityfoundation==10.3.1
Requires-Dist: pyobjc-framework-securityinterface==10.3.1
Requires-Dist: pyobjc-framework-sensitivecontentanalysis==10.3.1
Requires-Dist: pyobjc-framework-servicemanagement==10.3.1
Requires-Dist: pyobjc-framework-sharedwithyou==10.3.1
Requires-Dist: pyobjc-framework-sharedwithyoucore==10.3.1
Requires-Dist: pyobjc-framework-shazamkit==10.3.1
Requires-Dist: pyobjc-framework-social==10.3.1
Requires-Dist: pyobjc-framework-soundanalysis==10.3.1
Requires-Dist: pyobjc-framework-speech==10.3.1
Requires-Dist: pyobjc-framework-spritekit==10.3.1
Requires-Dist: pyobjc-framework-storekit==10.3.1
Requires-Dist: pyobjc-framework-symbols==10.3.1
Requires-Dist: pyobjc-framework-syncservices==10.3.1
Requires-Dist: pyobjc-framework-systemconfiguration==10.3.1
Requires-Dist: pyobjc-framework-systemextensions==10.3.1
Requires-Dist: pyobjc-framework-threadnetwork==10.3.1
Requires-Dist: pyobjc-framework-uniformtypeidentifiers==10.3.1
Requires-Dist: pyobjc-framework-usernotifications==10.3.1
Requires-Dist: pyobjc-framework-usernotificationsui==10.3.1
Requires-Dist: pyobjc-framework-videosubscriberaccount==10.3.1
Requires-Dist: pyobjc-framework-videotoolbox==10.3.1
Requires-Dist: pyobjc-framework-virtualization==10.3.1
Requires-Dist: pyobjc-framework-vision==10.3.1
Requires-Dist: pyobjc-framework-webkit==10.3.1
Requires-Dist: pyobjc==10.3.1
Requires-Dist: pyproject-hooks==1.1.0
Requires-Dist: python-telegram-bot==21.4
Requires-Dist: pytz==2024.1
Requires-Dist: requests==2.32.3
Requires-Dist: six==1.16.0
Requires-Dist: sniffio==1.3.1
Requires-Dist: typing-extensions==4.12.2
Requires-Dist: tzlocal==5.2
Requires-Dist: unicodeit==0.7.5
Requires-Dist: urllib3==2.2.2
Description-Content-Type: text/markdown

# telegramlib

Easiest Python package to create Telegram bots.

Developed by [ilLancio](https://illancio.github.io).

## Installation

You can install the package from [PyPI](https://pypi.org/) using pip:

```console
pip install telegramlib
```

## Usage examples

### Setting up your bot

1. **Obtain a Telegram bot token** from [BotFather](https://t.me/BotFather).
2. **Obtain your Telegram user ID** from [RawDataBot](https://t.me/raw_info_bot).
3. **Replace placeholders** with your actual bot token and user ID in the examples below.

### Example 1: Starting the Bot

Define a start function that performs what you want to happen when a user types the `/start` command. Then remember to add the command in the `start_bot` function along with your token and user id.

```python
from telegramlib import *

TOKEN = 'your Telegram bot token'
ADMIN = 'your user ID'

# Define a start command function
async def start():
    await bot_reply_text('Bot started!')

# Bot configuration and start
start_bot(
    token=TOKEN,
    admin=ADMIN,
    commands=start
)
```

```Telegram
User: /start
Bot:  Bot started!
```

#### Disable user updates

Being an admin yourself, you will receive informative messages from the bot about the activities of your bot's users. To disable or enable it, send it the `/usersupdates` command.

### Example 2: Other Commands and Message Handler

Define another command function that makes the bot respond by giving you the command arguments and a message handler that gives the user the name of the bot after being asked for it. Always remember to add the functions in `start_bot`.

```python
from telegramlib import *

TOKEN = 'your Telegram bot token'
ADMIN = 'your user ID'

# Define a start command function
async def start():
    await bot_reply_text('Bot started!')

# Define another command function
async def yourcommand():
    args = str( command_args() )
    response = 'You sent me your command with these arguments: ' + args
    await bot_reply_text(response)

# Define a message handler function
async def message():
    if user_message() == "What's your name?":
        await bot_reply_text('My name is ' + bot_name())

# Bot configuration and start
start_bot(
    token=TOKEN,
    admin=ADMIN,
    commands=[start, yourcommand],
    messages=message
)
```

```Telegram
User: /yourcommand Hello Bot!
Bot:  You sent me your command with these arguments: ['Hello', 'Bot!']
User: What's your name
Bot:  My name is <bot-name>
```

### Example 3: Scheduling Future Messages

Define the start function so that it schedules a daily task at 6 p.m., so, typing the start command, every day at 6 p.m. will be executed the contents of the `scheduled_task` function defined under, also to be added to the `start_bot` function. Additionally define a command that removes all user tasks.

```python
from telegramlib import *

TOKEN = 'your Telegram bot token'
ADMIN = 'your user ID'

# Define a start command function
async def start():
    # Task scheduling. reset=True to remove old scheduled tasks
    new_daily_job(scheduled_task, 18, 0, reset=True)
    await bot_reply_text('Scheduled task every day at 6 p.m.')

# Define another command
async def removetasks():
    remove_all_daily_jobs()
    await bot_reply_text('Tasks all deleted')

# Define a scheduled function
async def scheduled_task():
    await bot_reply_text('This is a scheduled task!')

# Bot configuration and start
start_bot(
    token=TOKEN,
    admin=ADMIN,
    commands=[start, removetasks],
    scheduled=scheduled_task
)
```

```Telegram
User: /start
Bot:  Scheduled task every day at 6 p.m.

(at 6:00 PM)
Bot:  This is a scheduled task!

User: /removetasks
Bot:  Tasks all deleted
```

### Example 4: Users Parameters, Admin and Controllers

Specify in the `start_bot` function a dictionary representative of the users' default parameters. That done, you can access and modify those parameters with `get_param` and `set_param`. In the example we use within the start command and commands with access restricted to the admin and controllers, which are also specified in the `start_bot` function.

```python
from telegramlib import *

TOKEN = 'your Telegram bot token'
ADMIN = 'your user ID'

# Define a start command function
async def start():
    set_param('parameter 2', False)
    await bot_reply_text('Your parameter 2 is been set to False')

# Admin restricted access command
@admin_command
async def admincommand():
    p = get_param('parameter 1')
    await bot_reply_text(f'I am answering you because you are the admin and your parameter 1 is {p}')

# Controllers restricted access command
@controllers_command
async def controllercommand():
    p = get_param('parameter 1')
    await bot_reply_text(f'I am responding to you because you are an admin and an admin is always a controller. Your parameter 1 is {p}')

# Bot configuration and start
start_bot(
    token=TOKEN,
    admin=ADMIN,
    commands=[start, admincommand, controllercommand],
    controllers=[<user_id_1>, <user_id_2>],
    params={'parameter 1': 42, 'parameter 2': True}
)
```

```Telegram
User: /start
Bot:  Your parameter 2 is been set to False
User: /admincommand
Bot:  I am answering you because you are the admin and your parameter 1 is 42
User: /controllercommand
Bot:  I am responding to you because you are an admin and an admin is always controller. Your parameter 1 is 42
```

## Complete List of Functions

* `start_bot(token, admin, commands, messages=None, scheduled=None error=None, controllers = None, params=None)`

  *Start the Telegram bot.*

* `command_args()`

  *Get the command arguments.*

* `bot_reply_text(message, text_to_audio=False, translate_to=None, talking_about_latex=False)`

  *Respond with a text from the bot.*

* `send(message, chat_id=None, save=True, token=None, parse_mode=ParseMode.HTML)`

  *Send a message.*

* `delete(chat_id, message_id, token=None)`

  *Delete a message.*

* `context()`

  *Get the python-telegram-bot context.*

* `update()`

  *Get the python-telegram-bot update.*

* `bot_name()`

  *Get the name of the bot.*

* `set_param(key, value)`

  *Set a parameter of the user.*

* `get_param(key)`

  *Get a parameter of the user.*

* `get_chat(user=None, last=None, last_message=None, max_char=None, to_string=False, to_list=False, only_name_keys=False, without_keys=False)`

  *Get a chat.*

* `admin_command(func)`

  *Decorator for admin Telegram commands.*

* `controllers_command(func)`

  *Decorator for controllers Telegram commands.*

#### Ready-to-use commands (to be added to start_bot for use)

* `terminal()`

  *Admin Telegram command to type a command on the bot's machine terminal.*

* `follow()`

  *Admin Telegram command to follow user messages.*

* `unfollow()`

  *Admin Telegram command to stop following user messages.*

* `write()`

  *Admin Telegram command to write a message to another user.*

* `ban()`

  *Admin Telegram command to ban a user.*

* `sban()`

  *Admin Telegram command to remove ban from a user.*

* `creator()`

  *Telegram command to contact the creator of the bot.*

* `close_creator()`

  *Telegram command to close the dialog with the bot creator.*

#### For scheduling tasks

* `new_daily_job_from_args(function, reset=False)`

  *Create a new daily job by taking time from command arguments.*

* `get_command_args_daily_job_time_format(n_arg=0)`

  *Get time from command arguments.*

* `is_daily_job_scheduled(function, hour, minute)`

  *Check whether a daily job is scheduled.*

* `daily_jobs_scheduled_times_to_string(mex='', if_empty_mex='')`

  *Convert scheduled daily job times to a string.*

* `remove_all_daily_jobs()`

  *Remove all daily jobs.*

* `new_daily_job(function, hour, minute, reset=False)`

  *Create a new daily job.*

## Documentation

You can find documentation [hear](https://illancio.github.io/telegramlib/).

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

The licenses of the dependencies used in this project are listed in the file [THIRD_PARTY_LICENSES.txt](THIRD_PARTY_LICENSES.txt).

## Author

* Daniele Lanciotti

  Email: <daniele9001@gmail.com>

  Website: [illancio.github.io](https://illancio.github.io/)
