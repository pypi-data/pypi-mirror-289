from . import settings as settings
from _typeshed import Incomplete
from collections import OrderedDict
from collections.abc import Generator
from openpyxl.worksheet._read_only import ReadOnlyWorksheet as ReadOnlyWorksheet
from pathlib import Path
from typing import Iterable

logger: Incomplete

def remove_none_by_dict(d: OrderedDict[str | None, list[str]]) -> OrderedDict[str, list[str]]: ...
def clean_dict(d: OrderedDict[str | None, list[str]]) -> OrderedDict[str, str]: ...
def iter_xlsx_sheet(path: Path) -> Iterable[ReadOnlyWorksheet]: ...
def get_value_by_sequence(*args) -> Generator[Incomplete, Incomplete, None]: ...

class SheetHandler:
    meta_list: Incomplete
    ws: Incomplete
    meta_col_name: Incomplete
    case_list: Incomplete
    last_content_type: str
    current_case_no: int
    current_case: Incomplete
    headers_map: Incomplete
    contents: Incomplete
    def __init__(self, ws: ReadOnlyWorksheet, debug: bool = False) -> None: ...
    def make_case_list(self, contents) -> None: ...
    def to_dict(self): ...

class LoadData:
    row_data: str
    path: Incomplete
    def __init__(self, path: Path, row_data: str) -> None: ...
    @property
    def data(self): ...
    def try_json(self): ...
    def try_str(self): ...
    def try_file(self): ...
