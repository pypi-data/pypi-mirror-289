#!/usr/bin/env python3
# Data Handling
# Strings
import re

# from pathlib import Path
from io import BytesIO, StringIO

# System
# from os import listdir, makedirs
from os.path import basename  # , exists, isfile, join

# import openpyxl
import numpy as np
import pandas as pd

# from functools import reduce


# import string


def readerfile_parser(filename: str, file_object: StringIO):
    """
    Parse for files generated by the Cytation10 (BioTek Cytation C10 Confocal Imaging Reader).

    This is (a rewrite of the old readerfile_parser() function handling filepaths as input (for local use)) a file parser expecting StringIO file-like objects as input.
    This should make this function more compatible with local and web-based use (i.e. if files are uploaded via a button and have no path, only its file contents).
    """
    lines = file_object.readlines()
    lines = list(filter(None, map(lambda x: x.strip("\n").strip("\r"), lines)))

    # search the file for plate type definition and use it to derive number of rows and columns
    found_plate_type = re.findall(r"Plate Type;[A-z ]*([0-9]*)", "".join(lines))
    plate_type = 96  # define default plate type and let it be 96-well plate as this is what we started with
    if found_plate_type:
        plate_type = int(found_plate_type[0])

    # else:
    #     plate_type = 96
    def plate_row_cols(platetype):
        match platetype:
            case 96:
                return 8, 12
            case 384:
                return 16, 24

    num_rows, num_columns = plate_row_cols(plate_type)

    filedict = dict()
    metadata = dict()
    filedict["Reader Filename"] = filename
    filedict["plate_type"] = plate_type
    # TODO: get barcode via regex
    barcode_found = re.findall(
        r"\d{3}[A-Z][a-z][A-Z]\d{2}\d{3}", filedict["Reader Filename"]
    )
    if not barcode_found:
        filedict["Barcode"] = filedict["Reader Filename"]
    else:
        filedict["Barcode"] = barcode_found[0]
    # filedict["Barcode"] = Path(filedict["Reader Filename"]).stem.split("_")[-1]

    results = np.empty([num_rows, num_columns], dtype=float)
    # using dtype=str results in unicode strings of length 1 ('U1'), therefore we use 'U25'
    layout = np.empty([num_rows, num_columns], dtype="U25")
    concentrations = np.empty([num_rows, num_columns], dtype=float)

    metadata_regex = r";?([a-zA-Z0-9 \/]*)[;:]+([a-zA-Z0-9 \/\\:_.-]*),?"
    line_num = 0
    while line_num < len(lines):
        if lines[line_num] == "Results":
            line_num += 1
            header = map(
                int, lines[line_num].strip("\n").split(";")[1:]
            )  # get the header
            index = [""] * num_rows
            for _row_num in range(num_rows):  # for the next num_rows, read result data
                line_num += 1
                res_line = lines[line_num].split(";")
                # Split at ; and slice off rowlabel and excitation/emission value:
                index[_row_num] = res_line[0]
                results[_row_num] = res_line[1:-1]
            # Initialize DataFrame from results and add it to filedict
            filedict["Raw Optical Density"] = pd.DataFrame(
                data=results, index=index, columns=header
            )
            line_num += 1
        elif lines[line_num] == "Layout":  # For the next num_rows, read layout data
            line_num += 1
            header = list(
                map(int, lines[line_num].strip("\n").split(";")[1:])
            )  # Because we use header twice here, we collect it via list()
            index = [""] * num_rows
            for _row_num in range(num_rows):
                line_num += 1
                layout_line = lines[line_num].split(";")
                index[_row_num] = layout_line[0]
                layout[_row_num] = layout_line[1:-1]
                # Each second line yields a concentration layout line
                line_num += 1
                conc_line = lines[line_num].split(";")
                concentrations[_row_num] = [
                    None if not x else float(x) for x in conc_line[1:-1]
                ]
            # Add layouts to filedict
            filedict["Layout"] = pd.DataFrame(data=layout, index=index, columns=header)
            filedict["Concentration"] = pd.DataFrame(
                data=concentrations, index=index, columns=header
            )
            line_num += 1
        else:
            metadata_pairs = re.findall(metadata_regex, lines[line_num])
            line_num += 1
            if not metadata_pairs:
                continue
            else:
                for key, value in metadata_pairs:
                    if not all(
                        [key, value]
                    ):  # if any of the keys or values are empty, skip
                        continue
                    else:
                        metadata[key.strip(" :")] = value.strip(" ")
    filedict["metadata"] = metadata
    return filedict


def filepaths_to_filedicts(filepaths):
    """
    Wrapper function to obtain a list of dictionaries which contain the raw files information like

    - different entries of metadata
        - Plate Type
        - Barcode
        - Date
        - Time
        - etc.
    - Raw Optical Density (DataFrame)
    - Concentration (DataFrame)
    - Layout (DataFrame)
    """
    filedicts = []
    for path in filepaths:
        file = open(path)
        contents = StringIO(file.read())
        filedicts.append(readerfile_parser(basename(path), contents))
        file.close()
    return filedicts


def filepaths_to_df(paths: list[str]):
    return None


def collect_results(filedicts):
    """
    Collect and merge results from the readerfiles.
    """
    allresults_df = pd.DataFrame(
        {"Row": [], "Column": [], "Raw Optical Density": []}
    )  # , "Layout": [], "Concentration": []})
    platetype_s = list(set(fd["plate_type"] for fd in filedicts))
    if len(platetype_s) == 1:
        platetype = platetype_s[0]
    else:
        raise Exception(f"Different plate types used {platetype_s}")

    for filedict in filedicts:
        # long_layout_df = get_long_df("Layout")
        # long_concentrations_df = get_long_df("Concentration")
        # long_rawdata_df = get_long_df("Raw Optical Density")

        long_rawdata_df = pd.melt(
            filedict["Raw Optical Density"].reset_index(names="Row"),
            id_vars=["Row"],
            var_name="Column",
            value_name="Raw Optical Density",
        )

        long_rawdata_df["Barcode"] = filedict["Barcode"]
        # df_merged = reduce(
        #     lambda  left,right: pd.merge(left,right,on=['Row', 'Column'], how='outer'),
        #     [long_rawdata_df, long_layout_df, long_concentrations_df]
        # )
        allresults_df = pd.concat([allresults_df, long_rawdata_df], axis=0)
        platetype = filedict["plate_type"]

    allresults_df.rename(
        columns={"Row": f"Row_{platetype}", "Column": f"Col_{platetype}"}, inplace=True
    )
    return allresults_df.reset_index(drop=True)
