from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Literal, TypeAlias

from stencila_types.types import AuthorRole, InstructionMessage

ModelId: TypeAlias = str


@dataclass(kw_only=True)
class ModelTask:
    """
    A model content generation task
    """

    # The kind of task
    kind: Literal["MessageGeneration", "ImageGeneration"] = "MessageGeneration"

    # The messages of the task
    messages: list[InstructionMessage]

    # The desired format of the generated content
    format: str = None


@dataclass(kw_only=True)
class ModelOutput:
    """
    The output generated by an assistant
    """

    # The authors of the generated content
    #
    # Should be a `SoftwareApplication` describing the model.
    authors: list[AuthorRole] | None = None

    # The kind of the generated content
    #
    # Used by Stencila to determine how to handle the `content` before decoding
    # it into nodes
    kind: Literal["Text", "Url"] | None = "Text"

    # The format of the generated content
    #
    # Used by Stencila to decode the generated `content` into a set of Stencila
    # Schema nodes.
    format: str | None = None

    # The content generated by the model
    content: str | None = None


class Model(ABC):
    """
    A base class for implementing the Model API for Stencila.
    """

    @classmethod
    @abstractmethod
    def get_name(cls) -> str:
        """Provide a name for the model.

        This is required, and should be the same name that is provided in the
        [[models]] section of the stencila_plugin.toml file.
        """

    @abstractmethod
    async def perform_task(self, task: ModelTask) -> ModelOutput:
        """
        Perform a task
        """
        raise NotImplementedError
