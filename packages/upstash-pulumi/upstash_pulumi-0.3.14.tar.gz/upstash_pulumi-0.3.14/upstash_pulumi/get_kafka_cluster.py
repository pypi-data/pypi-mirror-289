# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetKafkaClusterResult',
    'AwaitableGetKafkaClusterResult',
    'get_kafka_cluster',
    'get_kafka_cluster_output',
]

@pulumi.output_type
class GetKafkaClusterResult:
    """
    A collection of values returned by getKafkaCluster.
    """
    def __init__(__self__, cluster_id=None, cluster_name=None, creation_time=None, id=None, max_message_size=None, max_messages_per_second=None, max_partitions=None, max_retention_size=None, max_retention_time=None, multizone=None, password=None, region=None, rest_endpoint=None, state=None, tcp_endpoint=None, type=None, username=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if creation_time and not isinstance(creation_time, int):
            raise TypeError("Expected argument 'creation_time' to be a int")
        pulumi.set(__self__, "creation_time", creation_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_message_size and not isinstance(max_message_size, int):
            raise TypeError("Expected argument 'max_message_size' to be a int")
        pulumi.set(__self__, "max_message_size", max_message_size)
        if max_messages_per_second and not isinstance(max_messages_per_second, int):
            raise TypeError("Expected argument 'max_messages_per_second' to be a int")
        pulumi.set(__self__, "max_messages_per_second", max_messages_per_second)
        if max_partitions and not isinstance(max_partitions, int):
            raise TypeError("Expected argument 'max_partitions' to be a int")
        pulumi.set(__self__, "max_partitions", max_partitions)
        if max_retention_size and not isinstance(max_retention_size, int):
            raise TypeError("Expected argument 'max_retention_size' to be a int")
        pulumi.set(__self__, "max_retention_size", max_retention_size)
        if max_retention_time and not isinstance(max_retention_time, int):
            raise TypeError("Expected argument 'max_retention_time' to be a int")
        pulumi.set(__self__, "max_retention_time", max_retention_time)
        if multizone and not isinstance(multizone, bool):
            raise TypeError("Expected argument 'multizone' to be a bool")
        pulumi.set(__self__, "multizone", multizone)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rest_endpoint and not isinstance(rest_endpoint, str):
            raise TypeError("Expected argument 'rest_endpoint' to be a str")
        pulumi.set(__self__, "rest_endpoint", rest_endpoint)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tcp_endpoint and not isinstance(tcp_endpoint, str):
            raise TypeError("Expected argument 'tcp_endpoint' to be a str")
        pulumi.set(__self__, "tcp_endpoint", tcp_endpoint)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> int:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxMessageSize")
    def max_message_size(self) -> int:
        return pulumi.get(self, "max_message_size")

    @property
    @pulumi.getter(name="maxMessagesPerSecond")
    def max_messages_per_second(self) -> int:
        return pulumi.get(self, "max_messages_per_second")

    @property
    @pulumi.getter(name="maxPartitions")
    def max_partitions(self) -> int:
        return pulumi.get(self, "max_partitions")

    @property
    @pulumi.getter(name="maxRetentionSize")
    def max_retention_size(self) -> int:
        return pulumi.get(self, "max_retention_size")

    @property
    @pulumi.getter(name="maxRetentionTime")
    def max_retention_time(self) -> int:
        return pulumi.get(self, "max_retention_time")

    @property
    @pulumi.getter
    def multizone(self) -> bool:
        return pulumi.get(self, "multizone")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restEndpoint")
    def rest_endpoint(self) -> str:
        return pulumi.get(self, "rest_endpoint")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tcpEndpoint")
    def tcp_endpoint(self) -> str:
        return pulumi.get(self, "tcp_endpoint")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


class AwaitableGetKafkaClusterResult(GetKafkaClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaClusterResult(
            cluster_id=self.cluster_id,
            cluster_name=self.cluster_name,
            creation_time=self.creation_time,
            id=self.id,
            max_message_size=self.max_message_size,
            max_messages_per_second=self.max_messages_per_second,
            max_partitions=self.max_partitions,
            max_retention_size=self.max_retention_size,
            max_retention_time=self.max_retention_time,
            multizone=self.multizone,
            password=self.password,
            region=self.region,
            rest_endpoint=self.rest_endpoint,
            state=self.state,
            tcp_endpoint=self.tcp_endpoint,
            type=self.type,
            username=self.username)


def get_kafka_cluster(cluster_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaClusterResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_upstash as upstash

    cluster_data = upstash.get_kafka_cluster(cluster_id=resource["upstash_kafka_cluster"]["exampleCluster"]["cluster_id"])
    ```
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('upstash:index/getKafkaCluster:getKafkaCluster', __args__, opts=opts, typ=GetKafkaClusterResult).value

    return AwaitableGetKafkaClusterResult(
        cluster_id=__ret__.cluster_id,
        cluster_name=__ret__.cluster_name,
        creation_time=__ret__.creation_time,
        id=__ret__.id,
        max_message_size=__ret__.max_message_size,
        max_messages_per_second=__ret__.max_messages_per_second,
        max_partitions=__ret__.max_partitions,
        max_retention_size=__ret__.max_retention_size,
        max_retention_time=__ret__.max_retention_time,
        multizone=__ret__.multizone,
        password=__ret__.password,
        region=__ret__.region,
        rest_endpoint=__ret__.rest_endpoint,
        state=__ret__.state,
        tcp_endpoint=__ret__.tcp_endpoint,
        type=__ret__.type,
        username=__ret__.username)


@_utilities.lift_output_func(get_kafka_cluster)
def get_kafka_cluster_output(cluster_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKafkaClusterResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_upstash as upstash

    cluster_data = upstash.get_kafka_cluster(cluster_id=resource["upstash_kafka_cluster"]["exampleCluster"]["cluster_id"])
    ```
    """
    ...
