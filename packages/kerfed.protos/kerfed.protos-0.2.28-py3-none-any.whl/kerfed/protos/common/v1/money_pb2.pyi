"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Money(google.protobuf.message.Message):
    """Represents an amount of money with its currency type."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CURRENCY_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    currency: builtins.str
    """The three-letter currency code defined in ISO-4217.
    if undefined it is assumed to be `USD`
    """
    amount: builtins.float
    """The amount in `1/100` ("cents/pence") of the specified currency.
    For example, if `currency` is `"USD"`, then 1 unit of amount
    represents one US cent (1/100 dollar).
    Note that this is a *double* rather than an integer as when
    these messages are serialized to JSON an `int64` would be
    converted to a *string* as JSON does not support large integers.
    Our APIs will never return values here that can't be represented
    as integers, i.e. it will always be a value like `21212.0`
    """
    def __init__(
        self,
        *,
        currency: builtins.str = ...,
        amount: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["amount", b"amount", "currency", b"currency"]) -> None: ...

global___Money = Money
