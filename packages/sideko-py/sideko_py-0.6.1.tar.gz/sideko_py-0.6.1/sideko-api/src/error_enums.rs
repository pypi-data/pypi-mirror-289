/// Generated by Sideko (sideko.dev)
#[allow(unused)]
use crate::schemas::*;
/// Unifies the possible errors from delete_api_link
#[derive(Debug, Clone)]
pub enum DeleteApiLinkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_api_link_group
#[derive(Debug, Clone)]
pub enum DeleteApiLinkGroupErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_api_project
#[derive(Debug, Clone)]
pub enum DeleteApiProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_api_project_role
#[derive(Debug, Clone)]
pub enum DeleteApiProjectRoleErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_doc_project
#[derive(Debug, Clone)]
pub enum DeleteDocProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_doc_project_role
#[derive(Debug, Clone)]
pub enum DeleteDocProjectRoleErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_guide
#[derive(Debug, Clone)]
pub enum DeleteGuideErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_guide_href
#[derive(Debug, Clone)]
pub enum DeleteGuideHrefErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from delete_service_account
#[derive(Debug, Clone)]
pub enum DeleteServiceAccountErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from health_check
#[derive(Debug, Clone)]
pub enum HealthCheckErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from ping_check
#[derive(Debug, Clone)]
pub enum PingCheckErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_api_links
#[derive(Debug, Clone)]
pub enum ListApiLinksErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_api_link
#[derive(Debug, Clone)]
pub enum GetApiLinkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_api_link_groups
#[derive(Debug, Clone)]
pub enum ListApiLinkGroupsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_api_projects
#[derive(Debug, Clone)]
pub enum ListApiProjectsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_api_project
#[derive(Debug, Clone)]
pub enum GetApiProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_api_project_members
#[derive(Debug, Clone)]
pub enum ListApiProjectMembersErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_api_versions
#[derive(Debug, Clone)]
pub enum ListApiVersionsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_api_version
#[derive(Debug, Clone)]
pub enum GetApiVersionErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_api_version_openapi
#[derive(Debug, Clone)]
pub enum GetApiVersionOpenapiErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_api_version_stats
#[derive(Debug, Clone)]
pub enum GetApiVersionStatsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from exchange_code_for_key
#[derive(Debug, Clone)]
pub enum ExchangeCodeForKeyErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from login_callback
#[derive(Debug, Clone)]
pub enum LoginCallbackErrors {
    ApiError(serde_json::Value),
    /// Expected response body for status code 401
    Status401(Error),
}
/// Unifies the possible errors from login_url
#[derive(Debug, Clone)]
pub enum LoginUrlErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from cli_check_updates
#[derive(Debug, Clone)]
pub enum CliCheckUpdatesErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_doc_projects
#[derive(Debug, Clone)]
pub enum ListDocProjectsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_doc_project
#[derive(Debug, Clone)]
pub enum GetDocProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_deployments
#[derive(Debug, Clone)]
pub enum ListDeploymentsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_deployment
#[derive(Debug, Clone)]
pub enum GetDeploymentErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_doc_project_members
#[derive(Debug, Clone)]
pub enum ListDocProjectMembersErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from check_preview
#[derive(Debug, Clone)]
pub enum CheckPreviewErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_doc_project_theme
#[derive(Debug, Clone)]
pub enum GetDocProjectThemeErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_doc_versions
#[derive(Debug, Clone)]
pub enum ListDocVersionsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_doc_version
#[derive(Debug, Clone)]
pub enum GetDocVersionErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_guides
#[derive(Debug, Clone)]
pub enum ListGuidesErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_guide
#[derive(Debug, Clone)]
pub enum GetGuideErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_guide_content
#[derive(Debug, Clone)]
pub enum GetGuideContentErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_organization
#[derive(Debug, Clone)]
pub enum GetOrganizationErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_assets
#[derive(Debug, Clone)]
pub enum GetAssetsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from list_organization_members
#[derive(Debug, Clone)]
pub enum ListOrganizationMembersErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_organization_theme
#[derive(Debug, Clone)]
pub enum GetOrganizationThemeErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_current_user
#[derive(Debug, Clone)]
pub enum GetCurrentUserErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_api_key
#[derive(Debug, Clone)]
pub enum GetApiKeyErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_user_project_role
#[derive(Debug, Clone)]
pub enum GetUserProjectRoleErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from get_service_accounts
#[derive(Debug, Clone)]
pub enum GetServiceAccountsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_api_link
#[derive(Debug, Clone)]
pub enum UpdateApiLinkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_api_link_group
#[derive(Debug, Clone)]
pub enum UpdateApiLinkGroupErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_api_project
#[derive(Debug, Clone)]
pub enum UpdateApiProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_api_version
#[derive(Debug, Clone)]
pub enum UpdateApiVersionErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_doc_project
#[derive(Debug, Clone)]
pub enum UpdateDocProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_guide
#[derive(Debug, Clone)]
pub enum UpdateGuideErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_api_link
#[derive(Debug, Clone)]
pub enum CreateApiLinkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from reorder_api_links
#[derive(Debug, Clone)]
pub enum ReorderApiLinksErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_api_link_group
#[derive(Debug, Clone)]
pub enum CreateApiLinkGroupErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_api_project
#[derive(Debug, Clone)]
pub enum CreateApiProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from grant_api_project_role
#[derive(Debug, Clone)]
pub enum GrantApiProjectRoleErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_api_version
#[derive(Debug, Clone)]
pub enum CreateApiVersionErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_doc_project
#[derive(Debug, Clone)]
pub enum CreateDocProjectErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from trigger_deployment
#[derive(Debug, Clone)]
pub enum TriggerDeploymentErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from grant_doc_project_role
#[derive(Debug, Clone)]
pub enum GrantDocProjectRoleErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_guide
#[derive(Debug, Clone)]
pub enum CreateGuideErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from reorder_guides
#[derive(Debug, Clone)]
pub enum ReorderGuidesErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_organization
#[derive(Debug, Clone)]
pub enum CreateOrganizationErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from upload_assets
#[derive(Debug, Clone)]
pub enum UploadAssetsErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_sdk
#[derive(Debug, Clone)]
pub enum CreateSdkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_sdk
#[derive(Debug, Clone)]
pub enum UpdateSdkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from stateless_generate_sdk
#[derive(Debug, Clone)]
pub enum StatelessGenerateSdkErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from invite_user
#[derive(Debug, Clone)]
pub enum InviteUserErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from create_service_account
#[derive(Debug, Clone)]
pub enum CreateServiceAccountErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from vercel_webhook
#[derive(Debug, Clone)]
pub enum VercelWebhookErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_doc_project_theme
#[derive(Debug, Clone)]
pub enum UpdateDocProjectThemeErrors {
    ApiError(serde_json::Value),
}
/// Unifies the possible errors from update_organization_theme
#[derive(Debug, Clone)]
pub enum UpdateOrganizationThemeErrors {
    ApiError(serde_json::Value),
}
