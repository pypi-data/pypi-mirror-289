# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class Returned1(object):

    """Implementation of the 'returned1' model.

    Properties that the postcards in your Creative should have. Check within
    in order to add a QR code to your creative.

    Attributes:
        mail_type (MailTypeEnum): TODO: type description here.
        size (PostcardSizeEnum): TODO: type description here.
        front_original_url (str): The original URL of the `front` template.
        back_original_url (str): The original URL of the `back` template.
        address_placement (AddressPlacementEnum): TODO: type description
            here.
        buckslips (List[str]): A single-element array containing an existing
            buckslip id in a string format. See [buckslips](#tag/Buckslips)
            for more information.
        cards (List[str]): A single-element array containing an existing card
            id in a string format. See [cards](#tag/Cards) for more
            information.
        custom_envelope (object): TODO: type description here.
        color (bool): Set this key to `true` if you would like to print in
            color. Set to `false` if you would like to print in black and
            white.
        double_sided (bool): Set this attribute to `true` for double sided
            printing, or `false` for for single sided printing. Defaults to
            `true`.
        extra_service (object): TODO: type description here.
        file_original_url (str): The original URL of the `file` template.
        inside_original_url (str): The original URL of the `inside` template.
        outside_original_url (str): The original URL of the `outside`
            template.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mail_type": 'mail_type',
        "size": 'size',
        "front_original_url": 'front_original_url',
        "back_original_url": 'back_original_url',
        "address_placement": 'address_placement',
        "buckslips": 'buckslips',
        "cards": 'cards',
        "custom_envelope": 'custom_envelope',
        "color": 'color',
        "double_sided": 'double_sided',
        "extra_service": 'extra_service',
        "file_original_url": 'file_original_url',
        "inside_original_url": 'inside_original_url',
        "outside_original_url": 'outside_original_url'
    }

    _optionals = [
        'mail_type',
        'size',
        'front_original_url',
        'back_original_url',
        'address_placement',
        'buckslips',
        'cards',
        'custom_envelope',
        'color',
        'double_sided',
        'extra_service',
        'file_original_url',
        'inside_original_url',
        'outside_original_url',
    ]

    _nullables = [
        'buckslips',
        'cards',
    ]

    def __init__(self,
                 mail_type=APIHelper.SKIP,
                 size=APIHelper.SKIP,
                 front_original_url=APIHelper.SKIP,
                 back_original_url=APIHelper.SKIP,
                 address_placement=APIHelper.SKIP,
                 buckslips=APIHelper.SKIP,
                 cards=APIHelper.SKIP,
                 custom_envelope=APIHelper.SKIP,
                 color=APIHelper.SKIP,
                 double_sided=True,
                 extra_service=APIHelper.SKIP,
                 file_original_url=APIHelper.SKIP,
                 inside_original_url=APIHelper.SKIP,
                 outside_original_url=APIHelper.SKIP):
        """Constructor for the Returned1 class"""

        # Initialize members of the class
        if mail_type is not APIHelper.SKIP:
            self.mail_type = mail_type 
        if size is not APIHelper.SKIP:
            self.size = size 
        if front_original_url is not APIHelper.SKIP:
            self.front_original_url = front_original_url 
        if back_original_url is not APIHelper.SKIP:
            self.back_original_url = back_original_url 
        if address_placement is not APIHelper.SKIP:
            self.address_placement = address_placement 
        if buckslips is not APIHelper.SKIP:
            self.buckslips = buckslips 
        if cards is not APIHelper.SKIP:
            self.cards = cards 
        if custom_envelope is not APIHelper.SKIP:
            self.custom_envelope = custom_envelope 
        if color is not APIHelper.SKIP:
            self.color = color 
        self.double_sided = double_sided 
        if extra_service is not APIHelper.SKIP:
            self.extra_service = extra_service 
        if file_original_url is not APIHelper.SKIP:
            self.file_original_url = file_original_url 
        if inside_original_url is not APIHelper.SKIP:
            self.inside_original_url = inside_original_url 
        if outside_original_url is not APIHelper.SKIP:
            self.outside_original_url = outside_original_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else APIHelper.SKIP
        size = dictionary.get("size") if dictionary.get("size") else APIHelper.SKIP
        front_original_url = dictionary.get("front_original_url") if dictionary.get("front_original_url") else APIHelper.SKIP
        back_original_url = dictionary.get("back_original_url") if dictionary.get("back_original_url") else APIHelper.SKIP
        address_placement = dictionary.get("address_placement") if dictionary.get("address_placement") else APIHelper.SKIP
        buckslips = dictionary.get("buckslips") if "buckslips" in dictionary.keys() else APIHelper.SKIP
        cards = dictionary.get("cards") if "cards" in dictionary.keys() else APIHelper.SKIP
        custom_envelope = dictionary.get("custom_envelope") if dictionary.get("custom_envelope") else APIHelper.SKIP
        color = dictionary.get("color") if "color" in dictionary.keys() else APIHelper.SKIP
        double_sided = dictionary.get("double_sided") if dictionary.get("double_sided") else True
        extra_service = dictionary.get("extra_service") if dictionary.get("extra_service") else APIHelper.SKIP
        file_original_url = dictionary.get("file_original_url") if dictionary.get("file_original_url") else APIHelper.SKIP
        inside_original_url = dictionary.get("inside_original_url") if dictionary.get("inside_original_url") else APIHelper.SKIP
        outside_original_url = dictionary.get("outside_original_url") if dictionary.get("outside_original_url") else APIHelper.SKIP
        # Return an object of this model
        return cls(mail_type,
                   size,
                   front_original_url,
                   back_original_url,
                   address_placement,
                   buckslips,
                   cards,
                   custom_envelope,
                   color,
                   double_sided,
                   extra_service,
                   file_original_url,
                   inside_original_url,
                   outside_original_url)
