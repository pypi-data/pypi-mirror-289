# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.code_enum import CodeEnum
from lob.models.failure_status_code_enum import FailureStatusCodeEnum


class Error1(object):

    """Implementation of the 'Error1' model.

    TODO: type model description here.

    Attributes:
        message (str): A human-readable message with more details about the
            error
        status_code (FailureStatusCodeEnum): TODO: type description here.
        code (CodeEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "message": 'message',
        "status_code": 'status_code',
        "code": 'code'
    }

    def __init__(self,
                 message=None,
                 status_code=None,
                 code=None):
        """Constructor for the Error1 class"""

        # Initialize members of the class
        self.message = message 
        self.status_code = status_code 
        self.code = code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        message = dictionary.get("message") if dictionary.get("message") else None
        status_code = dictionary.get("status_code") if dictionary.get("status_code") else None
        code = dictionary.get("code") if dictionary.get("code") else None
        # Return an object of this model
        return cls(message,
                   status_code,
                   code)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.message,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.status_code,
                                            type_callable=lambda value: FailureStatusCodeEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.code,
                                            type_callable=lambda value: CodeEnum.validate(value))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('message'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('status_code'),
                                        type_callable=lambda value: FailureStatusCodeEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('code'),
                                        type_callable=lambda value: CodeEnum.validate(value))
