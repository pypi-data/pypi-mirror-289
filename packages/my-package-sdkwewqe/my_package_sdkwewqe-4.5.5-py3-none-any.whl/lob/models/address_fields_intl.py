# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class AddressFieldsIntl(object):

    """Implementation of the 'address_fields_intl' model.

    TODO: type model description here.

    Attributes:
        address_line_1 (str): The primary number, street name, and directional
            information.
        address_line_2 (str): An optional field containing any information
            which can't fit into line 1.
        address_city (str): TODO: type description here.
        address_state (str): TODO: type description here.
        address_zip (str): Optional postal code.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address_line_1": 'address_line1',
        "address_line_2": 'address_line2',
        "address_city": 'address_city',
        "address_state": 'address_state',
        "address_zip": 'address_zip'
    }

    _optionals = [
        'address_line_2',
        'address_city',
        'address_state',
        'address_zip',
    ]

    _nullables = [
        'address_line_2',
        'address_city',
        'address_state',
        'address_zip',
    ]

    def __init__(self,
                 address_line_1=None,
                 address_line_2=APIHelper.SKIP,
                 address_city=APIHelper.SKIP,
                 address_state=APIHelper.SKIP,
                 address_zip=APIHelper.SKIP):
        """Constructor for the AddressFieldsIntl class"""

        # Initialize members of the class
        self.address_line_1 = address_line_1 
        if address_line_2 is not APIHelper.SKIP:
            self.address_line_2 = address_line_2 
        if address_city is not APIHelper.SKIP:
            self.address_city = address_city 
        if address_state is not APIHelper.SKIP:
            self.address_state = address_state 
        if address_zip is not APIHelper.SKIP:
            self.address_zip = address_zip 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        address_line_1 = dictionary.get("address_line1") if dictionary.get("address_line1") else None
        address_line_2 = dictionary.get("address_line2") if "address_line2" in dictionary.keys() else APIHelper.SKIP
        address_city = dictionary.get("address_city") if "address_city" in dictionary.keys() else APIHelper.SKIP
        address_state = dictionary.get("address_state") if "address_state" in dictionary.keys() else APIHelper.SKIP
        address_zip = dictionary.get("address_zip") if "address_zip" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(address_line_1,
                   address_line_2,
                   address_city,
                   address_state,
                   address_zip)
