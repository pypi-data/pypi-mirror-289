# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class LinkResponse(object):

    """Implementation of the 'link_response' model.

    TODO: type model description here.

    Attributes:
        id (str): Unique identifier prefixed with `lnk_`.
        campaign_id (str): Unique identifier prefixed with `cmp_`.
        domain_id (str): A unique identifier for the registered domain.
        resource_id (str): The unique ID of the associated resource where the
            link was used.
        redirect_link (str): The original target URL.
        short_link (str): The shortened URL for the associated original URL.
        metadata_tag (Dict[str, str]): Use metadata to store custom
            information for tagging and labeling back to your internal
            systems. Must be an object with up to 20 key-value pairs. Keys
            must be at most 40 characters and values must be at most 500
            characters. Neither can contain the characters `"` and `\`. i.e.
            '{"customer_id" : "NEWYORK2015"}' Nested objects are not
            supported.  See [Metadata](#section/Metadata) for more
            information.
        billing_group_id (str): An optional string with the billing group ID
            to tag your usage with. Is used for billing purposes. Requires
            special activation to use. See <a
            href="#tag/Billing-Groups">Billing Group API</a> for more
            information.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "campaign_id": 'campaign_id',
        "domain_id": 'domain_id',
        "resource_id": 'resource_id',
        "redirect_link": 'redirect_link',
        "short_link": 'short_link',
        "metadata_tag": 'metadata_tag',
        "billing_group_id": 'billing_group_id'
    }

    _optionals = [
        'id',
        'campaign_id',
        'domain_id',
        'resource_id',
        'redirect_link',
        'short_link',
        'metadata_tag',
        'billing_group_id',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 campaign_id=APIHelper.SKIP,
                 domain_id=APIHelper.SKIP,
                 resource_id=APIHelper.SKIP,
                 redirect_link=APIHelper.SKIP,
                 short_link=APIHelper.SKIP,
                 metadata_tag=APIHelper.SKIP,
                 billing_group_id=APIHelper.SKIP):
        """Constructor for the LinkResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if campaign_id is not APIHelper.SKIP:
            self.campaign_id = campaign_id 
        if domain_id is not APIHelper.SKIP:
            self.domain_id = domain_id 
        if resource_id is not APIHelper.SKIP:
            self.resource_id = resource_id 
        if redirect_link is not APIHelper.SKIP:
            self.redirect_link = redirect_link 
        if short_link is not APIHelper.SKIP:
            self.short_link = short_link 
        if metadata_tag is not APIHelper.SKIP:
            self.metadata_tag = metadata_tag 
        if billing_group_id is not APIHelper.SKIP:
            self.billing_group_id = billing_group_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        campaign_id = dictionary.get("campaign_id") if dictionary.get("campaign_id") else APIHelper.SKIP
        domain_id = dictionary.get("domain_id") if dictionary.get("domain_id") else APIHelper.SKIP
        resource_id = dictionary.get("resource_id") if dictionary.get("resource_id") else APIHelper.SKIP
        redirect_link = dictionary.get("redirect_link") if dictionary.get("redirect_link") else APIHelper.SKIP
        short_link = dictionary.get("short_link") if dictionary.get("short_link") else APIHelper.SKIP
        metadata_tag = dictionary.get("metadata_tag") if dictionary.get("metadata_tag") else APIHelper.SKIP
        billing_group_id = dictionary.get("billing_group_id") if dictionary.get("billing_group_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   campaign_id,
                   domain_id,
                   resource_id,
                   redirect_link,
                   short_link,
                   metadata_tag,
                   billing_group_id)
