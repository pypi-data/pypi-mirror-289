# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from lob.api_helper import APIHelper
from lob.models.thumbnail import Thumbnail


class Generated(object):

    """Implementation of the 'generated' model.

    TODO: type model description here.

    Attributes:
        to (object): TODO: type description here.
        carrier (str): TODO: type description here.
        thumbnails (List[Thumbnail]): TODO: type description here.
        expected_delivery_date (date): A date in YYYY-MM-DD format of the
            mailpiece's expected delivery date based on its `send_date`.
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        date_modified (datetime): A timestamp in ISO 8601 format of the date
            the resource was last modified.
        deleted (bool): Only returned if the resource has been successfully
            deleted.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "to": 'to',
        "carrier": 'carrier',
        "thumbnails": 'thumbnails',
        "expected_delivery_date": 'expected_delivery_date',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "deleted": 'deleted'
    }

    _optionals = [
        'thumbnails',
        'expected_delivery_date',
        'date_created',
        'date_modified',
        'deleted',
    ]

    def __init__(self,
                 to=None,
                 thumbnails=APIHelper.SKIP,
                 expected_delivery_date=APIHelper.SKIP,
                 date_created=APIHelper.SKIP,
                 date_modified=APIHelper.SKIP,
                 deleted=APIHelper.SKIP):
        """Constructor for the Generated class"""

        # Initialize members of the class
        self.to = to 
        self.carrier = 'USPS' 
        if thumbnails is not APIHelper.SKIP:
            self.thumbnails = thumbnails 
        if expected_delivery_date is not APIHelper.SKIP:
            self.expected_delivery_date = expected_delivery_date 
        if date_created is not APIHelper.SKIP:
            self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        if date_modified is not APIHelper.SKIP:
            self.date_modified = APIHelper.apply_datetime_converter(date_modified, APIHelper.RFC3339DateTime) if date_modified else None 
        if deleted is not APIHelper.SKIP:
            self.deleted = deleted 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        to = dictionary.get("to") if dictionary.get("to") else None
        thumbnails = None
        if dictionary.get('thumbnails') is not None:
            thumbnails = [Thumbnail.from_dictionary(x) for x in dictionary.get('thumbnails')]
        else:
            thumbnails = APIHelper.SKIP
        expected_delivery_date = dateutil.parser.parse(dictionary.get('expected_delivery_date')).date() if dictionary.get('expected_delivery_date') else APIHelper.SKIP
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else APIHelper.SKIP
        date_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_modified")).datetime if dictionary.get("date_modified") else APIHelper.SKIP
        deleted = dictionary.get("deleted") if "deleted" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(to,
                   thumbnails,
                   expected_delivery_date,
                   date_created,
                   date_modified,
                   deleted)
