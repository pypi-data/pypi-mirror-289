# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class MultipleComponentsIntl(object):

    """Implementation of the 'multiple_components_intl' model.

    TODO: type model description here.

    Attributes:
        recipient (str): The intended recipient, typically a person's or
            firm's name.
        primary_line (str): The primary delivery line (usually the street
            address) of the address.
        secondary_line (str): The secondary delivery line of the address. This
            field is typically empty but may contain information if
            `primary_line` is too long.
        city (str): TODO: type description here.
        state (str): The name of the state.
        postal_code (str): The postal code.
        country (CountryExtendedEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_line": 'primary_line',
        "country": 'country',
        "recipient": 'recipient',
        "secondary_line": 'secondary_line',
        "city": 'city',
        "state": 'state',
        "postal_code": 'postal_code'
    }

    _optionals = [
        'recipient',
        'secondary_line',
        'city',
        'state',
        'postal_code',
    ]

    _nullables = [
        'recipient',
    ]

    def __init__(self,
                 primary_line=None,
                 country=None,
                 recipient=APIHelper.SKIP,
                 secondary_line=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 postal_code=APIHelper.SKIP):
        """Constructor for the MultipleComponentsIntl class"""

        # Initialize members of the class
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        self.primary_line = primary_line 
        if secondary_line is not APIHelper.SKIP:
            self.secondary_line = secondary_line 
        if city is not APIHelper.SKIP:
            self.city = city 
        if state is not APIHelper.SKIP:
            self.state = state 
        if postal_code is not APIHelper.SKIP:
            self.postal_code = postal_code 
        self.country = country 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_line = dictionary.get("primary_line") if dictionary.get("primary_line") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        recipient = dictionary.get("recipient") if "recipient" in dictionary.keys() else APIHelper.SKIP
        secondary_line = dictionary.get("secondary_line") if dictionary.get("secondary_line") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        postal_code = dictionary.get("postal_code") if dictionary.get("postal_code") else APIHelper.SKIP
        # Return an object of this model
        return cls(primary_line,
                   country,
                   recipient,
                   secondary_line,
                   city,
                   state,
                   postal_code)
