# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class LinkSingle(object):

    """Implementation of the 'link_single' model.

    TODO: type model description here.

    Attributes:
        redirect_link (str): The original target URL.
        domain (str): The registered domain to be used for the short URL.
        slug (str): The unique path for the shortened URL, if empty a unique
            path will be used.
        metadata_tag (Dict[str, str]): Use metadata to store custom
            information for tagging and labeling back to your internal
            systems. Must be an object with up to 20 key-value pairs. Keys
            must be at most 40 characters and values must be at most 500
            characters. Neither can contain the characters `"` and `\`. i.e.
            '{"customer_id" : "NEWYORK2015"}' Nested objects are not
            supported.  See [Metadata](#section/Metadata) for more
            information.
        billing_group_id (str): An optional string with the billing group ID
            to tag your usage with. Is used for billing purposes. Requires
            special activation to use. See <a
            href="#tag/Billing-Groups">Billing Group API</a> for more
            information.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "redirect_link": 'redirect_link',
        "domain": 'domain',
        "slug": 'slug',
        "metadata_tag": 'metadata_tag',
        "billing_group_id": 'billing_group_id'
    }

    _optionals = [
        'domain',
        'slug',
        'metadata_tag',
        'billing_group_id',
    ]

    def __init__(self,
                 redirect_link=None,
                 domain=APIHelper.SKIP,
                 slug=APIHelper.SKIP,
                 metadata_tag=APIHelper.SKIP,
                 billing_group_id=APIHelper.SKIP):
        """Constructor for the LinkSingle class"""

        # Initialize members of the class
        self.redirect_link = redirect_link 
        if domain is not APIHelper.SKIP:
            self.domain = domain 
        if slug is not APIHelper.SKIP:
            self.slug = slug 
        if metadata_tag is not APIHelper.SKIP:
            self.metadata_tag = metadata_tag 
        if billing_group_id is not APIHelper.SKIP:
            self.billing_group_id = billing_group_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        redirect_link = dictionary.get("redirect_link") if dictionary.get("redirect_link") else None
        domain = dictionary.get("domain") if dictionary.get("domain") else APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        metadata_tag = dictionary.get("metadata_tag") if dictionary.get("metadata_tag") else APIHelper.SKIP
        billing_group_id = dictionary.get("billing_group_id") if dictionary.get("billing_group_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(redirect_link,
                   domain,
                   slug,
                   metadata_tag,
                   billing_group_id)
