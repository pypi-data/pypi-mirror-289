# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CoverageEnum(object):

    """Implementation of the 'Coverage' enum.

    The coverage level for the country. This represents the maximum level of
    accuracy an input address can be verified to.
    * `SUBBUILDING` - Coverage down to unit numbers. For example, in an
    apartment or a large building
    * `HOUSENUMBER/BUILDING` - Coverage down to house number. For example, the
    address where a house or building may be located
    * `STREET` - Coverage down to street. This means that we can verify that
    an street exists in a city, state, country
    * `LOCALITY` - Coverage down to city, state, or village or province. This
    means that we can verify that a city, village, province, or state exists
    in a country. Countries differ in how they define what is a province,
    state, city, village, etc. This attempts to group eveyrthing together.
    * `SPARSE` - Some addresses for this country exist in our databases

    Attributes:
        SUBBUILDING: TODO: type description here.
        ENUM_HOUSENUMBERBUILDING: TODO: type description here.
        STREET: TODO: type description here.
        LOCALITY: TODO: type description here.
        SPARSE: TODO: type description here.

    """
    _all_values = ['SUBBUILDING', 'HOUSENUMBER/BUILDING', 'STREET', 'LOCALITY', 'SPARSE']
    SUBBUILDING = 'SUBBUILDING'

    ENUM_HOUSENUMBERBUILDING = 'HOUSENUMBER/BUILDING'

    STREET = 'STREET'

    LOCALITY = 'LOCALITY'

    SPARSE = 'SPARSE'

    @classmethod
    def validate(cls, value):
        """Validates value contains in enum

        Args:
            value: the value to be validated

        Returns:
            boolean : if value is valid enum values.

        """
        return value in cls._all_values
   