# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.components_4 import Components4
from lob.models.deliverability_analysis_1 import DeliverabilityAnalysis1
from lob.models.lob_confidence_score_1 import LobConfidenceScore1


class UsVerification(object):

    """Implementation of the 'us_verification' model.

    TODO: type model description here.

    Attributes:
        id (str): Unique identifier prefixed with `us_ver_`.
        recipient (str): The intended recipient, typically a person's or
            firm's name.
        primary_line (str): The primary delivery line (usually the street
            address) of the address. Combination of the following applicable
            `components`: * `primary_number` * `street_predirection` *
            `street_name` * `street_suffix` * `street_postdirection` *
            `secondary_designator` * `secondary_number` * `pmb_designator` *
            `pmb_number`
        secondary_line (str): The secondary delivery line of the address. This
            field is typically empty but may contain information if
            `primary_line` is too long.
        urbanization (str): Only present for addresses in Puerto Rico. An
            urbanization refers to an area, sector, or development within a
            city. See <a
            href="https://pe.usps.com/text/pub28/28api_008.htm#:~:text=I51.,-4%
            20Urbanizations&text=In%20Puerto%20Rico%2C%20identical%20street,pla
            ced%20before%20the%20urbanization%20name." target="_blank">USPS
            documentation</a> for clarification.
        last_line (str): Combination of the following applicable `components`:
            * City (`city`) * State (`state`) * ZIP code (`zip_code`) * ZIP+4
            (`zip_code_plus_4`)
        deliverability (DeliverabilityEnum): TODO: type description here.
        valid_address (bool): This field indicates whether an address was
            found in a more comprehensive address dataset that includes
            sources from the USPS, open source mapping data, and our
            proprietary mail delivery data. This field can be interpreted as a
            representation of whether an address is a real location or not.
            Additionally a valid address may contradict the deliverability
            field since an address can be a real valid location but the USPS
            may not deliver to that address.
        components (Components4): TODO: type description here.
        deliverability_analysis (DeliverabilityAnalysis1): TODO: type
            description here.
        lob_confidence_score (LobConfidenceScore1): TODO: type description
            here.
        object (Object1Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "recipient": 'recipient',
        "primary_line": 'primary_line',
        "secondary_line": 'secondary_line',
        "urbanization": 'urbanization',
        "last_line": 'last_line',
        "deliverability": 'deliverability',
        "valid_address": 'valid_address',
        "components": 'components',
        "deliverability_analysis": 'deliverability_analysis',
        "lob_confidence_score": 'lob_confidence_score',
        "object": 'object'
    }

    _optionals = [
        'id',
        'recipient',
        'primary_line',
        'secondary_line',
        'urbanization',
        'last_line',
        'deliverability',
        'valid_address',
        'components',
        'deliverability_analysis',
        'lob_confidence_score',
        'object',
    ]

    _nullables = [
        'recipient',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 recipient=APIHelper.SKIP,
                 primary_line=APIHelper.SKIP,
                 secondary_line=APIHelper.SKIP,
                 urbanization=APIHelper.SKIP,
                 last_line=APIHelper.SKIP,
                 deliverability=APIHelper.SKIP,
                 valid_address=APIHelper.SKIP,
                 components=APIHelper.SKIP,
                 deliverability_analysis=APIHelper.SKIP,
                 lob_confidence_score=APIHelper.SKIP,
                 object=APIHelper.SKIP):
        """Constructor for the UsVerification class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        if primary_line is not APIHelper.SKIP:
            self.primary_line = primary_line 
        if secondary_line is not APIHelper.SKIP:
            self.secondary_line = secondary_line 
        if urbanization is not APIHelper.SKIP:
            self.urbanization = urbanization 
        if last_line is not APIHelper.SKIP:
            self.last_line = last_line 
        if deliverability is not APIHelper.SKIP:
            self.deliverability = deliverability 
        if valid_address is not APIHelper.SKIP:
            self.valid_address = valid_address 
        if components is not APIHelper.SKIP:
            self.components = components 
        if deliverability_analysis is not APIHelper.SKIP:
            self.deliverability_analysis = deliverability_analysis 
        if lob_confidence_score is not APIHelper.SKIP:
            self.lob_confidence_score = lob_confidence_score 
        if object is not APIHelper.SKIP:
            self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        recipient = dictionary.get("recipient") if "recipient" in dictionary.keys() else APIHelper.SKIP
        primary_line = dictionary.get("primary_line") if dictionary.get("primary_line") else APIHelper.SKIP
        secondary_line = dictionary.get("secondary_line") if dictionary.get("secondary_line") else APIHelper.SKIP
        urbanization = dictionary.get("urbanization") if dictionary.get("urbanization") else APIHelper.SKIP
        last_line = dictionary.get("last_line") if dictionary.get("last_line") else APIHelper.SKIP
        deliverability = dictionary.get("deliverability") if dictionary.get("deliverability") else APIHelper.SKIP
        valid_address = dictionary.get("valid_address") if "valid_address" in dictionary.keys() else APIHelper.SKIP
        components = Components4.from_dictionary(dictionary.get('components')) if 'components' in dictionary.keys() else APIHelper.SKIP
        deliverability_analysis = DeliverabilityAnalysis1.from_dictionary(dictionary.get('deliverability_analysis')) if 'deliverability_analysis' in dictionary.keys() else APIHelper.SKIP
        lob_confidence_score = LobConfidenceScore1.from_dictionary(dictionary.get('lob_confidence_score')) if 'lob_confidence_score' in dictionary.keys() else APIHelper.SKIP
        object = dictionary.get("object") if dictionary.get("object") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   recipient,
                   primary_line,
                   secondary_line,
                   urbanization,
                   last_line,
                   deliverability,
                   valid_address,
                   components,
                   deliverability_analysis,
                   lob_confidence_score,
                   object)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
