# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.address_type_enum import AddressTypeEnum
from lob.models.carrier_route_type_enum import CarrierRouteTypeEnum
from lob.models.record_type_enum import RecordTypeEnum
from lob.models.street_postdirection_enum import StreetPostdirectionEnum
from lob.models.street_predirection_enum import StreetPredirectionEnum
from lob.models.zip_code_type_enum import ZipCodeTypeEnum


class Components4(object):

    """Implementation of the 'Components4' model.

    TODO: type model description here.

    Attributes:
        primary_number (str): The numeric or alphanumeric part of an address
            preceding the street name. Often the house, building, or PO Box
            number.
        street_predirection (StreetPredirectionEnum): TODO: type description
            here.
        street_name (str): The name of the street.
        street_suffix (str): The standard USPS abbreviation for the street
            suffix (`ST`, `AVE`, `BLVD`, etc).
        street_postdirection (StreetPostdirectionEnum): TODO: type description
            here.
        secondary_designator (str): The standard USPS abbreviation describing
            the `components[secondary_number]` (`STE`, `APT`, `BLDG`, etc).
        secondary_number (str): Number of the apartment/unit/etc.
        pmb_designator (str): Designator of a <a
            href="https://en.wikipedia.org/wiki/Commercial_mail_receiving_agenc
            y" target="_blank">CMRA-authorized</a> private mailbox.
        pmb_number (str): Number of a <a
            href="https://en.wikipedia.org/wiki/Commercial_mail_receiving_agenc
            y" target="_blank">CMRA-authorized</a> private mailbox.
        extra_secondary_designator (str): An extra (often unnecessary)
            secondary designator provided with the input address.
        extra_secondary_number (str): An extra (often unnecessary) secondary
            number provided with the input address.
        city (str): TODO: type description here.
        state (str): The <a href="https://en.wikipedia.org/wiki/ISO_3166-2"
            target="_blank">ISO 3166-2</a> two letter code for the state.
        zip_code (str): The 5-digit ZIP code
        zip_code_plus_4 (str): TODO: type description here.
        zip_code_type (ZipCodeTypeEnum): TODO: type description here.
        delivery_point_barcode (str): A 12-digit identifier that uniquely
            identifies a delivery point (location where mail can be sent and
            received). It consists of the 5-digit ZIP code (`zip_code`),
            4-digit ZIP+4 add-on (`zip_code_plus_4`), 2-digit delivery point,
            and 1-digit delivery point check digit.
        address_type (AddressTypeEnum): TODO: type description here.
        record_type (RecordTypeEnum): TODO: type description here.
        default_building_address (bool): Designates whether or not the address
            is the default address for a building containing multiple delivery
            points.
        county (str): County name of the address city.
        county_fips (str): A 5-digit <a
            href="https://en.wikipedia.org/wiki/FIPS_county_code"
            target="_blank">FIPS county code</a> which uniquely identifies
            `components[county]`. It consists of a 2-digit state code and a
            3-digit county code.
        carrier_route (str): A 4-character code assigned to a mail delivery
            route within a ZIP code.
        carrier_route_type (CarrierRouteTypeEnum): TODO: type description
            here.
        latitude (float): A positive or negative decimal indicating the
            geographic latitude of the address, specifying the north-to-south
            position of a location. This should be used with `longitude` to
            pinpoint locations on a map. Will not be returned for
            undeliverable addresses or military addresses (state is `AA`,
            `AE`, or `AP`).
        longitude (float): A positive or negative decimal indicating the
            geographic longitude of the address, specifying the north-to-south
            position of a location. This should be used with `latitude` to
            pinpoint locations on a map. Will not be returned for
            undeliverable addresses or military addresses (state is `AA`,
            `AE`, or `AP`).

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_number": 'primary_number',
        "street_predirection": 'street_predirection',
        "street_name": 'street_name',
        "street_suffix": 'street_suffix',
        "street_postdirection": 'street_postdirection',
        "secondary_designator": 'secondary_designator',
        "secondary_number": 'secondary_number',
        "pmb_designator": 'pmb_designator',
        "pmb_number": 'pmb_number',
        "extra_secondary_designator": 'extra_secondary_designator',
        "extra_secondary_number": 'extra_secondary_number',
        "city": 'city',
        "state": 'state',
        "zip_code": 'zip_code',
        "zip_code_plus_4": 'zip_code_plus_4',
        "zip_code_type": 'zip_code_type',
        "delivery_point_barcode": 'delivery_point_barcode',
        "address_type": 'address_type',
        "record_type": 'record_type',
        "default_building_address": 'default_building_address',
        "county": 'county',
        "county_fips": 'county_fips',
        "carrier_route": 'carrier_route',
        "carrier_route_type": 'carrier_route_type',
        "latitude": 'latitude',
        "longitude": 'longitude'
    }

    _optionals = [
        'latitude',
        'longitude',
    ]

    _nullables = [
        'latitude',
        'longitude',
    ]

    def __init__(self,
                 primary_number=None,
                 street_predirection=None,
                 street_name=None,
                 street_suffix=None,
                 street_postdirection=None,
                 secondary_designator=None,
                 secondary_number=None,
                 pmb_designator=None,
                 pmb_number=None,
                 extra_secondary_designator=None,
                 extra_secondary_number=None,
                 city=None,
                 state=None,
                 zip_code=None,
                 zip_code_plus_4=None,
                 zip_code_type=None,
                 delivery_point_barcode=None,
                 address_type=None,
                 record_type=None,
                 default_building_address=None,
                 county=None,
                 county_fips=None,
                 carrier_route=None,
                 carrier_route_type=None,
                 latitude=APIHelper.SKIP,
                 longitude=APIHelper.SKIP):
        """Constructor for the Components4 class"""

        # Initialize members of the class
        self.primary_number = primary_number 
        self.street_predirection = street_predirection 
        self.street_name = street_name 
        self.street_suffix = street_suffix 
        self.street_postdirection = street_postdirection 
        self.secondary_designator = secondary_designator 
        self.secondary_number = secondary_number 
        self.pmb_designator = pmb_designator 
        self.pmb_number = pmb_number 
        self.extra_secondary_designator = extra_secondary_designator 
        self.extra_secondary_number = extra_secondary_number 
        self.city = city 
        self.state = state 
        self.zip_code = zip_code 
        self.zip_code_plus_4 = zip_code_plus_4 
        self.zip_code_type = zip_code_type 
        self.delivery_point_barcode = delivery_point_barcode 
        self.address_type = address_type 
        self.record_type = record_type 
        self.default_building_address = default_building_address 
        self.county = county 
        self.county_fips = county_fips 
        self.carrier_route = carrier_route 
        self.carrier_route_type = carrier_route_type 
        if latitude is not APIHelper.SKIP:
            self.latitude = latitude 
        if longitude is not APIHelper.SKIP:
            self.longitude = longitude 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_number = dictionary.get("primary_number") if dictionary.get("primary_number") else None
        street_predirection = dictionary.get("street_predirection") if dictionary.get("street_predirection") else None
        street_name = dictionary.get("street_name") if dictionary.get("street_name") else None
        street_suffix = dictionary.get("street_suffix") if dictionary.get("street_suffix") else None
        street_postdirection = dictionary.get("street_postdirection") if dictionary.get("street_postdirection") else None
        secondary_designator = dictionary.get("secondary_designator") if dictionary.get("secondary_designator") else None
        secondary_number = dictionary.get("secondary_number") if dictionary.get("secondary_number") else None
        pmb_designator = dictionary.get("pmb_designator") if dictionary.get("pmb_designator") else None
        pmb_number = dictionary.get("pmb_number") if dictionary.get("pmb_number") else None
        extra_secondary_designator = dictionary.get("extra_secondary_designator") if dictionary.get("extra_secondary_designator") else None
        extra_secondary_number = dictionary.get("extra_secondary_number") if dictionary.get("extra_secondary_number") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        zip_code = dictionary.get("zip_code") if dictionary.get("zip_code") else None
        zip_code_plus_4 = dictionary.get("zip_code_plus_4") if dictionary.get("zip_code_plus_4") else None
        zip_code_type = dictionary.get("zip_code_type") if dictionary.get("zip_code_type") else None
        delivery_point_barcode = dictionary.get("delivery_point_barcode") if dictionary.get("delivery_point_barcode") else None
        address_type = dictionary.get("address_type") if dictionary.get("address_type") else None
        record_type = dictionary.get("record_type") if dictionary.get("record_type") else None
        default_building_address = dictionary.get("default_building_address") if "default_building_address" in dictionary.keys() else None
        county = dictionary.get("county") if dictionary.get("county") else None
        county_fips = dictionary.get("county_fips") if dictionary.get("county_fips") else None
        carrier_route = dictionary.get("carrier_route") if dictionary.get("carrier_route") else None
        carrier_route_type = dictionary.get("carrier_route_type") if dictionary.get("carrier_route_type") else None
        latitude = dictionary.get("latitude") if "latitude" in dictionary.keys() else APIHelper.SKIP
        longitude = dictionary.get("longitude") if "longitude" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(primary_number,
                   street_predirection,
                   street_name,
                   street_suffix,
                   street_postdirection,
                   secondary_designator,
                   secondary_number,
                   pmb_designator,
                   pmb_number,
                   extra_secondary_designator,
                   extra_secondary_number,
                   city,
                   state,
                   zip_code,
                   zip_code_plus_4,
                   zip_code_type,
                   delivery_point_barcode,
                   address_type,
                   record_type,
                   default_building_address,
                   county,
                   county_fips,
                   carrier_route,
                   carrier_route_type,
                   latitude,
                   longitude)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.primary_number,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.street_predirection,
                                            type_callable=lambda value: StreetPredirectionEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.street_name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.street_suffix,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.street_postdirection,
                                            type_callable=lambda value: StreetPostdirectionEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.secondary_designator,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.secondary_number,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.pmb_designator,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.pmb_number,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.extra_secondary_designator,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.extra_secondary_number,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.city,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.state,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.zip_code,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.zip_code_plus_4,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.zip_code_type,
                                            type_callable=lambda value: ZipCodeTypeEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.delivery_point_barcode,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.address_type,
                                            type_callable=lambda value: AddressTypeEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.record_type,
                                            type_callable=lambda value: RecordTypeEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.default_building_address,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.county,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.county_fips,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.carrier_route,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.carrier_route_type,
                                            type_callable=lambda value: CarrierRouteTypeEnum.validate(value))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('primary_number'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('street_predirection'),
                                        type_callable=lambda value: StreetPredirectionEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('street_name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('street_suffix'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('street_postdirection'),
                                        type_callable=lambda value: StreetPostdirectionEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('secondary_designator'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('secondary_number'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('pmb_designator'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('pmb_number'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('extra_secondary_designator'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('extra_secondary_number'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('city'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('state'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('zip_code'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('zip_code_plus_4'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('zip_code_type'),
                                        type_callable=lambda value: ZipCodeTypeEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('delivery_point_barcode'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('address_type'),
                                        type_callable=lambda value: AddressTypeEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('record_type'),
                                        type_callable=lambda value: RecordTypeEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('default_building_address'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('county'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('county_fips'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('carrier_route'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('carrier_route_type'),
                                        type_callable=lambda value: CarrierRouteTypeEnum.validate(value))
