# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class CampaignUpdatable(object):

    """Implementation of the 'campaign_updatable' model.

    TODO: type model description here.

    Attributes:
        name (str): TODO: type description here.
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        schedule_type (CmpScheduleTypeEnum): TODO: type description here.
        target_delivery_date (datetime): If `schedule_type` is
            `target_delivery_date`, provide a targeted delivery date for mail
            pieces in this campaign.
        send_date (datetime): If `schedule_type` is `scheduled_send_date`,
            provide a date to send this campaign.
        cancel_window_campaign_minutes (int): A window, in minutes, within
            which the campaign can be canceled.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.
        is_draft (bool): Whether or not the campaign is still a draft. Can
            either be excluded or `false`.
        use_type (object): TODO: type description here.
        auto_cancel_if_ncoa (bool): Whether or not a mail piece should be
            automatically canceled and not sent if the address is updated via
            NCOA.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "description": 'description',
        "schedule_type": 'schedule_type',
        "target_delivery_date": 'target_delivery_date',
        "send_date": 'send_date',
        "cancel_window_campaign_minutes": 'cancel_window_campaign_minutes',
        "metadata": 'metadata',
        "is_draft": 'is_draft',
        "use_type": 'use_type',
        "auto_cancel_if_ncoa": 'auto_cancel_if_ncoa'
    }

    _optionals = [
        'name',
        'description',
        'schedule_type',
        'target_delivery_date',
        'send_date',
        'cancel_window_campaign_minutes',
        'metadata',
        'is_draft',
        'use_type',
        'auto_cancel_if_ncoa',
    ]

    _nullables = [
        'description',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 schedule_type=APIHelper.SKIP,
                 target_delivery_date=APIHelper.SKIP,
                 send_date=APIHelper.SKIP,
                 cancel_window_campaign_minutes=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 is_draft=APIHelper.SKIP,
                 use_type=APIHelper.SKIP,
                 auto_cancel_if_ncoa=APIHelper.SKIP):
        """Constructor for the CampaignUpdatable class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if schedule_type is not APIHelper.SKIP:
            self.schedule_type = schedule_type 
        if target_delivery_date is not APIHelper.SKIP:
            self.target_delivery_date = APIHelper.apply_datetime_converter(target_delivery_date, APIHelper.RFC3339DateTime) if target_delivery_date else None 
        if send_date is not APIHelper.SKIP:
            self.send_date = APIHelper.apply_datetime_converter(send_date, APIHelper.RFC3339DateTime) if send_date else None 
        if cancel_window_campaign_minutes is not APIHelper.SKIP:
            self.cancel_window_campaign_minutes = cancel_window_campaign_minutes 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if is_draft is not APIHelper.SKIP:
            self.is_draft = is_draft 
        if use_type is not APIHelper.SKIP:
            self.use_type = use_type 
        if auto_cancel_if_ncoa is not APIHelper.SKIP:
            self.auto_cancel_if_ncoa = auto_cancel_if_ncoa 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        schedule_type = dictionary.get("schedule_type") if dictionary.get("schedule_type") else APIHelper.SKIP
        target_delivery_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("target_delivery_date")).datetime if dictionary.get("target_delivery_date") else APIHelper.SKIP
        send_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("send_date")).datetime if dictionary.get("send_date") else APIHelper.SKIP
        cancel_window_campaign_minutes = dictionary.get("cancel_window_campaign_minutes") if dictionary.get("cancel_window_campaign_minutes") else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        is_draft = dictionary.get("is_draft") if "is_draft" in dictionary.keys() else APIHelper.SKIP
        use_type = dictionary.get("use_type") if dictionary.get("use_type") else APIHelper.SKIP
        auto_cancel_if_ncoa = dictionary.get("auto_cancel_if_ncoa") if "auto_cancel_if_ncoa" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   description,
                   schedule_type,
                   target_delivery_date,
                   send_date,
                   cancel_window_campaign_minutes,
                   metadata,
                   is_draft,
                   use_type,
                   auto_cancel_if_ncoa)
