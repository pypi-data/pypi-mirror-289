# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.models.zip_lookup_city import ZipLookupCity


class Zip(object):

    """Implementation of the 'zip' model.

    TODO: type model description here.

    Attributes:
        zip_code (str): A 5-digit ZIP code.
        id (str): Unique identifier prefixed with `us_zip_`.
        cities (List[ZipLookupCity]): An array of city objects containing
            valid cities for the `zip_code`. Multiple cities will be returned
            if more than one city is associated with the input ZIP code.
        zip_code_type (ZipCodeTypeEnum): TODO: type description here.
        object (str): Value is resource type.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "zip_code": 'zip_code',
        "id": 'id',
        "cities": 'cities',
        "zip_code_type": 'zip_code_type',
        "object": 'object'
    }

    def __init__(self,
                 zip_code=None,
                 id=None,
                 cities=None,
                 zip_code_type=None):
        """Constructor for the Zip class"""

        # Initialize members of the class
        self.zip_code = zip_code 
        self.id = id 
        self.cities = cities 
        self.zip_code_type = zip_code_type 
        self.object = 'us_zip_lookup' 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        zip_code = dictionary.get("zip_code") if dictionary.get("zip_code") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        cities = None
        if dictionary.get('cities') is not None:
            cities = [ZipLookupCity.from_dictionary(x) for x in dictionary.get('cities')]
        zip_code_type = dictionary.get("zip_code_type") if dictionary.get("zip_code_type") else None
        # Return an object of this model
        return cls(zip_code,
                   id,
                   cities,
                   zip_code_type)
