# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class QrCode(object):

    """Implementation of the 'qr_code' model.

    Customize and place a QR code on the creative at the required position.

    Attributes:
        position (str): Sets how a QR code is being positioned in the
            document. Together with this, you should provide one of 'top' or
            'bottom', and one of 'left' or 'right'.
        top (str): Vertical distance (in inches) to place QR code from the
            top. Only allowed if "bottom" isn't provided.
        right (str): Horizonal distance (in inches) to place QR code from the
            right. Only allowed if "left" isn't provided.
        left (str): Horizonal distance (in inches) to place QR code from the
            left. Only allowed if "right" isn't provided.
        bottom (str): Vertical distance (in inches) to place QR code from the
            bottom. Only allowed if "top" isn't provided.
        redirect_url (str): The url to redirect the user when a QR code is
            scanned. The url must start with `https://`
        width (str): The size (in inches) of the QR code with a minimum of 1
            inch. All QR codes are generated as a square.
        pages (str): Specify the pages where the QR code should be stamped in
            a comma separated format. Your QR code can be printed in the same
            position on multiple pages. For postcards, the values should
            either be "front", "back" (for either front or back) or
            "front,back" (for the QR code to be printed on both sides). For
            self-mailers, the values should either be "inside", "outside" (for
            either inside or outside) or "inside,outside" (for the QR code to
            be printed on both sides). For letters, the values can be specific
            page numbers ("1", "3"), page number ranges such as "1-3", or a
            comma separated combination of both ("1,3,5-7").

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "position": 'position',
        "redirect_url": 'redirect_url',
        "width": 'width',
        "top": 'top',
        "right": 'right',
        "left": 'left',
        "bottom": 'bottom',
        "pages": 'pages'
    }

    _optionals = [
        'top',
        'right',
        'left',
        'bottom',
        'pages',
    ]

    def __init__(self,
                 redirect_url=None,
                 width=None,
                 top=APIHelper.SKIP,
                 right=APIHelper.SKIP,
                 left=APIHelper.SKIP,
                 bottom=APIHelper.SKIP,
                 pages=APIHelper.SKIP):
        """Constructor for the QrCode class"""

        # Initialize members of the class
        self.position = 'relative' 
        if top is not APIHelper.SKIP:
            self.top = top 
        if right is not APIHelper.SKIP:
            self.right = right 
        if left is not APIHelper.SKIP:
            self.left = left 
        if bottom is not APIHelper.SKIP:
            self.bottom = bottom 
        self.redirect_url = redirect_url 
        self.width = width 
        if pages is not APIHelper.SKIP:
            self.pages = pages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        redirect_url = dictionary.get("redirect_url") if dictionary.get("redirect_url") else None
        width = dictionary.get("width") if dictionary.get("width") else None
        top = dictionary.get("top") if dictionary.get("top") else APIHelper.SKIP
        right = dictionary.get("right") if dictionary.get("right") else APIHelper.SKIP
        left = dictionary.get("left") if dictionary.get("left") else APIHelper.SKIP
        bottom = dictionary.get("bottom") if dictionary.get("bottom") else APIHelper.SKIP
        pages = dictionary.get("pages") if dictionary.get("pages") else APIHelper.SKIP
        # Return an object of this model
        return cls(redirect_url,
                   width,
                   top,
                   right,
                   left,
                   bottom,
                   pages)
