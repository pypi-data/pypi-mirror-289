# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.campaign_item import CampaignItem
from lob.models.details import Details


class Creative(object):

    """Implementation of the 'creative' model.

    TODO: type model description here.

    Attributes:
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        date_modified (datetime): A timestamp in ISO 8601 format of the date
            the resource was last modified.
        deleted (bool): Only returned if the resource has been successfully
            deleted.
        object (str): Value is resource type.
        resource_type (str): Mailpiece type for the creative
        details (Details): TODO: type description here.
        mfrom (str | InlineAddressUs): Must either be an address ID or an
            inline object with correct address parameters. All addresses will
            be standardized into uppercase without being modified by
            verification.
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.
        id (str): Unique identifier prefixed with `crv_`.
        template_preview_urls (object): Preview URLs associated with a
            creative's artwork asset(s) if the creative uses HTML templates as
            assets. An empty object will be returned if no `template_preview`s
            have been generated.
        template_previews (List[object]): A list of template preview objects
            if the creative uses HTML template(s) as artwork asset(s). An
            empty array will be returned if no `template_preview`s have been
            generated for the creative.
        campaigns (List[CampaignItem]): Array of campaigns associated with the
            creative ID

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "deleted": 'deleted',
        "object": 'object',
        "resource_type": 'resource_type',
        "details": 'details',
        "mfrom": 'from',
        "description": 'description',
        "metadata": 'metadata',
        "id": 'id',
        "template_preview_urls": 'template_preview_urls',
        "template_previews": 'template_previews',
        "campaigns": 'campaigns'
    }

    _nullables = [
        'description',
    ]

    def __init__(self,
                 date_created=None,
                 date_modified=None,
                 deleted=None,
                 details=None,
                 mfrom=None,
                 description=None,
                 metadata=None,
                 id=None,
                 template_preview_urls=None,
                 template_previews=None,
                 campaigns=None):
        """Constructor for the Creative class"""

        # Initialize members of the class
        self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        self.date_modified = APIHelper.apply_datetime_converter(date_modified, APIHelper.RFC3339DateTime) if date_modified else None 
        self.deleted = deleted 
        self.object = 'creative' 
        self.resource_type = 'postcard' 
        self.details = details 
        self.mfrom = mfrom 
        self.description = description 
        self.metadata = metadata 
        self.id = id 
        self.template_preview_urls = template_preview_urls 
        self.template_previews = template_previews 
        self.campaigns = campaigns 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        date_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_modified")).datetime if dictionary.get("date_modified") else None
        deleted = dictionary.get("deleted") if "deleted" in dictionary.keys() else None
        details = Details.from_dictionary(dictionary.get('details')) if dictionary.get('details') else None
        mfrom = APIHelper.deserialize_union_type(UnionTypeLookUp.get('CreativeFrom'), dictionary.get('from'), False) if dictionary.get('from') is not None else None
        description = dictionary.get("description") if dictionary.get("description") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        template_preview_urls = dictionary.get("template_preview_urls") if dictionary.get("template_preview_urls") else None
        template_previews = dictionary.get("template_previews") if dictionary.get("template_previews") else None
        campaigns = None
        if dictionary.get('campaigns') is not None:
            campaigns = [CampaignItem.from_dictionary(x) for x in dictionary.get('campaigns')]
        # Return an object of this model
        return cls(date_created,
                   date_modified,
                   deleted,
                   details,
                   mfrom,
                   description,
                   metadata,
                   id,
                   template_preview_urls,
                   template_previews,
                   campaigns)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.date_created,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.date_modified,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.deleted,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.object,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.resource_type,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.details,
                                            type_callable=lambda value: Details.validate(value),
                                            is_model_dict=True) \
                and UnionTypeLookUp.get('CreativeFrom').validate(dictionary.mfrom).is_valid \
                and APIHelper.is_valid_type(value=dictionary.description,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.metadata,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.template_preview_urls,
                                            type_callable=lambda value: isinstance(value, object)) \
                and APIHelper.is_valid_type(value=dictionary.template_previews,
                                            type_callable=lambda value: isinstance(value, object)) \
                and APIHelper.is_valid_type(value=dictionary.campaigns,
                                            type_callable=lambda value: CampaignItem.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('date_created'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('date_modified'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('deleted'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('object'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('resource_type'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('details'),
                                        type_callable=lambda value: Details.validate(value),
                                        is_model_dict=True) \
            and UnionTypeLookUp.get('CreativeFrom').validate(dictionary.get('from')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('description'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('metadata'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('template_preview_urls'),
                                        type_callable=lambda value: isinstance(value, object)) \
            and APIHelper.is_valid_type(value=dictionary.get('template_previews'),
                                        type_callable=lambda value: isinstance(value, object)) \
            and APIHelper.is_valid_type(value=dictionary.get('campaigns'),
                                        type_callable=lambda value: CampaignItem.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)
