# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class Imageatcheckbottom(object):

    """Implementation of the 'imageatcheckbottom' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.
        merge_variables (object): You can input a merge variable payload
            object to your template to render dynamic content. For example, if
            you have a template like: `{{variable_name}}`, pass in
            `{"variable_name": "Harry"}` to render `Harry`. `merge_variables`
            must be an object. Any type of value is accepted as long as the
            object is valid JSON; you can use `strings`, `numbers`,
            `booleans`, `arrays`, `objects`, or `null`. The max length of the
            object is 25,000 characters. If you call `JSON.stringify` on your
            object, it can be no longer than 25,000 characters. Your variable
            names cannot contain any whitespace or any of the following
            special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`,
            `+`, `,`, `/`, `;`, `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` `
            ``, `{`, `|`, `}`, `~`. More instructions can be found in <a
            href="https://help.lob.com/print-and-mail/designing-mail-creatives/
            dynamic-personalization#using-html-and-merge-variables-10"
            target="_blank">our guide to using html and merge variables</a>.
            Depending on your <a
            href="https://dashboard.lob.com/#/settings/account"
            target="_blank">Merge Variable strictness</a> setting, if you
            define variables in your HTML but do not pass them here, you will
            either receive an error or the variable will render as an empty
            string.
        send_date (object): TODO: type description here.
        mail_type (MailType2Enum): TODO: type description here.
        memo (str): Text to include on the memo line of the check.
        check_number (int): An integer that designates the check number. If
            `check_number` is not provided, checks created from a new
            `bank_account` will start at `10000` and increment with each check
            created with the `bank_account`. A provided `check_number`
            overrides the defaults. Subsequent checks created with the same
            `bank_account` will increment from the provided check number.
        message (str): Max of 400 characters to be included at the bottom of
            the check page.
        use_type (object): TODO: type description here.
        to (str | Addressobjwithnamedefined | Addressobjwithcompanydefined):
            Must either be an address ID or an inline object with correct
            address parameters. Checks cannot be sent internationally
            (`address_country` must be `US`). The total string of the sum of
            `address_line1` and `address_line2` must be no longer than 50
            characters combined. If an object is used, an address will be
            created, corrected, and standardized for free whenever possible
            using our US Address Verification engine, and returned back with
            an ID. Depending on your <a
            href="https://dashboard.lob.com/#/settings/editions"
            target="_blank">Print & Mail Edition</a>, addresses may also be
            run through [National Change of Address
            (NCOALink)](#tag/National-Change-of-Address). If an address used
            does not meet your accountâ€™s <a
            href="https://dashboard.lob.com/#/settings/account"
            target="_blank">US Mail Strictness Setting</a>, the request will
            fail. <a
            href="https://help.lob.com/print-and-mail/all-about-addresses"
            target="_blank">More about verification of mailing addresses</a>
        mfrom (str | InlineAddressUs): Must either be an address ID or an
            inline object with correct address parameters. Must either be an
            address ID or an inline object with correct address parameters.
            All addresses will be standardized into uppercase without being
            modified by verification.
        bank_account (str): TODO: type description here.
        amount (float): The payment amount to be sent in US dollars. Amounts
            will be rounded to two decimal places.
        logo (str | None): Accepts a remote URL or local file upload to an
            image to print (in grayscale) in the upper-left corner of your
            check. Image requirements:    * RGB or CMYK    * square    *
            minimum size: 100px x 100px    * transparent backgrond    * `png`
            or `jpg`
        check_bottom (object): TODO: type description here.
        attachment (str | None): A document to include with the check.  Notes:
            - HTML merge variables should not include delimiting whitespace. -
            All pages of PDF, PNG, and JPGs must be sized at 8.5"x11" at 300
            DPI, while supplied HTML will be rendered and trimmed to as many
            8.5"x11" pages as necessary. - If a PDF is provided, it must be 6
            pages or fewer. - The attachment will be printed double-sided in
            black & white and will be included in the envelope after the check
            page. - Please follow these <a
            href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/temp
            lates/check_attachment_template.pdf" target="_blank">design
            guidelines</a>.  See <a
            href="https://lob.com/pricing/print-mail#compare"
            target="_blank">pricing</a> for extra costs incurred. Need more
            help? Consult our [HTML examples](#section/HTML-Examples).
        billing_group_id (str): An optional string with the billing group ID
            to tag your usage with. Is used for billing purposes. Requires
            special activation to use. See <a
            href="#tag/Billing-Groups">Billing Group API</a> for more
            information.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "use_type": 'use_type',
        "to": 'to',
        "mfrom": 'from',
        "bank_account": 'bank_account',
        "amount": 'amount',
        "check_bottom": 'check_bottom',
        "description": 'description',
        "metadata": 'metadata',
        "merge_variables": 'merge_variables',
        "send_date": 'send_date',
        "mail_type": 'mail_type',
        "memo": 'memo',
        "check_number": 'check_number',
        "message": 'message',
        "logo": 'logo',
        "attachment": 'attachment',
        "billing_group_id": 'billing_group_id'
    }

    _optionals = [
        'description',
        'metadata',
        'merge_variables',
        'send_date',
        'mail_type',
        'memo',
        'check_number',
        'message',
        'logo',
        'attachment',
        'billing_group_id',
    ]

    _nullables = [
        'description',
        'merge_variables',
        'memo',
    ]

    def __init__(self,
                 use_type=None,
                 to=None,
                 mfrom=None,
                 bank_account=None,
                 amount=None,
                 check_bottom=None,
                 description=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 merge_variables=APIHelper.SKIP,
                 send_date=APIHelper.SKIP,
                 mail_type=APIHelper.SKIP,
                 memo=APIHelper.SKIP,
                 check_number=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 logo=APIHelper.SKIP,
                 attachment=APIHelper.SKIP,
                 billing_group_id=APIHelper.SKIP):
        """Constructor for the Imageatcheckbottom class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if merge_variables is not APIHelper.SKIP:
            self.merge_variables = merge_variables 
        if send_date is not APIHelper.SKIP:
            self.send_date = send_date 
        if mail_type is not APIHelper.SKIP:
            self.mail_type = mail_type 
        if memo is not APIHelper.SKIP:
            self.memo = memo 
        if check_number is not APIHelper.SKIP:
            self.check_number = check_number 
        if message is not APIHelper.SKIP:
            self.message = message 
        self.use_type = use_type 
        self.to = to 
        self.mfrom = mfrom 
        self.bank_account = bank_account 
        self.amount = amount 
        if logo is not APIHelper.SKIP:
            self.logo = logo 
        self.check_bottom = check_bottom 
        if attachment is not APIHelper.SKIP:
            self.attachment = attachment 
        if billing_group_id is not APIHelper.SKIP:
            self.billing_group_id = billing_group_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        use_type = dictionary.get("use_type") if dictionary.get("use_type") else None
        to = APIHelper.deserialize_union_type(UnionTypeLookUp.get('ImageatcheckbottomTo'), dictionary.get('to'), False) if dictionary.get('to') is not None else None
        mfrom = APIHelper.deserialize_union_type(UnionTypeLookUp.get('ImageatcheckbottomFrom'), dictionary.get('from'), False) if dictionary.get('from') is not None else None
        bank_account = dictionary.get("bank_account") if dictionary.get("bank_account") else None
        amount = dictionary.get("amount") if dictionary.get("amount") else None
        check_bottom = dictionary.get("check_bottom") if dictionary.get("check_bottom") else None
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        merge_variables = dictionary.get("merge_variables") if "merge_variables" in dictionary.keys() else APIHelper.SKIP
        send_date = dictionary.get("send_date") if dictionary.get("send_date") else APIHelper.SKIP
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else APIHelper.SKIP
        memo = dictionary.get("memo") if "memo" in dictionary.keys() else APIHelper.SKIP
        check_number = dictionary.get("check_number") if dictionary.get("check_number") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        logo = APIHelper.deserialize_union_type(UnionTypeLookUp.get('ImageatcheckbottomLogo'), dictionary.get('logo'), False) if dictionary.get('logo') is not None else APIHelper.SKIP
        attachment = APIHelper.deserialize_union_type(UnionTypeLookUp.get('ImageatcheckbottomAttachment'), dictionary.get('attachment'), False) if dictionary.get('attachment') is not None else APIHelper.SKIP
        billing_group_id = dictionary.get("billing_group_id") if dictionary.get("billing_group_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(use_type,
                   to,
                   mfrom,
                   bank_account,
                   amount,
                   check_bottom,
                   description,
                   metadata,
                   merge_variables,
                   send_date,
                   mail_type,
                   memo,
                   check_number,
                   message,
                   logo,
                   attachment,
                   billing_group_id)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.use_type,
                                           type_callable=lambda value: isinstance(value, object)) \
                and UnionTypeLookUp.get('ImageatcheckbottomTo').validate(dictionary.to).is_valid \
                and UnionTypeLookUp.get('ImageatcheckbottomFrom').validate(dictionary.mfrom).is_valid \
                and APIHelper.is_valid_type(value=dictionary.bank_account,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.amount,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.check_bottom,
                                            type_callable=lambda value: isinstance(value, object))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('use_type'),
                                       type_callable=lambda value: isinstance(value, object)) \
            and UnionTypeLookUp.get('ImageatcheckbottomTo').validate(dictionary.get('to')).is_valid \
            and UnionTypeLookUp.get('ImageatcheckbottomFrom').validate(dictionary.get('from')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('bank_account'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('amount'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('check_bottom'),
                                        type_callable=lambda value: isinstance(value, object))
