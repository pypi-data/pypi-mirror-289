# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class IntlSuggestions(object):

    """Implementation of the 'intl_suggestions' model.

    TODO: type model description here.

    Attributes:
        primary_number_range (str): The primary number range of the address
            that identifies a building at street level.
        primary_line (str): The primary delivery line (usually the street
            address) of the address. Combination of the following applicable
            `components` (primary number & secondary information may be
            missing or inaccurate): * `primary_number` * `street_predirection`
            * `street_name` * `street_suffix` * `street_postdirection` *
            `secondary_designator` * `secondary_number` * `pmb_designator` *
            `pmb_number`
        city (str): TODO: type description here.
        country (CountryExtendedEnum): TODO: type description here.
        state (str): The <a href="https://en.wikipedia.org/wiki/ISO_3166-2"
            target="_blank">ISO 3166-2</a> two letter code for the state.
        zip_code (str): The postal code.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_number_range": 'primary_number_range',
        "primary_line": 'primary_line',
        "city": 'city',
        "country": 'country',
        "state": 'state',
        "zip_code": 'zip_code'
    }

    def __init__(self,
                 primary_number_range=None,
                 primary_line=None,
                 city=None,
                 country=None,
                 state=None,
                 zip_code=None):
        """Constructor for the IntlSuggestions class"""

        # Initialize members of the class
        self.primary_number_range = primary_number_range 
        self.primary_line = primary_line 
        self.city = city 
        self.country = country 
        self.state = state 
        self.zip_code = zip_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_number_range = dictionary.get("primary_number_range") if dictionary.get("primary_number_range") else None
        primary_line = dictionary.get("primary_line") if dictionary.get("primary_line") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        zip_code = dictionary.get("zip_code") if dictionary.get("zip_code") else None
        # Return an object of this model
        return cls(primary_number_range,
                   primary_line,
                   city,
                   country,
                   state,
                   zip_code)
