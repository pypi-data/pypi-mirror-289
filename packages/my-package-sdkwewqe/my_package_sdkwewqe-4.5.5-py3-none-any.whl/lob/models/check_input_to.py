# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class CheckInputTo(object):

    """Implementation of the 'check_input_to' model.

    TODO: type model description here.

    Attributes:
        to (str | Addressobjwithnamedefined | Addressobjwithcompanydefined |
            None): Must either be an address ID or an inline object with
            correct address parameters. Checks cannot be sent internationally
            (`address_country` must be `US`). The total string of the sum of
            `address_line1` and `address_line2` must be no longer than 50
            characters combined. If an object is used, an address will be
            created, corrected, and standardized for free whenever possible
            using our US Address Verification engine, and returned back with
            an ID. Depending on your <a
            href="https://dashboard.lob.com/#/settings/editions"
            target="_blank">Print & Mail Edition</a>, addresses may also be
            run through [National Change of Address
            (NCOALink)](#tag/National-Change-of-Address). If an address used
            does not meet your accountâ€™s <a
            href="https://dashboard.lob.com/#/settings/account"
            target="_blank">US Mail Strictness Setting</a>, the request will
            fail. <a
            href="https://help.lob.com/print-and-mail/all-about-addresses"
            target="_blank">More about verification of mailing addresses</a>

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "to": 'to'
    }

    _optionals = [
        'to',
    ]

    def __init__(self,
                 to=APIHelper.SKIP):
        """Constructor for the CheckInputTo class"""

        # Initialize members of the class
        if to is not APIHelper.SKIP:
            self.to = to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        to = APIHelper.deserialize_union_type(UnionTypeLookUp.get('CheckInputToTo'), dictionary.get('to'), False) if dictionary.get('to') is not None else APIHelper.SKIP
        # Return an object of this model
        return cls(to)
