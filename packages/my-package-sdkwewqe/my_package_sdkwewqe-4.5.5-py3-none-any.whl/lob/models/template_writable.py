# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class TemplateWritable(object):

    """Implementation of the 'template_writable' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        html (str): An HTML string of less than 100,000 characters to be used
            as the `published_version` of this template. See
            [here](#section/HTML-Examples) for guidance on designing HTML
            templates. Please see endpoint specific documentation for any
            other product-specific HTML details: -
            [Postcards](#operation/postcard_create) - `front` and `back` -
            [Self Mailers](#operation/self_mailer_create) - `inside` and
            `outside` - [Letters](#operation/letter_create) - `file` -
            [Checks](#operation/check_create) - `check_bottom` and
            `attachment` - [Cards](#operation/card_create) - `front` and
            `back`  If there is a syntax error with your variable names within
            your HTML, then an error will be thrown, e.g. using a `{{#users}}`
            opening tag without the corresponding closing tag `{{/users}}`.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.
        engine (object): TODO: type description here.
        required_vars (List[str]): An array of required variables to be used
            in a template. Only available for `handlebars` templates.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "html": 'html',
        "description": 'description',
        "metadata": 'metadata',
        "engine": 'engine',
        "required_vars": 'required_vars'
    }

    _optionals = [
        'description',
        'metadata',
        'engine',
        'required_vars',
    ]

    _nullables = [
        'description',
    ]

    def __init__(self,
                 html=None,
                 description=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 engine=APIHelper.SKIP,
                 required_vars=APIHelper.SKIP):
        """Constructor for the TemplateWritable class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        self.html = html 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if engine is not APIHelper.SKIP:
            self.engine = engine 
        if required_vars is not APIHelper.SKIP:
            self.required_vars = required_vars 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        html = dictionary.get("html") if dictionary.get("html") else None
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        engine = dictionary.get("engine") if dictionary.get("engine") else APIHelper.SKIP
        required_vars = dictionary.get("required_vars") if dictionary.get("required_vars") else APIHelper.SKIP
        # Return an object of this model
        return cls(html,
                   description,
                   metadata,
                   engine,
                   required_vars)
