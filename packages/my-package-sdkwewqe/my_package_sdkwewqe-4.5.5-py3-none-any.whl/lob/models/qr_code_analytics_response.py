# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.qr_code_scans import QrCodeScans


class QrCodeAnalyticsResponse(object):

    """Implementation of the 'QrCodeAnalyticsResponse' model.

    TODO: type model description here.

    Attributes:
        object (str): Value is resource type.
        count (int): number of resources in a set
        total_count (int): Indicates the total number of records. Provided
            when the request specifies an "include" query parameter
        scanned_count (int): Indicates the number of QR Codes out of `count`
            that were scanned atleast once.
        data (List[QrCodeScans]): List of QR code analytics

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "count": 'count',
        "total_count": 'total_count',
        "scanned_count": 'scanned_count',
        "data": 'data'
    }

    _optionals = [
        'object',
        'count',
        'total_count',
        'scanned_count',
        'data',
    ]

    def __init__(self,
                 object=APIHelper.SKIP,
                 count=APIHelper.SKIP,
                 total_count=APIHelper.SKIP,
                 scanned_count=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the QrCodeAnalyticsResponse class"""

        # Initialize members of the class
        if object is not APIHelper.SKIP:
            self.object = object 
        if count is not APIHelper.SKIP:
            self.count = count 
        if total_count is not APIHelper.SKIP:
            self.total_count = total_count 
        if scanned_count is not APIHelper.SKIP:
            self.scanned_count = scanned_count 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else APIHelper.SKIP
        count = dictionary.get("count") if dictionary.get("count") else APIHelper.SKIP
        total_count = dictionary.get("total_count") if dictionary.get("total_count") else APIHelper.SKIP
        scanned_count = dictionary.get("scanned_count") if dictionary.get("scanned_count") else APIHelper.SKIP
        data = None
        if dictionary.get('data') is not None:
            data = [QrCodeScans.from_dictionary(x) for x in dictionary.get('data')]
        else:
            data = APIHelper.SKIP
        # Return an object of this model
        return cls(object,
                   count,
                   total_count,
                   scanned_count,
                   data)
