# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.buckslip_order import BuckslipOrder
from lob.models.thefinishofthebuckslip_enum import ThefinishofthebuckslipEnum
from lob.models.thestatusofthebuckslip_enum import ThestatusofthebuckslipEnum
from lob.models.thestockofthebuckslip_enum import ThestockofthebuckslipEnum
from lob.models.thumbnail import Thumbnail


class Buckslip(object):

    """Implementation of the 'buckslip' model.

    TODO: type model description here.

    Attributes:
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        date_modified (datetime): A timestamp in ISO 8601 format of the date
            the resource was last modified.
        deleted (bool): Only returned if the resource has been successfully
            deleted.
        object (str): Value is resource type.
        description (str): Description of the buckslip.
        size (SizeEnum): TODO: type description here.
        id (str): Unique identifier prefixed with `bck_`.
        auto_reorder (bool): True if the buckslips should be auto-reordered.
        reorder_quantity (int): The number of buckslips to be reordered.
        threshold_amount (int): The threshold amount of the buckslip
        url (str): The signed link for the buckslip.
        raw_url (str): The raw URL of the buckslip.
        front_original_url (str): The original URL of the front template.
        back_original_url (str): The original URL of the back template.
        thumbnails (List[Thumbnail]): TODO: type description here.
        available_quantity (float): The available quantity of buckslips.
        allocated_quantity (float): The allocated quantity of buckslips.
        onhand_quantity (float): The onhand quantity of buckslips.
        pending_quantity (float): The pending quantity of buckslips.
        projected_quantity (float): The sum of pending and onhand quantities
            of buckslips.
        buckslip_orders (List[BuckslipOrder]): An array of buckslip orders
            that are associated with the buckslip.
        stock (ThestockofthebuckslipEnum): TODO: type description here.
        weight (str): TODO: type description here.
        finish (ThefinishofthebuckslipEnum): TODO: type description here.
        status (ThestatusofthebuckslipEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "object": 'object',
        "description": 'description',
        "id": 'id',
        "auto_reorder": 'auto_reorder',
        "reorder_quantity": 'reorder_quantity',
        "threshold_amount": 'threshold_amount',
        "url": 'url',
        "raw_url": 'raw_url',
        "front_original_url": 'front_original_url',
        "back_original_url": 'back_original_url',
        "thumbnails": 'thumbnails',
        "available_quantity": 'available_quantity',
        "allocated_quantity": 'allocated_quantity',
        "onhand_quantity": 'onhand_quantity',
        "pending_quantity": 'pending_quantity',
        "projected_quantity": 'projected_quantity',
        "buckslip_orders": 'buckslip_orders',
        "stock": 'stock',
        "weight": 'weight',
        "finish": 'finish',
        "status": 'status',
        "deleted": 'deleted',
        "size": 'size'
    }

    _optionals = [
        'deleted',
        'size',
    ]

    _nullables = [
        'description',
        'reorder_quantity',
    ]

    def __init__(self,
                 date_created=None,
                 date_modified=None,
                 description=None,
                 id=None,
                 auto_reorder=None,
                 reorder_quantity=None,
                 threshold_amount=None,
                 url=None,
                 raw_url=None,
                 front_original_url=None,
                 back_original_url=None,
                 thumbnails=None,
                 available_quantity=None,
                 allocated_quantity=None,
                 onhand_quantity=None,
                 pending_quantity=None,
                 projected_quantity=None,
                 buckslip_orders=None,
                 stock=None,
                 finish=None,
                 status=None,
                 deleted=APIHelper.SKIP,
                 size=APIHelper.SKIP):
        """Constructor for the Buckslip class"""

        # Initialize members of the class
        self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        self.date_modified = APIHelper.apply_datetime_converter(date_modified, APIHelper.RFC3339DateTime) if date_modified else None 
        if deleted is not APIHelper.SKIP:
            self.deleted = deleted 
        self.object = 'buckslip' 
        self.description = description 
        if size is not APIHelper.SKIP:
            self.size = size 
        self.id = id 
        self.auto_reorder = auto_reorder 
        self.reorder_quantity = reorder_quantity 
        self.threshold_amount = threshold_amount 
        self.url = url 
        self.raw_url = raw_url 
        self.front_original_url = front_original_url 
        self.back_original_url = back_original_url 
        self.thumbnails = thumbnails 
        self.available_quantity = available_quantity 
        self.allocated_quantity = allocated_quantity 
        self.onhand_quantity = onhand_quantity 
        self.pending_quantity = pending_quantity 
        self.projected_quantity = projected_quantity 
        self.buckslip_orders = buckslip_orders 
        self.stock = stock 
        self.weight = '80#' 
        self.finish = finish 
        self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        date_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_modified")).datetime if dictionary.get("date_modified") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        auto_reorder = dictionary.get("auto_reorder") if "auto_reorder" in dictionary.keys() else None
        reorder_quantity = dictionary.get("reorder_quantity") if dictionary.get("reorder_quantity") else None
        threshold_amount = dictionary.get("threshold_amount") if dictionary.get("threshold_amount") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        raw_url = dictionary.get("raw_url") if dictionary.get("raw_url") else None
        front_original_url = dictionary.get("front_original_url") if dictionary.get("front_original_url") else None
        back_original_url = dictionary.get("back_original_url") if dictionary.get("back_original_url") else None
        thumbnails = None
        if dictionary.get('thumbnails') is not None:
            thumbnails = [Thumbnail.from_dictionary(x) for x in dictionary.get('thumbnails')]
        available_quantity = dictionary.get("available_quantity") if dictionary.get("available_quantity") else None
        allocated_quantity = dictionary.get("allocated_quantity") if dictionary.get("allocated_quantity") else None
        onhand_quantity = dictionary.get("onhand_quantity") if dictionary.get("onhand_quantity") else None
        pending_quantity = dictionary.get("pending_quantity") if dictionary.get("pending_quantity") else None
        projected_quantity = dictionary.get("projected_quantity") if dictionary.get("projected_quantity") else None
        buckslip_orders = None
        if dictionary.get('buckslip_orders') is not None:
            buckslip_orders = [BuckslipOrder.from_dictionary(x) for x in dictionary.get('buckslip_orders')]
        stock = dictionary.get("stock") if dictionary.get("stock") else None
        finish = dictionary.get("finish") if dictionary.get("finish") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        deleted = dictionary.get("deleted") if "deleted" in dictionary.keys() else APIHelper.SKIP
        size = dictionary.get("size") if dictionary.get("size") else APIHelper.SKIP
        # Return an object of this model
        return cls(date_created,
                   date_modified,
                   description,
                   id,
                   auto_reorder,
                   reorder_quantity,
                   threshold_amount,
                   url,
                   raw_url,
                   front_original_url,
                   back_original_url,
                   thumbnails,
                   available_quantity,
                   allocated_quantity,
                   onhand_quantity,
                   pending_quantity,
                   projected_quantity,
                   buckslip_orders,
                   stock,
                   finish,
                   status,
                   deleted,
                   size)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.date_created,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.date_modified,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.object,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.description,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.auto_reorder,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.reorder_quantity,
                                            type_callable=lambda value: isinstance(value, int),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.threshold_amount,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.url,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.raw_url,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.front_original_url,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.back_original_url,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.thumbnails,
                                            type_callable=lambda value: Thumbnail.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.available_quantity,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.allocated_quantity,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.onhand_quantity,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.pending_quantity,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.projected_quantity,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.buckslip_orders,
                                            type_callable=lambda value: BuckslipOrder.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.stock,
                                            type_callable=lambda value: ThestockofthebuckslipEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.weight,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.finish,
                                            type_callable=lambda value: ThefinishofthebuckslipEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.status,
                                            type_callable=lambda value: ThestatusofthebuckslipEnum.validate(value))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('date_created'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('date_modified'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('object'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('description'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('auto_reorder'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('reorder_quantity'),
                                        type_callable=lambda value: isinstance(value, int),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('threshold_amount'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('url'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('raw_url'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('front_original_url'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('back_original_url'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('thumbnails'),
                                        type_callable=lambda value: Thumbnail.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('available_quantity'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('allocated_quantity'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('onhand_quantity'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('pending_quantity'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('projected_quantity'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('buckslip_orders'),
                                        type_callable=lambda value: BuckslipOrder.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('stock'),
                                        type_callable=lambda value: ThestockofthebuckslipEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('weight'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('finish'),
                                        type_callable=lambda value: ThefinishofthebuckslipEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('status'),
                                        type_callable=lambda value: ThestatusofthebuckslipEnum.validate(value))
