# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class InputTo(object):

    """Implementation of the 'input_to' model.

    TODO: type model description here.

    Attributes:
        to (str | InlineAddressUs | InlineAddressIntl | None): Must either be
            an address ID or an inline object with correct address parameters.
            If an object is used, an address will be created, corrected, and
            standardized for free whenever possible using our US Address
            Verification engine (if it is a US address), and returned back
            with an ID. Depending on your <a
            href="https://dashboard.lob.com/#/settings/editions"
            target="_blank">Print & Mail Edition</a>, US addresses may also be
            run through <a href="#tag/National-Change-of-Address">National
            Change of Address Linkage(NCOALink)</a>. Non-US addresses will be
            standardized into uppercase only. If a US address used does not
            meet your accountâ€™s <a
            href="https://dashboard.lob.com/#/settings/account"
            target="_blank">US Mail strictness setting</a>, the request will
            fail. <a
            href="https://help.lob.com/print-and-mail/all-about-addresses"
            target="_blank">Lob Guide: Verification of Mailing Addresses</a>

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "to": 'to'
    }

    _optionals = [
        'to',
    ]

    def __init__(self,
                 to=APIHelper.SKIP):
        """Constructor for the InputTo class"""

        # Initialize members of the class
        if to is not APIHelper.SKIP:
            self.to = to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        to = APIHelper.deserialize_union_type(UnionTypeLookUp.get('InputToTo'), dictionary.get('to'), False) if dictionary.get('to') is not None else APIHelper.SKIP
        # Return an object of this model
        return cls(to)
