# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.utilities.file_wrapper import FileWrapper
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.upload import Upload
from lob.models.upload_file import UploadFile
from lob.models.upload_create_export import UploadCreateExport
from lob.models.uploads_report_response import UploadsReportResponse
from lob.models.uploads_exports_response import UploadsExportsResponse
from lob.exceptions.http_validation_error_1_exception import HTTPValidationError1Exception
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception
from lob.exceptions.upload_export_error_1_exception import UploadExportError1Exception
from lob.exceptions.uploads_report_403_error_exception import UploadsReport403ErrorException


class UploadsController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(UploadsController, self).__init__(config)

    def uploads_list(self,
                     campaign_id=None):
        """Does a GET request to /uploads.

        Returns a list of your uploads. Optionally, filter uploads by
        campaign.

        Args:
            campaign_id (str, optional): id of the campaign

        Returns:
            List[Upload]: Response from the API. An array of matching uploads.
                Each entry in the array is a separate upload.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('campaignId')
                         .value(campaign_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Upload.from_dictionary)
        ).execute()

    def upload_create(self,
                      body):
        """Does a POST request to /uploads.

        Creates a new upload with the provided properties.

        Args:
            body (UploadWritable): TODO: type description here.

        Returns:
            Upload: Response from the API. Upload created successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Upload.from_dictionary)
            .local_error('422', 'Validation Error', HTTPValidationError1Exception)
        ).execute()

    def upload_retrieve(self,
                        upl_id):
        """Does a GET request to /uploads/{upl_id}.

        Retrieves the details of an existing upload. You need only supply the
        unique upload identifier that was returned upon upload creation.

        Args:
            upl_id (str): id of the upload

        Returns:
            Upload: Response from the API. Returns an upload object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Upload.from_dictionary)
            .local_error('404', 'Not Found Error', Domains0Error1Exception)
            .local_error('422', 'Validation Error', HTTPValidationError1Exception)
        ).execute()

    def upload_update(self,
                      upl_id,
                      body):
        """Does a PATCH request to /uploads/{upl_id}.

        Update the details of an existing upload. You need only supply the
        unique identifier that was returned upon upload creation.

        Args:
            upl_id (str): id of the upload
            body (UploadUpdatable): TODO: type description here.

        Returns:
            Upload: Response from the API. Returns an upload object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Upload.from_dictionary)
            .local_error('404', 'Not Found Error', Domains0Error1Exception)
            .local_error('422', 'Validation Error', HTTPValidationError1Exception)
        ).execute()

    def upload_delete(self,
                      upl_id):
        """Does a DELETE request to /uploads/{upl_id}.

        Delete an existing upload. You need only supply the unique identifier
        that was returned upon upload creation.

        Args:
            upl_id (str): id of the upload

        Returns:
            void: Response from the API. Successful Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .auth(Single('basicAuth'))
        ).execute()

    def upload_file(self,
                    upl_id,
                    file=None):
        """Does a POST request to /uploads/{upl_id}/file.

        Upload an [audience
        file](https://help.lob.com/print-and-mail/building-a-mail-strategy/camp
        aign-or-triggered-sends/campaign-audience-guide) and associate it with
        an upload.

        Args:
            upl_id (str): ID of the upload
            file (typing.BinaryIO, optional): TODO: type description here.

        Returns:
            UploadFile: Response from the API. Successful Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}/file')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadFile.from_dictionary)
            .local_error('422', 'Validation Error', HTTPValidationError1Exception)
        ).execute()

    def upload_export_create(self,
                             upl_id,
                             body):
        """Does a POST request to /uploads/{upl_id}/exports.

        Campaign Exports can help you understand exactly which records in a
        campaign could not be created. By initiating and retrieving an export,
        you will get row-by-row errors for your campaign. For a step-by-step
        walkthrough of creating a campaign and exporting failures, see our
        [Campaigns
        Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/cam
        paign-or-triggered-sends/launch-your-first-campaign).
        Create an export file associated with an upload.

        Args:
            upl_id (str): ID of the upload
            body (UploadsExportsRequest): TODO: type description here.

        Returns:
            UploadCreateExport: Response from the API. Successful Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}/exports')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadCreateExport.from_dictionary)
            .local_error('400', 'Create Export Error', UploadExportError1Exception)
            .local_error('401', 'Create Export Error', UploadExportError1Exception)
            .local_error('402', 'Create Export Error', UploadExportError1Exception)
            .local_error('403', 'Create Export Error', UploadExportError1Exception)
            .local_error('404', 'Create Export Error', UploadExportError1Exception)
            .local_error('405', 'Create Export Error', UploadExportError1Exception)
            .local_error('406', 'Create Export Error', UploadExportError1Exception)
            .local_error('407', 'Create Export Error', UploadExportError1Exception)
            .local_error('408', 'Create Export Error', UploadExportError1Exception)
            .local_error('409', 'Create Export Error', UploadExportError1Exception)
            .local_error('410', 'Create Export Error', UploadExportError1Exception)
            .local_error('411', 'Create Export Error', UploadExportError1Exception)
            .local_error('412', 'Create Export Error', UploadExportError1Exception)
            .local_error('413', 'Create Export Error', UploadExportError1Exception)
            .local_error('414', 'Create Export Error', UploadExportError1Exception)
            .local_error('415', 'Create Export Error', UploadExportError1Exception)
            .local_error('416', 'Create Export Error', UploadExportError1Exception)
            .local_error('417', 'Create Export Error', UploadExportError1Exception)
            .local_error('418', 'Create Export Error', UploadExportError1Exception)
            .local_error('419', 'Create Export Error', UploadExportError1Exception)
            .local_error('420', 'Create Export Error', UploadExportError1Exception)
            .local_error('421', 'Create Export Error', UploadExportError1Exception)
            .local_error('422', 'Create Export Error', UploadExportError1Exception)
            .local_error('423', 'Create Export Error', UploadExportError1Exception)
            .local_error('424', 'Create Export Error', UploadExportError1Exception)
            .local_error('425', 'Create Export Error', UploadExportError1Exception)
            .local_error('426', 'Create Export Error', UploadExportError1Exception)
            .local_error('427', 'Create Export Error', UploadExportError1Exception)
            .local_error('428', 'Create Export Error', UploadExportError1Exception)
            .local_error('429', 'Create Export Error', UploadExportError1Exception)
            .local_error('430', 'Create Export Error', UploadExportError1Exception)
            .local_error('431', 'Create Export Error', UploadExportError1Exception)
            .local_error('432', 'Create Export Error', UploadExportError1Exception)
            .local_error('433', 'Create Export Error', UploadExportError1Exception)
            .local_error('434', 'Create Export Error', UploadExportError1Exception)
            .local_error('435', 'Create Export Error', UploadExportError1Exception)
            .local_error('436', 'Create Export Error', UploadExportError1Exception)
            .local_error('437', 'Create Export Error', UploadExportError1Exception)
            .local_error('438', 'Create Export Error', UploadExportError1Exception)
            .local_error('439', 'Create Export Error', UploadExportError1Exception)
            .local_error('440', 'Create Export Error', UploadExportError1Exception)
            .local_error('441', 'Create Export Error', UploadExportError1Exception)
            .local_error('442', 'Create Export Error', UploadExportError1Exception)
            .local_error('443', 'Create Export Error', UploadExportError1Exception)
            .local_error('444', 'Create Export Error', UploadExportError1Exception)
            .local_error('445', 'Create Export Error', UploadExportError1Exception)
            .local_error('446', 'Create Export Error', UploadExportError1Exception)
            .local_error('447', 'Create Export Error', UploadExportError1Exception)
            .local_error('448', 'Create Export Error', UploadExportError1Exception)
            .local_error('449', 'Create Export Error', UploadExportError1Exception)
            .local_error('450', 'Create Export Error', UploadExportError1Exception)
            .local_error('451', 'Create Export Error', UploadExportError1Exception)
            .local_error('452', 'Create Export Error', UploadExportError1Exception)
            .local_error('453', 'Create Export Error', UploadExportError1Exception)
            .local_error('454', 'Create Export Error', UploadExportError1Exception)
            .local_error('455', 'Create Export Error', UploadExportError1Exception)
            .local_error('456', 'Create Export Error', UploadExportError1Exception)
            .local_error('457', 'Create Export Error', UploadExportError1Exception)
            .local_error('458', 'Create Export Error', UploadExportError1Exception)
            .local_error('459', 'Create Export Error', UploadExportError1Exception)
            .local_error('460', 'Create Export Error', UploadExportError1Exception)
            .local_error('461', 'Create Export Error', UploadExportError1Exception)
            .local_error('462', 'Create Export Error', UploadExportError1Exception)
            .local_error('463', 'Create Export Error', UploadExportError1Exception)
            .local_error('464', 'Create Export Error', UploadExportError1Exception)
            .local_error('465', 'Create Export Error', UploadExportError1Exception)
            .local_error('466', 'Create Export Error', UploadExportError1Exception)
            .local_error('467', 'Create Export Error', UploadExportError1Exception)
            .local_error('468', 'Create Export Error', UploadExportError1Exception)
            .local_error('469', 'Create Export Error', UploadExportError1Exception)
            .local_error('470', 'Create Export Error', UploadExportError1Exception)
            .local_error('471', 'Create Export Error', UploadExportError1Exception)
            .local_error('472', 'Create Export Error', UploadExportError1Exception)
            .local_error('473', 'Create Export Error', UploadExportError1Exception)
            .local_error('474', 'Create Export Error', UploadExportError1Exception)
            .local_error('475', 'Create Export Error', UploadExportError1Exception)
            .local_error('476', 'Create Export Error', UploadExportError1Exception)
            .local_error('477', 'Create Export Error', UploadExportError1Exception)
            .local_error('478', 'Create Export Error', UploadExportError1Exception)
            .local_error('479', 'Create Export Error', UploadExportError1Exception)
            .local_error('480', 'Create Export Error', UploadExportError1Exception)
            .local_error('481', 'Create Export Error', UploadExportError1Exception)
            .local_error('482', 'Create Export Error', UploadExportError1Exception)
            .local_error('483', 'Create Export Error', UploadExportError1Exception)
            .local_error('484', 'Create Export Error', UploadExportError1Exception)
            .local_error('485', 'Create Export Error', UploadExportError1Exception)
            .local_error('486', 'Create Export Error', UploadExportError1Exception)
            .local_error('487', 'Create Export Error', UploadExportError1Exception)
            .local_error('488', 'Create Export Error', UploadExportError1Exception)
            .local_error('489', 'Create Export Error', UploadExportError1Exception)
            .local_error('490', 'Create Export Error', UploadExportError1Exception)
            .local_error('491', 'Create Export Error', UploadExportError1Exception)
            .local_error('492', 'Create Export Error', UploadExportError1Exception)
            .local_error('493', 'Create Export Error', UploadExportError1Exception)
            .local_error('494', 'Create Export Error', UploadExportError1Exception)
            .local_error('495', 'Create Export Error', UploadExportError1Exception)
            .local_error('496', 'Create Export Error', UploadExportError1Exception)
            .local_error('497', 'Create Export Error', UploadExportError1Exception)
            .local_error('498', 'Create Export Error', UploadExportError1Exception)
            .local_error('499', 'Create Export Error', UploadExportError1Exception)
        ).execute()

    def report_retrieve(self,
                        upl_id,
                        status=None,
                        limit=100,
                        offset=0):
        """Does a GET request to /uploads/{upl_id}/report.

        Retrieves the line item data for each row from the csv file associated
        with the upload id record. NOTE: This endpoint is currently feature
        flagged. Please reach out to Lob's support team if you  would like
        access to this API endpoint.

        Args:
            upl_id (str): ID of the upload
            status (Status31Enum, optional): The status of line items to
                filter and retrieve. By default all line items are returned.
            limit (int, optional): How many results to return.
            offset (int, optional): An integer that designates the offset at
                which to begin returning results. Defaults to 0.

        Returns:
            UploadsReportResponse: Response from the API. Returns an report
                object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}/report')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadsReportResponse.from_dictionary)
            .local_error('403', 'Forbidden Error', UploadsReport403ErrorException)
            .local_error('404', 'Not Found Error', Domains0Error1Exception)
        ).execute()

    def export_retrieve(self,
                        upl_id,
                        ex_id):
        """Does a GET request to /uploads/{upl_id}/exports/{ex_id}.

        Retrieves the details of an existing export. You need only supply the
        unique export identifier that was returned upon export creation. If
        you try retrieving an export immediately after creating one (i.e.,
        before we're done processing the export), you will get back an export
        object with `state = in_progress`.

        Args:
            upl_id (str): ID of the upload
            ex_id (str): ID of the export

        Returns:
            UploadsExportsResponse: Response from the API. Returns an export
                object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/uploads/{upl_id}/exports/{ex_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ex_id')
                            .value(ex_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadsExportsResponse.from_dictionary)
        ).execute()
