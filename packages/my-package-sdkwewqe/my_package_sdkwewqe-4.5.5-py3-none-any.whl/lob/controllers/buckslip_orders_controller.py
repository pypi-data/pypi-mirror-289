# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.buckslips_orders_response import BuckslipsOrdersResponse
from lob.models.buckslip_order import BuckslipOrder
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class BuckslipOrdersController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(BuckslipOrdersController, self).__init__(config)

    def buckslip_orders_retrieve(self,
                                 buckslip_id,
                                 limit=10,
                                 offset=0):
        """Does a GET request to /buckslips/{buckslip_id}/orders.

        Retrieves the buckslip orders associated with the given buckslip id.

        Args:
            buckslip_id (str): The ID of the buckslip to which the buckslip
                orders belong.
            limit (int, optional): How many results to return.
            offset (int, optional): An integer that designates the offset at
                which to begin returning results. Defaults to 0.

        Returns:
            BuckslipsOrdersResponse: Response from the API. Returns the
                buckslip orders associated with the given buckslip id

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/buckslips/{buckslip_id}/orders')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('buckslip_id')
                            .value(buckslip_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BuckslipsOrdersResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def buckslip_order_create(self,
                              buckslip_id,
                              content_type,
                              quantity):
        """Does a POST request to /buckslips/{buckslip_id}/orders.

        Creates a new buckslip order given information

        Args:
            buckslip_id (str): The ID of the buckslip to which the buckslip
                orders belong.
            content_type (ContentTypeEnum): TODO: type description here.
            quantity (int): The quantity of buckslips in the order (minimum
                5,000).

        Returns:
            BuckslipOrder: Response from the API. Buckslip order created
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/buckslips/{buckslip_id}/orders')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('buckslip_id')
                            .value(buckslip_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('quantity')
                        .value(quantity))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BuckslipOrder.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
