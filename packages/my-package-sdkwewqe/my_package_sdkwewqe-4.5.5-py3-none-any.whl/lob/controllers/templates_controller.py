# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.utilities.file_wrapper import FileWrapper
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.template import Template
from lob.models.templates_response_2 import TemplatesResponse2
from lob.models.all_templates import AllTemplates
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class TemplatesController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(TemplatesController, self).__init__(config)

    def template_retrieve(self,
                          tmpl_id):
        """Does a GET request to /templates/{tmpl_id}.

        Retrieves the details of an existing template. You need only supply
        the unique template identifier that was returned upon template
        creation.

        Args:
            tmpl_id (str): id of the template

        Returns:
            Template: Response from the API. Returns a template object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Template.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def template_update(self,
                        tmpl_id,
                        content_type,
                        description=None,
                        published_version=None):
        """Does a POST request to /templates/{tmpl_id}.

        Updates the description and/or published version of the template with
        the given id. To update the template's html, create a new version of
        the template.

        Args:
            tmpl_id (str): id of the template
            content_type (ContentTypeEnum): TODO: type description here.
            description (str, optional): An internal description that
                identifies this resource. Must be no longer than 255
                characters.
            published_version (str, optional): TODO: type description here.

        Returns:
            Template: Response from the API. Returns the updated template
                object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('published_version')
                        .value(published_version))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Template.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def template_delete(self,
                        tmpl_id):
        """Does a DELETE request to /templates/{tmpl_id}.

        Permanently deletes a template. Deleting a template also deletes its
        associated versions. Deleted templates can not be used to create
        postcard, letter, or check resources.

        Args:
            tmpl_id (str): id of the template

        Returns:
            TemplatesResponse2: Response from the API. Deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplatesResponse2.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def templates_list(self,
                       limit=10,
                       before_after=None,
                       include=None,
                       date_created=None,
                       metadata=None):
        """Does a GET request to /templates.

        Returns a list of your templates. The templates are returned sorted by
        creation date, with the most recently created templates appearing
        first.

        Args:
            limit (int, optional): How many results to return.
            before_after (Beforeafter, optional): `before` and `after` are
                both optional but only one of them can be in the query at a
                time.
            include (List[str], optional): Request that the response include
                the total count by specifying `include=["total_count"]`.
            date_created (Dict[str, str], optional): Filter by date created.
                Accepted formats are ISO-8601 date or datetime, e.g. `{ "gt":
                "2012-01-01", "lt": "2012-01-31T12:34:56Z" }` where `gt` is >,
                `lt` is <, `gte` is ≥, and `lte` is ≤.
            metadata (Dict[str, str], optional): Filter by metadata key-value
                pair`.

        Returns:
            AllTemplates: Response from the API. A dictionary with a data
                property that contains an array of up to `limit` templates.
                Each entry in the array is a separate template. The previous
                and next page of templates can be retrieved by calling the
                endpoint contained in the `previous_url` and `next_url` fields
                in the API response respectively.<br>If no more templates are
                available beyond the current set of returned results, the
                `next_url` field will be empty.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('before/after')
                         .value(before_after))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .query_param(Parameter()
                         .key('metadata')
                         .value(metadata))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AllTemplates.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def create_template(self,
                        content_type,
                        html,
                        description=None,
                        metadata=None,
                        engine=None,
                        required_vars=None):
        """Does a POST request to /templates.

        Creates a new template for use with the Print & Mail API. In Live
        mode, you can only have as many non-deleted templates as allotted in
        your current <a href="https://dashboard.lob.com/#/settings/editions"
        target="_blank">Print & Mail Edition</a>. If you attempt to create a
        template past your limit, you will receive a `403` error. There is no
        limit in Test mode.

        Args:
            content_type (ContentTypeEnum): TODO: type description here.
            html (str): An HTML string of less than 100,000 characters to be
                used as the `published_version` of this template. See
                [here](#section/HTML-Examples) for guidance on designing HTML
                templates. Please see endpoint specific documentation for any
                other product-specific HTML details: -
                [Postcards](#operation/postcard_create) - `front` and `back` -
                [Self Mailers](#operation/self_mailer_create) - `inside` and
                `outside` - [Letters](#operation/letter_create) - `file` -
                [Checks](#operation/check_create) - `check_bottom` and
                `attachment` - [Cards](#operation/card_create) - `front` and
                `back`  If there is a syntax error with your variable names
                within your HTML, then an error will be thrown, e.g. using a
                `{{#users}}` opening tag without the corresponding closing tag
                `{{/users}}`.
            description (str, optional): An internal description that
                identifies this resource. Must be no longer than 255
                characters.
            metadata (Dict[str, str], optional): Use metadata to store custom
                information for tagging and labeling back to your internal
                systems. Must be an object with up to 20 key-value pairs. Keys
                must be at most 40 characters and values must be at most 500
                characters. Neither can contain the characters `"` and `\`.
                i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not
                supported.  See [Metadata](#section/Metadata) for more
                information.
            engine (typing.BinaryIO, optional): TODO: type description here.
            required_vars (List[str], optional): An array of required
                variables to be used in a template. Only available for
                `handlebars` templates.

        Returns:
            Template: Response from the API. Returns a template object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('html')
                        .value(html))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('metadata')
                        .value(metadata))
            .multipart_param(Parameter()
                             .key('engine')
                             .value(engine)
                             .default_content_type('application/octet-stream'))
            .form_param(Parameter()
                        .key('required_vars')
                        .value(required_vars))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Template.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
