# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.domain_response import DomainResponse
from lob.models.domains_response import DomainsResponse
from lob.models.links_response import LinksResponse
from lob.models.link_response import LinkResponse
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception
from lob.exceptions.domains_links_0_error_1_exception import DomainsLinks0Error1Exception
from lob.exceptions.links_0_error_1_exception import Links0Error1Exception


class URLShortenerController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(URLShortenerController, self).__init__(config)

    def domain_get(self,
                   domain_id):
        """Does a GET request to /domains/{domain_id}.

        Retrieve details for a single domain.

        Args:
            domain_id (str): Unique identifier for a domain.

        Returns:
            DomainResponse: Response from the API. Returns domain related
                details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/domains/{domain_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('domain_id')
                            .value(domain_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DomainResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def domain_delete(self,
                      domain_id):
        """Does a DELETE request to /domains/{domain_id}.

        Delete a registered domain. This operation can only be performed if
        all associated links with the domain are deleted.

        Args:
            domain_id (str): Unique identifier for a domain.

        Returns:
            DomainResponse: Response from the API. Returns the deleted link
                object.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/domains/{domain_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('domain_id')
                            .value(domain_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DomainResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def domain_create(self,
                      content_type,
                      domain):
        """Does a POST request to /domains.

        Add a new custom domain that can be used to create custom links.

        Args:
            content_type (ContentTypeEnum): TODO: type description here.
            domain (str): The registered domain/hostname.

        Returns:
            DomainResponse: Response from the API. Returns a domain object
                with details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/domains')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('domain')
                        .value(domain))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DomainResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def domain_list(self):
        """Does a GET request to /domains.

        Retrieve a list of all created domains.

        Returns:
            DomainsResponse: Response from the API. Returns a list of all
                domains.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/domains')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DomainsResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def domain_delete_links(self,
                            domain_id):
        """Does a DELETE request to /domains/{domain_id}/links.

        Delete all associated links for a domain

        Args:
            domain_id (str): Unique identifier for a domain.

        Returns:
            DomainsResponse: Response from the API. Returns the deleted
                objects.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/domains/{domain_id}/links')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('domain_id')
                            .value(domain_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DomainsResponse.from_dictionary)
            .local_error('default', 'Error', DomainsLinks0Error1Exception)
        ).execute()

    def links_list(self,
                   limit=10,
                   offset=0,
                   include=None,
                   date_created=None,
                   metadata=None,
                   campaign_id=None,
                   clicked=None,
                   billing_group_id=None):
        """Does a GET request to /links.

        Retrieves a list of shortened links. The list is sorted by  creation
        date, with the most recently created appearing first.

        Args:
            limit (int, optional): How many results to return.
            offset (int, optional): An integer that designates the offset at
                which to begin returning results. Defaults to 0.
            include (List[str], optional): Request that the response include
                the total count by specifying `include=["total_count"]`.
            date_created (Dict[str, str], optional): Filter by date created.
                Accepted formats are ISO-8601 date or datetime, e.g. `{ "gt":
                "2012-01-01", "lt": "2012-01-31T12:34:56Z" }` where `gt` is >,
                `lt` is <, `gte` is â‰¥, and `lte` is â‰¤.
            metadata (Dict[str, str], optional): Filter by metadata key-value
                pair`.
            campaign_id (str, optional): Filter the links generated for a
                particular campaign using its campaign id.
            clicked (bool, optional): Retrieve the list of links that have
                been opened.
            billing_group_id (str, optional): Filter the links generated for a
                particular billing group id.

        Returns:
            LinksResponse: Response from the API. Returns the deleted link
                object.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/links')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .query_param(Parameter()
                         .key('metadata')
                         .value(metadata))
            .query_param(Parameter()
                         .key('campaign_id')
                         .value(campaign_id))
            .query_param(Parameter()
                         .key('clicked')
                         .value(clicked))
            .query_param(Parameter()
                         .key('billing_group_id')
                         .value(billing_group_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LinksResponse.from_dictionary)
            .local_error('default', 'Error', Links0Error1Exception)
        ).execute()

    def links_get(self,
                  link_id):
        """Does a GET request to /links/{link_id}.

        Retrievs a single shortened link.

        Args:
            link_id (str): Unique identifier for a link.

        Returns:
            LinkResponse: Response from the API. Returns a single link.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/links/{link_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('link_id')
                            .value(link_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LinkResponse.from_dictionary)
            .local_error('default', 'Error', Links0Error1Exception)
        ).execute()

    def link_update(self,
                    link_id,
                    content_type,
                    redirect_link,
                    domain=None,
                    slug=None,
                    metadata_tag=None,
                    billing_group_id=None):
        """Does a PATCH request to /links/{link_id}.

        Update any of the properties of a shortened link.

        Args:
            link_id (str): Unique identifier for a link.
            content_type (ContentTypeEnum): TODO: type description here.
            redirect_link (str): The original target URL.
            domain (str, optional): The registered domain to be used for the
                short URL.
            slug (str, optional): The unique path for the shortened URL, if
                empty a unique path will be used.
            metadata_tag (Dict[str, str], optional): Use metadata to store
                custom information for tagging and labeling back to your
                internal systems. Must be an object with up to 20 key-value
                pairs. Keys must be at most 40 characters and values must be
                at most 500 characters. Neither can contain the characters `"`
                and `\`. i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects
                are not supported.  See [Metadata](#section/Metadata) for more
                information.
            billing_group_id (str, optional): An optional string with the
                billing group ID to tag your usage with. Is used for billing
                purposes. Requires special activation to use. See <a
                href="#tag/Billing-Groups">Billing Group API</a> for more
                information.

        Returns:
            LinkResponse: Response from the API. Returns the updated link.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/links/{link_id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('link_id')
                            .value(link_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('redirect_link')
                        .value(redirect_link))
            .form_param(Parameter()
                        .key('domain')
                        .value(domain))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('metadata_tag')
                        .value(metadata_tag))
            .form_param(Parameter()
                        .key('billing_group_id')
                        .value(billing_group_id))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LinkResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def links_delete(self,
                     link_id):
        """Does a DELETE request to /links/{link_id}.

        Delete the shortened link.

        Args:
            link_id (str): Unique identifier for a link.

        Returns:
            LinkResponse: Response from the API. Returns the deleted short
                link object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/links/{link_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('link_id')
                            .value(link_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LinkResponse.from_dictionary)
            .local_error('default', 'Error', Links0Error1Exception)
        ).execute()

    def link_create(self,
                    content_type,
                    redirect_link,
                    domain=None,
                    slug=None,
                    metadata_tag=None,
                    billing_group_id=None):
        """Does a POST request to /links/shorten.

        Given a long URL, shorten your URL either by using a custom domain or
        Lob's own short domain.

        Args:
            content_type (ContentTypeEnum): TODO: type description here.
            redirect_link (str): The original target URL.
            domain (str, optional): The registered domain to be used for the
                short URL.
            slug (str, optional): The unique path for the shortened URL, if
                empty a unique path will be used.
            metadata_tag (Dict[str, str], optional): Use metadata to store
                custom information for tagging and labeling back to your
                internal systems. Must be an object with up to 20 key-value
                pairs. Keys must be at most 40 characters and values must be
                at most 500 characters. Neither can contain the characters `"`
                and `\`. i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects
                are not supported.  See [Metadata](#section/Metadata) for more
                information.
            billing_group_id (str, optional): An optional string with the
                billing group ID to tag your usage with. Is used for billing
                purposes. Requires special activation to use. See <a
                href="#tag/Billing-Groups">Billing Group API</a> for more
                information.

        Returns:
            LinkResponse: Response from the API. Returns a successfully
                created link.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/links/shorten')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('redirect_link')
                        .value(redirect_link))
            .form_param(Parameter()
                        .key('domain')
                        .value(domain))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('metadata_tag')
                        .value(metadata_tag))
            .form_param(Parameter()
                        .key('billing_group_id')
                        .value(billing_group_id))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LinkResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def link_bulk_create(self,
                         body):
        """Does a POST request to /links/shorten/bulk.

        Shortens a list of links in a single request.

        Args:
            body (List[LinkSingle]): TODO: type description here.

        Returns:
            LinksResponse: Response from the API. Returns all successfully
                created links

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/links/shorten/bulk')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LinksResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
