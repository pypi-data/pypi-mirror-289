# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.cards_orders_response import CardsOrdersResponse
from lob.models.card_order import CardOrder
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class CardOrdersController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(CardOrdersController, self).__init__(config)

    def card_orders_retrieve(self,
                             card_id,
                             limit=10,
                             offset=0):
        """Does a GET request to /cards/{card_id}/orders.

        Retrieves the card orders associated with the given card id.

        Args:
            card_id (str): The ID of the card to which the card orders
                belong.
            limit (int, optional): How many results to return.
            offset (int, optional): An integer that designates the offset at
                which to begin returning results. Defaults to 0.

        Returns:
            CardsOrdersResponse: Response from the API. Returns the card
                orders associated with the given card id

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{card_id}/orders')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('card_id')
                            .value(card_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardsOrdersResponse.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def card_order_create(self,
                          card_id,
                          content_type,
                          quantity):
        """Does a POST request to /cards/{card_id}/orders.

        Creates a new card order given information

        Args:
            card_id (str): The ID of the card to which the card orders
                belong.
            content_type (ContentTypeEnum): TODO: type description here.
            quantity (int): The quantity of cards in the order (minimum
                10,000).

        Returns:
            CardOrder: Response from the API. Card order created successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{card_id}/orders')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('card_id')
                            .value(card_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('quantity')
                        .value(quantity))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardOrder.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
