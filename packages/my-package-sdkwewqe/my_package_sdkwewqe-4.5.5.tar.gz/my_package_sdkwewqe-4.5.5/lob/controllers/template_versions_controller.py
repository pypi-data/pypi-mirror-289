# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.utilities.file_wrapper import FileWrapper
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.template_version import TemplateVersion
from lob.models.templates_versions_response_2 import TemplatesVersionsResponse2
from lob.models.all_template_versions import AllTemplateVersions
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class TemplateVersionsController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(TemplateVersionsController, self).__init__(config)

    def template_version_retrieve(self,
                                  tmpl_id,
                                  vrsn_id):
        """Does a GET request to /templates/{tmpl_id}/versions/{vrsn_id}.

        Retrieves the template version with the given template and version
        ids.

        Args:
            tmpl_id (str): The ID of the template to which the version
                belongs.
            vrsn_id (str): id of the template_version

        Returns:
            TemplateVersion: Response from the API. Returns the template
                version with the given template and version ids.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}/versions/{vrsn_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('vrsn_id')
                            .value(vrsn_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplateVersion.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def template_version_update(self,
                                tmpl_id,
                                vrsn_id,
                                content_type,
                                description=None,
                                engine=None,
                                required_vars=None):
        """Does a POST request to /templates/{tmpl_id}/versions/{vrsn_id}.

        Updates the template version with the given template and version ids.

        Args:
            tmpl_id (str): The ID of the template to which the version
                belongs.
            vrsn_id (str): id of the template_version
            content_type (ContentTypeEnum): TODO: type description here.
            description (str, optional): An internal description that
                identifies this resource. Must be no longer than 255
                characters.
            engine (typing.BinaryIO, optional): TODO: type description here.
            required_vars (List[str], optional): An array of required
                variables to be used in a template. Only available for
                `handlebars` templates.

        Returns:
            TemplateVersion: Response from the API. Returns the template
                version with the given template and version ids.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}/versions/{vrsn_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('vrsn_id')
                            .value(vrsn_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .multipart_param(Parameter()
                             .key('engine')
                             .value(engine)
                             .default_content_type('application/octet-stream'))
            .form_param(Parameter()
                        .key('required_vars')
                        .value(required_vars))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplateVersion.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def template_version_delete(self,
                                tmpl_id,
                                vrsn_id):
        """Does a DELETE request to /templates/{tmpl_id}/versions/{vrsn_id}.

        Permanently deletes a template version. A template's
        `published_version` can not be deleted.

        Args:
            tmpl_id (str): The ID of the template to which the version
                belongs.
            vrsn_id (str): id of the template_version

        Returns:
            TemplatesVersionsResponse2: Response from the API. Deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}/versions/{vrsn_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('vrsn_id')
                            .value(vrsn_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplatesVersionsResponse2.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def template_versions_list(self,
                               tmpl_id,
                               limit=10,
                               before_after=None,
                               include=None,
                               date_created=None):
        """Does a GET request to /templates/{tmpl_id}/versions.

        Returns a list of template versions for the given template ID. The
        template versions are sorted by creation date, with the most recently
        created appearing first.

        Args:
            tmpl_id (str): The ID of the template associated with the
                retrieved versions
            limit (int, optional): How many results to return.
            before_after (Beforeafter, optional): `before` and `after` are
                both optional but only one of them can be in the query at a
                time.
            include (List[str], optional): Request that the response include
                the total count by specifying `include=["total_count"]`.
            date_created (Dict[str, str], optional): Filter by date created.
                Accepted formats are ISO-8601 date or datetime, e.g. `{ "gt":
                "2012-01-01", "lt": "2012-01-31T12:34:56Z" }` where `gt` is >,
                `lt` is <, `gte` is ≥, and `lte` is ≤.

        Returns:
            AllTemplateVersions: Response from the API. A dictionary with a
                data property that contains an array of up to `limit` template
                versions. Each entry in the array is a separate template
                version object. The previous and next page of template
                versions can be retrieved by calling the endpoint contained in
                the `previous_url` and `next_url` fields in the API response
                respectively.<br>If no more template versions are available
                beyond the current set of returned results, the `next_url`
                field will be empty.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}/versions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('before/after')
                         .value(before_after))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AllTemplateVersions.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def create_template_version(self,
                                tmpl_id,
                                content_type,
                                html,
                                description=None,
                                engine=None,
                                required_vars=None):
        """Does a POST request to /templates/{tmpl_id}/versions.

        Creates a new template version attached to the specified template.

        Args:
            tmpl_id (str): The ID of the template the new version will be
                attached to
            content_type (ContentTypeEnum): TODO: type description here.
            html (str): An HTML string of less than 100,000 characters to be
                used as the `published_version` of this template. See
                [here](#section/HTML-Examples) for guidance on designing HTML
                templates. Please see endpoint specific documentation for any
                other product-specific HTML details: -
                [Postcards](#operation/postcard_create) - `front` and `back` -
                [Self Mailers](#operation/self_mailer_create) - `inside` and
                `outside` - [Letters](#operation/letter_create) - `file` -
                [Checks](#operation/check_create) - `check_bottom` and
                `attachment` - [Cards](#operation/card_create) - `front` and
                `back`  If there is a syntax error with your variable names
                within your HTML, then an error will be thrown, e.g. using a
                `{{#users}}` opening tag without the corresponding closing tag
                `{{/users}}`.
            description (str, optional): An internal description that
                identifies this resource. Must be no longer than 255
                characters.
            engine (typing.BinaryIO, optional): TODO: type description here.
            required_vars (List[str], optional): An array of required
                variables to be used in a template. Only available for
                `handlebars` templates.

        Returns:
            TemplateVersion: Response from the API. Returns the template
                version with the given template and version ids.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/templates/{tmpl_id}/versions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('html')
                        .value(html))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .multipart_param(Parameter()
                             .key('engine')
                             .value(engine)
                             .default_content_type('application/octet-stream'))
            .form_param(Parameter()
                        .key('required_vars')
                        .value(required_vars))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplateVersion.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
