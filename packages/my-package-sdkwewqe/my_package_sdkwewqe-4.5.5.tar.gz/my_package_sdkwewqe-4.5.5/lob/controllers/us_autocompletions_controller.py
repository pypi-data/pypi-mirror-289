# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.us_autocompletions import UsAutocompletions
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class USAutocompletionsController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(USAutocompletionsController, self).__init__(config)

    def autocompletion(self,
                       content_type,
                       address_prefix,
                       case=None,
                       valid_addresses=False,
                       city=None,
                       state=None,
                       zip_code=None,
                       geo_ip_sort=None):
        """Does a POST request to /us_autocompletions.

        Given an address prefix consisting of a partial primary line, as well
        as optional input of city, state, and zip code, this functionality
        returns up to 10 full US address suggestions. Not all of them will
        turn out to be valid addresses; they'll need to be
        [verified](#operation/verification_us).

        Args:
            content_type (ContentTypeEnum): TODO: type description here.
            address_prefix (str): Only accepts numbers and street names in an
                alphanumeric format.
            case (Case1Enum, optional): Casing of the verified address.
                Possible values are `upper` and `proper` for uppercased (e.g.
                "PO BOX") and proper-cased (e.g. "PO Box"), respectively. Only
                affects `primary_line`, `city`, and `state`. Default casing is
                `upper`.
            valid_addresses (bool, optional): Possible values are `true` and
                `false`. If false, not all of the suggestions in the response
                will be valid addresses; they'll need to be verified in order
                to determine the deliverability. The valid_addresses flag will
                greatly reduce the number of keystrokes needed before reaching
                an intended address.
            city (str, optional): An optional city input used to filter
                suggestions. Case insensitive and does not match partial
                abbreviations.
            state (str, optional): An optional state input used to filter
                suggestions. Case insensitive and does not match partial
                abbreviations.
            zip_code (str, optional): An optional ZIP Code input used to
                filter suggestions. Matches partial entries.
            geo_ip_sort (bool, optional): If `true`, sort suggestions by
                proximity to the IP set in the `X-Forwarded-For` header.

        Returns:
            UsAutocompletions: Response from the API. Returns a US
                autocompletion object.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/us_autocompletions')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('address_prefix')
                        .value(address_prefix))
            .query_param(Parameter()
                         .key('case')
                         .value(case))
            .query_param(Parameter()
                         .key('valid_addresses')
                         .value(valid_addresses))
            .form_param(Parameter()
                        .key('city')
                        .value(city))
            .form_param(Parameter()
                        .key('state')
                        .value(state))
            .form_param(Parameter()
                        .key('zip_code')
                        .value(zip_code))
            .form_param(Parameter()
                        .key('geo_ip_sort')
                        .value(geo_ip_sort))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UsAutocompletions.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
