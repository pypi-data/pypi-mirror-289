# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.postcard import Postcard
from lob.models.postcards_response_1 import PostcardsResponse1
from lob.models.all_postcards import AllPostcards
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class PostcardsController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(PostcardsController, self).__init__(config)

    def postcard_retrieve(self,
                          psc_id):
        """Does a GET request to /postcards/{psc_id}.

        Retrieves the details of an existing postcard. You need only supply
        the unique customer identifier that was returned upon postcard
        creation.

        Args:
            psc_id (str): id of the postcard

        Returns:
            Postcard: Response from the API. Returns a postcard object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/postcards/{psc_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('psc_id')
                            .value(psc_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Postcard.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def postcard_delete(self,
                        psc_id):
        """Does a DELETE request to /postcards/{psc_id}.

        Completely removes a postcard from production. This can only be done
        if the postcard has a `send_date` and the `send_date` has not yet
        passed. If the postcard is successfully canceled, you will not be
        charged for it. Read more on [cancellation
        windows](#section/Cancellation-Windows) and
        [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation
        is a premium feature. Upgrade to the appropriate <a
        href="https://dashboard.lob.com/#/settings/editions"
        target="_blank">Print & Mail Edition</a> to gain access.

        Args:
            psc_id (str): id of the postcard

        Returns:
            PostcardsResponse1: Response from the API. Deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/postcards/{psc_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('psc_id')
                            .value(psc_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PostcardsResponse1.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def postcards_list(self,
                       limit=10,
                       before_after=None,
                       include=None,
                       date_created=None,
                       metadata=None,
                       size=None,
                       scheduled=None,
                       send_date=None,
                       mail_type=None,
                       sort_by=None):
        """Does a GET request to /postcards.

        Returns a list of your postcards. The addresses are returned sorted by
        creation date, with the most recently created addresses appearing
        first.

        Args:
            limit (int, optional): How many results to return.
            before_after (Beforeafter, optional): `before` and `after` are
                both optional but only one of them can be in the query at a
                time.
            include (List[str], optional): Request that the response include
                the total count by specifying `include=["total_count"]`.
            date_created (Dict[str, str], optional): Filter by date created.
                Accepted formats are ISO-8601 date or datetime, e.g. `{ "gt":
                "2012-01-01", "lt": "2012-01-31T12:34:56Z" }` where `gt` is >,
                `lt` is <, `gte` is ≥, and `lte` is ≤.
            metadata (Dict[str, str], optional): Filter by metadata key-value
                pair`.
            size (List[PostcardSizeEnum], optional): Specifies the size of the
                postcard. Only `4x6` postcards can be sent to international
                destinations.
            scheduled (bool, optional): * `true` - only return orders (past or
                future) where `send_date` is greater than `date_created` *
                `false` - only return orders where `send_date` is equal to
                `date_created`
            send_date (object, optional): Filter by ISO-8601 date or datetime,
                e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z" }`
                where `gt` is >, `lt` is <, `gte` is ≥, and `lte` is ≤.
            mail_type (MailTypeEnum, optional): A string designating the mail
                postage type: * `usps_first_class` - (default) *
                `usps_standard` - a <a
                href="https://lob.com/pricing/print-mail#compare"
                target="_blank">cheaper option</a> which is less predictable
                and takes longer to deliver. `usps_standard` cannot be used
                with `4x6` postcards or for any postcards sent outside of the
                United States.
            sort_by (SortBy1, optional): Sorts items by ascending or
                descending dates. Use either `date_created` or `send_date`,
                not both.

        Returns:
            AllPostcards: Response from the API. A dictionary with a data
                property that contains an array of up to `limit` postcards.
                Each entry in the array is a separate postcard. The previous
                and next page of postcards can be retrieved by calling the
                endpoint contained in the `previous_url` and `next_url` fields
                in the API response respectively.<br>If no more postcards are
                available beyond the current set of returned results, the
                `next_url` field will be empty.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/postcards')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('before/after')
                         .value(before_after))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .query_param(Parameter()
                         .key('metadata')
                         .value(metadata))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('scheduled')
                         .value(scheduled))
            .query_param(Parameter()
                         .key('send_date')
                         .value(send_date))
            .query_param(Parameter()
                         .key('mail_type')
                         .value(mail_type))
            .query_param(Parameter()
                         .key('sort_by')
                         .value(sort_by))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AllPostcards.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def postcard_create(self,
                        body,
                        idempotency_key=None,
                        idempotency_key_2=None):
        """Does a POST request to /postcards.

        Creates a new postcard given information

        Args:
            body (PostcardEditable): TODO: type description here.
            idempotency_key (str, optional): A string of no longer than 256
                characters that uniquely identifies this resource. For more
                help integrating idempotency keys, refer to our <a
                href="https://help.lob.com/print-and-mail/building-a-mail-strat
                egy/managing-mail-settings#idempotent-requests-12"
                target="_blank">implementation guide</a>.
            idempotency_key_2 (str, optional): A string of no longer than 256
                characters that uniquely identifies this resource. For more
                help integrating idempotency keys, refer to our <a
                href="https://help.lob.com/print-and-mail/building-a-mail-strat
                egy/managing-mail-settings#idempotent-requests-12"
                target="_blank">implementation guide</a>.

        Returns:
            Postcard: Response from the API. Returns a postcard object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/postcards')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .query_param(Parameter()
                         .key('idempotency_key2')
                         .value(idempotency_key_2))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Postcard.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
