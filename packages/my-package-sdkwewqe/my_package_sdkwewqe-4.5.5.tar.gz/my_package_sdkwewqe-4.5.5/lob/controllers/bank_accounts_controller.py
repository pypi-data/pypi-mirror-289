# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lob.api_helper import APIHelper
from lob.configuration import Server
from lob.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lob.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lob.models.bank_account import BankAccount
from lob.models.bank_accounts_response_1 import BankAccountsResponse1
from lob.models.all_bank_accounts import AllBankAccounts
from lob.exceptions.domains_0_error_1_exception import Domains0Error1Exception


class BankAccountsController(BaseController):

    """A Controller to access Endpoints in the lob API."""
    def __init__(self, config):
        super(BankAccountsController, self).__init__(config)

    def bank_account_verify(self,
                            bank_id,
                            content_type,
                            amounts):
        """Does a POST request to /bank_accounts/{bank_id}/verify.

        Verify a bank account in order to create a check.

        Args:
            bank_id (str): id of the bank account to be verified
            content_type (ContentTypeEnum): TODO: type description here.
            amounts (List[int]): In live mode, an array containing the two
                micro deposits (in cents) placed in the bank account. In test
                mode, no micro deposits will be placed, so any two integers
                between `1` and `100` will work.

        Returns:
            BankAccount: Response from the API. Returns a bank_account object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank_accounts/{bank_id}/verify')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('bank_id')
                            .value(bank_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('amounts')
                        .value(amounts))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BankAccount.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def bank_account_retrieve(self,
                              bank_id):
        """Does a GET request to /bank_accounts/{bank_id}.

        Retrieves the details of an existing bank account. You need only
        supply the unique bank account identifier that was returned upon bank
        account creation.

        Args:
            bank_id (str): id of the bank account

        Returns:
            BankAccount: Response from the API. Returns a bank account object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank_accounts/{bank_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('bank_id')
                            .value(bank_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BankAccount.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def bank_account_delete(self,
                            bank_id):
        """Does a DELETE request to /bank_accounts/{bank_id}.

        Permanently deletes a bank account. It cannot be undone.

        Args:
            bank_id (str): id of the bank account

        Returns:
            BankAccountsResponse1: Response from the API. Deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank_accounts/{bank_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('bank_id')
                            .value(bank_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BankAccountsResponse1.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def bank_accounts_list(self,
                           limit=10,
                           before_after=None,
                           include=None,
                           date_created=None,
                           metadata=None):
        """Does a GET request to /bank_accounts.

        Returns a list of your bank accounts. The bank accounts are returned
        sorted by creation date, with the most recently created bank accounts
        appearing first.

        Args:
            limit (int, optional): How many results to return.
            before_after (Beforeafter, optional): `before` and `after` are
                both optional but only one of them can be in the query at a
                time.
            include (List[str], optional): Request that the response include
                the total count by specifying `include=["total_count"]`.
            date_created (Dict[str, str], optional): Filter by date created.
                Accepted formats are ISO-8601 date or datetime, e.g. `{ "gt":
                "2012-01-01", "lt": "2012-01-31T12:34:56Z" }` where `gt` is >,
                `lt` is <, `gte` is ≥, and `lte` is ≤.
            metadata (Dict[str, str], optional): Filter by metadata key-value
                pair`.

        Returns:
            AllBankAccounts: Response from the API. A dictionary with a data
                property that contains an array of up to `limit`
                bank_accounts. Each entry in the array is a separate
                bank_account. The previous and next page of bank_accounts can
                be retrieved by calling the endpoint contained in the
                `previous_url` and `next_url` fields in the API response
                respectively.<br>If no more bank_accounts are available beyond
                the current set of returned results, the `next_url` field will
                be empty.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank_accounts')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('before/after')
                         .value(before_after))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .query_param(Parameter()
                         .key('metadata')
                         .value(metadata))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AllBankAccounts.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()

    def bank_account_create(self,
                            content_type,
                            routing_number,
                            account_number,
                            account_type,
                            signatory,
                            description=None,
                            check_template=None,
                            fractional_routing_number=None,
                            city=None,
                            state=None,
                            zipcode=None,
                            metadata=None):
        """Does a POST request to /bank_accounts.

        Creates a new bank account with the provided properties. Bank accounts
        created in live mode will need to be verified via micro deposits
        before being able to send live checks. The deposits will appear in the
        bank account in 2-3 business days and have the description
        "VERIFICATION".

        Args:
            content_type (ContentTypeEnum): TODO: type description here.
            routing_number (str): Must be a <a
                href="https://www.frbservices.org/index.html"
                target="_blank">valid US routing number</a>.
            account_number (str): TODO: type description here.
            account_type (AccountTypeEnum): TODO: type description here.
            signatory (str): The signatory associated with your account. This
                name will be printed on checks created with this bank account.
                If you prefer to use a custom signature image on your checks
                instead, please create your bank account from the <a
                href="https://dashboard.lob.com/#/login"
                target="_blank">Dashboard</a>.
            description (str, optional): An internal description that
                identifies this resource. Must be no longer than 255
                characters.
            check_template (CheckTemplateEnum, optional): TODO: type
                description here.
            fractional_routing_number (str, optional): The fractional routing
                number for your home bank account. Required for the `jpm`
                check template only. Please contact a bank representative if
                you do not know the fractional routing number associated with
                your home bank institution.
            city (str, optional): The city associated with your home bank
                account. Required for the `jpm` check template only. Please
                contact a bank representative if you do not know the city
                associated with your home bank institution.
            state (str, optional): The state associated with your home bank
                account. Required for the `jpm` check template only. Please
                contact a bank representative if you do not know the state
                associated with your home bank institution.
            zipcode (str, optional): The zipcode associated with your home
                bank account. Required for the `jpm` check template only.
                Please contact a bank representative if you do not know the
                zipcode associated with your home bank institution.
            metadata (Dict[str, str], optional): Use metadata to store custom
                information for tagging and labeling back to your internal
                systems. Must be an object with up to 20 key-value pairs. Keys
                must be at most 40 characters and values must be at most 500
                characters. Neither can contain the characters `"` and `\`.
                i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not
                supported.  See [Metadata](#section/Metadata) for more
                information.

        Returns:
            BankAccount: Response from the API. Returns a bank_account object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank_accounts')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('routing_number')
                        .value(routing_number))
            .form_param(Parameter()
                        .key('account_number')
                        .value(account_number))
            .form_param(Parameter()
                        .key('account_type')
                        .value(account_type))
            .form_param(Parameter()
                        .key('signatory')
                        .value(signatory))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('check_template')
                        .value(check_template))
            .form_param(Parameter()
                        .key('fractional_routing_number')
                        .value(fractional_routing_number))
            .form_param(Parameter()
                        .key('city')
                        .value(city))
            .form_param(Parameter()
                        .key('state')
                        .value(state))
            .form_param(Parameter()
                        .key('zipcode')
                        .value(zipcode))
            .form_param(Parameter()
                        .key('metadata')
                        .value(metadata))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BankAccount.from_dictionary)
            .local_error('default', 'Error', Domains0Error1Exception)
        ).execute()
