# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class IntlComponents(object):

    """Implementation of the 'intl_components' model.

    A nested object containing a breakdown of each component of an address.

    Attributes:
        primary_number (str): The numeric or alphanumeric part of an address
            preceding the street name. Often the house, building, or PO Box
            number.
        street_name (str): The name of the street.
        city (str): TODO: type description here.
        state (str): The <a href="https://en.wikipedia.org/wiki/ISO_3166-2"
            target="_blank">ISO 3166-2</a> two letter code for the state.
        postal_code (str): The postal code.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_number": 'primary_number',
        "street_name": 'street_name',
        "city": 'city',
        "state": 'state',
        "postal_code": 'postal_code'
    }

    _optionals = [
        'primary_number',
        'street_name',
        'city',
        'state',
        'postal_code',
    ]

    def __init__(self,
                 primary_number=APIHelper.SKIP,
                 street_name=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 postal_code=APIHelper.SKIP):
        """Constructor for the IntlComponents class"""

        # Initialize members of the class
        if primary_number is not APIHelper.SKIP:
            self.primary_number = primary_number 
        if street_name is not APIHelper.SKIP:
            self.street_name = street_name 
        if city is not APIHelper.SKIP:
            self.city = city 
        if state is not APIHelper.SKIP:
            self.state = state 
        if postal_code is not APIHelper.SKIP:
            self.postal_code = postal_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_number = dictionary.get("primary_number") if dictionary.get("primary_number") else APIHelper.SKIP
        street_name = dictionary.get("street_name") if dictionary.get("street_name") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        postal_code = dictionary.get("postal_code") if dictionary.get("postal_code") else APIHelper.SKIP
        # Return an object of this model
        return cls(primary_number,
                   street_name,
                   city,
                   state,
                   postal_code)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
