# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.qr_code_1 import QrCode1


class Details3(object):

    """Implementation of the 'Details3' model.

    TODO: type model description here.

    Attributes:
        address_placement (AddressPlacementEnum): TODO: type description
            here.
        add_on_types (List[LetterAddOnTypesEnum]): An array containing the
            types of add-ons for the Letter Creative.
        buckslips (List[str]): A single-element array containing an existing
            buckslip id in a string format. See [buckslips](#tag/Buckslips)
            for more information. Note that buckslip letter campaigns require
            a minimum send quantity of 5,000 letters per campaign.
        cards (List[str]): A single-element array containing an existing card
            id in a string format. See [cards](#tag/Cards) for more
            information.
        color (bool): Set this key to `true` if you would like to print in
            color. Set to `false` if you would like to print in black and
            white.
        custom_envelope (str): Accepts an envelope ID for any customized
            envelope with available inventory. If no inventory is available
            for the specified ID, the letter will not be sent, and an error
            will be returned. If the letter has more than 6 sheets, it will be
            sent in a blank flat envelope. Custom envelopes may be created and
            ordered from the dashboard. This feature is exclusive to certain
            customers. Upgrade to the appropriate <a
            href="https://dashboard.lob.com/#/settings/editions"
            target="_blank">Print & Mail Edition</a> to gain access.
        double_sided (bool): Set this attribute to `true` for double sided
            printing, or `false` for for single sided printing. Defaults to
            `true`.
        extra_service (object): TODO: type description here.
        mail_type (MailTypeEnum): TODO: type description here.
        qr_code (QrCode1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "color": 'color',
        "address_placement": 'address_placement',
        "add_on_types": 'add_on_types',
        "buckslips": 'buckslips',
        "cards": 'cards',
        "custom_envelope": 'custom_envelope',
        "double_sided": 'double_sided',
        "extra_service": 'extra_service',
        "mail_type": 'mail_type',
        "qr_code": 'qr_code'
    }

    _optionals = [
        'address_placement',
        'add_on_types',
        'buckslips',
        'cards',
        'custom_envelope',
        'double_sided',
        'extra_service',
        'mail_type',
        'qr_code',
    ]

    _nullables = [
        'add_on_types',
        'buckslips',
        'cards',
        'custom_envelope',
    ]

    def __init__(self,
                 color=None,
                 address_placement=APIHelper.SKIP,
                 add_on_types=APIHelper.SKIP,
                 buckslips=APIHelper.SKIP,
                 cards=APIHelper.SKIP,
                 custom_envelope=APIHelper.SKIP,
                 double_sided=True,
                 extra_service=APIHelper.SKIP,
                 mail_type=APIHelper.SKIP,
                 qr_code=APIHelper.SKIP):
        """Constructor for the Details3 class"""

        # Initialize members of the class
        if address_placement is not APIHelper.SKIP:
            self.address_placement = address_placement 
        if add_on_types is not APIHelper.SKIP:
            self.add_on_types = add_on_types 
        if buckslips is not APIHelper.SKIP:
            self.buckslips = buckslips 
        if cards is not APIHelper.SKIP:
            self.cards = cards 
        self.color = color 
        if custom_envelope is not APIHelper.SKIP:
            self.custom_envelope = custom_envelope 
        self.double_sided = double_sided 
        if extra_service is not APIHelper.SKIP:
            self.extra_service = extra_service 
        if mail_type is not APIHelper.SKIP:
            self.mail_type = mail_type 
        if qr_code is not APIHelper.SKIP:
            self.qr_code = qr_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        color = dictionary.get("color") if "color" in dictionary.keys() else None
        address_placement = dictionary.get("address_placement") if dictionary.get("address_placement") else APIHelper.SKIP
        add_on_types = dictionary.get("add_on_types") if "add_on_types" in dictionary.keys() else APIHelper.SKIP
        buckslips = dictionary.get("buckslips") if "buckslips" in dictionary.keys() else APIHelper.SKIP
        cards = dictionary.get("cards") if "cards" in dictionary.keys() else APIHelper.SKIP
        custom_envelope = dictionary.get("custom_envelope") if "custom_envelope" in dictionary.keys() else APIHelper.SKIP
        double_sided = dictionary.get("double_sided") if dictionary.get("double_sided") else True
        extra_service = dictionary.get("extra_service") if dictionary.get("extra_service") else APIHelper.SKIP
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else APIHelper.SKIP
        qr_code = QrCode1.from_dictionary(dictionary.get('qr_code')) if 'qr_code' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(color,
                   address_placement,
                   add_on_types,
                   buckslips,
                   cards,
                   custom_envelope,
                   double_sided,
                   extra_service,
                   mail_type,
                   qr_code)
