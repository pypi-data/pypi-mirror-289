# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class Addressobjwithcompanydefined(object):

    """Implementation of the 'addressobjwithcompanydefined' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        name (str): Either `name` or `company` is required, you may also add
            both. Must be no longer than 40 characters. If both `name` and
            `company` are provided, they will be printed on two separate lines
            above the rest of the address.
        company (str): Either `name` or `company` is required, you may also
            add both. Must be no longer than 40 characters. If both `name` and
            `company` are provided, they will be printed on two separate lines
            above the rest of the address. This field can be used for any
            secondary recipient information which is not part of the actual
            mailing address (Company Name, Department, Attention Line, etc).
        address_line_1 (str): The primary number, street name, and directional
            information.
        address_line_2 (str): An optional field for address unit information.
            Total string sum of this plus `address_line1` may not exceed 50
            characters.
        address_city (str): TODO: type description here.
        address_state (str): 2 letter state short-name code
        address_zip (str): Must follow the ZIP format of `12345` or ZIP+4
            format of `12345-1234`.
        phone (str): Must be no longer than 40 characters.
        email (str): Must be no longer than 100 characters.
        address_country (AddressCountry2Enum): TODO: type description here.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "company": 'company',
        "description": 'description',
        "name": 'name',
        "address_line_1": 'address_line1',
        "address_line_2": 'address_line2',
        "address_city": 'address_city',
        "address_state": 'address_state',
        "address_zip": 'address_zip',
        "phone": 'phone',
        "email": 'email',
        "address_country": 'address_country',
        "metadata": 'metadata'
    }

    _optionals = [
        'description',
        'name',
        'address_line_1',
        'address_line_2',
        'address_city',
        'address_state',
        'address_zip',
        'phone',
        'email',
        'address_country',
        'metadata',
    ]

    _nullables = [
        'description',
        'name',
        'company',
        'address_line_2',
        'phone',
        'email',
    ]

    def __init__(self,
                 company=None,
                 description=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 address_line_1=APIHelper.SKIP,
                 address_line_2=APIHelper.SKIP,
                 address_city=APIHelper.SKIP,
                 address_state=APIHelper.SKIP,
                 address_zip=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 address_country=APIHelper.SKIP,
                 metadata=APIHelper.SKIP):
        """Constructor for the Addressobjwithcompanydefined class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.company = company 
        if address_line_1 is not APIHelper.SKIP:
            self.address_line_1 = address_line_1 
        if address_line_2 is not APIHelper.SKIP:
            self.address_line_2 = address_line_2 
        if address_city is not APIHelper.SKIP:
            self.address_city = address_city 
        if address_state is not APIHelper.SKIP:
            self.address_state = address_state 
        if address_zip is not APIHelper.SKIP:
            self.address_zip = address_zip 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if email is not APIHelper.SKIP:
            self.email = email 
        if address_country is not APIHelper.SKIP:
            self.address_country = address_country 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        company = dictionary.get("company") if dictionary.get("company") else None
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        address_line_1 = dictionary.get("address_line1") if dictionary.get("address_line1") else APIHelper.SKIP
        address_line_2 = dictionary.get("address_line2") if "address_line2" in dictionary.keys() else APIHelper.SKIP
        address_city = dictionary.get("address_city") if dictionary.get("address_city") else APIHelper.SKIP
        address_state = dictionary.get("address_state") if dictionary.get("address_state") else APIHelper.SKIP
        address_zip = dictionary.get("address_zip") if dictionary.get("address_zip") else APIHelper.SKIP
        phone = dictionary.get("phone") if "phone" in dictionary.keys() else APIHelper.SKIP
        email = dictionary.get("email") if "email" in dictionary.keys() else APIHelper.SKIP
        address_country = dictionary.get("address_country") if dictionary.get("address_country") else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        # Return an object of this model
        return cls(company,
                   description,
                   name,
                   address_line_1,
                   address_line_2,
                   address_city,
                   address_state,
                   address_zip,
                   phone,
                   email,
                   address_country,
                   metadata)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.company,
                                           type_callable=lambda value: isinstance(value, str),
                                           is_value_nullable=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('company'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True)
