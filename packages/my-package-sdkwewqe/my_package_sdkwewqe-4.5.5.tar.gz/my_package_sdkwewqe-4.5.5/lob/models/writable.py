# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.qr_code_1 import QrCode1


class Writable(object):

    """Implementation of the 'writable' model.

    Properties that the postcards in your Creative should have. Check within
    in order to add a QR code to your creative.

    Attributes:
        mail_type (MailTypeEnum): TODO: type description here.
        size (PostcardSizeEnum): TODO: type description here.
        qr_code (QrCode1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mail_type": 'mail_type',
        "size": 'size',
        "qr_code": 'qr_code'
    }

    _optionals = [
        'mail_type',
        'size',
        'qr_code',
    ]

    def __init__(self,
                 mail_type=APIHelper.SKIP,
                 size=APIHelper.SKIP,
                 qr_code=APIHelper.SKIP):
        """Constructor for the Writable class"""

        # Initialize members of the class
        if mail_type is not APIHelper.SKIP:
            self.mail_type = mail_type 
        if size is not APIHelper.SKIP:
            self.size = size 
        if qr_code is not APIHelper.SKIP:
            self.qr_code = qr_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else APIHelper.SKIP
        size = dictionary.get("size") if dictionary.get("size") else APIHelper.SKIP
        qr_code = QrCode1.from_dictionary(dictionary.get('qr_code')) if 'qr_code' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mail_type,
                   size,
                   qr_code)
