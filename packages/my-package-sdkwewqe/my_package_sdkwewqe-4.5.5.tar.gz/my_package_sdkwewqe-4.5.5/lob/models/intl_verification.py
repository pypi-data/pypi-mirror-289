# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.components_1 import Components1


class IntlVerification(object):

    """Implementation of the 'intl_verification' model.

    TODO: type model description here.

    Attributes:
        recipient (str): The intended recipient, typically a person's or
            firm's name.
        primary_line (str): The primary delivery line (usually the street
            address) of the address.
        secondary_line (str): The secondary delivery line of the address. This
            field is typically empty but may contain information if
            `primary_line` is too long.
        id (str): Unique identifier prefixed with `intl_ver_`.
        last_line (str): Combination of the following applicable `components`:
            * `city` * `state` * `zip_code` * `zip_code_plus_4`
        country (str): The country of the address. Will be returned as a 2
            letter country short-name code (ISO 3166).
        coverage (CoverageEnum): TODO: type description here.
        deliverability (Deliverability1Enum): TODO: type description here.
        status (Status1Enum): TODO: type description here.
        components (Components1): TODO: type description here.
        object (Object2Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "recipient": 'recipient',
        "primary_line": 'primary_line',
        "secondary_line": 'secondary_line',
        "id": 'id',
        "last_line": 'last_line',
        "country": 'country',
        "coverage": 'coverage',
        "deliverability": 'deliverability',
        "status": 'status',
        "components": 'components',
        "object": 'object'
    }

    _optionals = [
        'recipient',
        'primary_line',
        'secondary_line',
        'id',
        'last_line',
        'country',
        'coverage',
        'deliverability',
        'status',
        'components',
        'object',
    ]

    _nullables = [
        'recipient',
    ]

    def __init__(self,
                 recipient=APIHelper.SKIP,
                 primary_line=APIHelper.SKIP,
                 secondary_line=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 last_line=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 coverage=APIHelper.SKIP,
                 deliverability=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 components=APIHelper.SKIP,
                 object=APIHelper.SKIP):
        """Constructor for the IntlVerification class"""

        # Initialize members of the class
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        if primary_line is not APIHelper.SKIP:
            self.primary_line = primary_line 
        if secondary_line is not APIHelper.SKIP:
            self.secondary_line = secondary_line 
        if id is not APIHelper.SKIP:
            self.id = id 
        if last_line is not APIHelper.SKIP:
            self.last_line = last_line 
        if country is not APIHelper.SKIP:
            self.country = country 
        if coverage is not APIHelper.SKIP:
            self.coverage = coverage 
        if deliverability is not APIHelper.SKIP:
            self.deliverability = deliverability 
        if status is not APIHelper.SKIP:
            self.status = status 
        if components is not APIHelper.SKIP:
            self.components = components 
        if object is not APIHelper.SKIP:
            self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        recipient = dictionary.get("recipient") if "recipient" in dictionary.keys() else APIHelper.SKIP
        primary_line = dictionary.get("primary_line") if dictionary.get("primary_line") else APIHelper.SKIP
        secondary_line = dictionary.get("secondary_line") if dictionary.get("secondary_line") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        last_line = dictionary.get("last_line") if dictionary.get("last_line") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        coverage = dictionary.get("coverage") if dictionary.get("coverage") else APIHelper.SKIP
        deliverability = dictionary.get("deliverability") if dictionary.get("deliverability") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        components = Components1.from_dictionary(dictionary.get('components')) if 'components' in dictionary.keys() else APIHelper.SKIP
        object = dictionary.get("object") if dictionary.get("object") else APIHelper.SKIP
        # Return an object of this model
        return cls(recipient,
                   primary_line,
                   secondary_line,
                   id,
                   last_line,
                   country,
                   coverage,
                   deliverability,
                   status,
                   components,
                   object)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
