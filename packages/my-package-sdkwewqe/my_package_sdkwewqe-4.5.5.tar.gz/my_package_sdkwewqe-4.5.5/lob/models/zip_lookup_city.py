# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ZipLookupCity(object):

    """Implementation of the 'zip_lookup_city' model.

    TODO: type model description here.

    Attributes:
        city (str): TODO: type description here.
        state (str): The <a href="https://en.wikipedia.org/wiki/ISO_3166-2"
            target="_blank">ISO 3166-2</a> two letter code for the state.
        county (str): County name of the address city.
        county_fips (str): A 5-digit <a
            href="https://en.wikipedia.org/wiki/FIPS_county_code"
            target="_blank">FIPS county code</a> which uniquely identifies
            `components[county]`. It consists of a 2-digit state code and a
            3-digit county code.
        preferred (bool): Indicates whether or not the city is the <a
            href="https://en.wikipedia.org/wiki/ZIP_Code#ZIP_Codes_and_previous
            _zoning_lines" target="_blank">USPS default city</a> (preferred
            city) of a ZIP code. There is only one preferred city per ZIP
            code, which will always be in position 0 in the array of cities.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "city": 'city',
        "state": 'state',
        "county": 'county',
        "county_fips": 'county_fips',
        "preferred": 'preferred'
    }

    def __init__(self,
                 city=None,
                 state=None,
                 county=None,
                 county_fips=None,
                 preferred=None):
        """Constructor for the ZipLookupCity class"""

        # Initialize members of the class
        self.city = city 
        self.state = state 
        self.county = county 
        self.county_fips = county_fips 
        self.preferred = preferred 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        county = dictionary.get("county") if dictionary.get("county") else None
        county_fips = dictionary.get("county_fips") if dictionary.get("county_fips") else None
        preferred = dictionary.get("preferred") if "preferred" in dictionary.keys() else None
        # Return an object of this model
        return cls(city,
                   state,
                   county,
                   county_fips,
                   preferred)
