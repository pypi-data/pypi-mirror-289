# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class TemplateVersion(object):

    """Implementation of the 'template_version' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        html (str): An HTML string of less than 100,000 characters to be used
            as the `published_version` of this template. See
            [here](#section/HTML-Examples) for guidance on designing HTML
            templates. Please see endpoint specific documentation for any
            other product-specific HTML details: -
            [Postcards](#operation/postcard_create) - `front` and `back` -
            [Self Mailers](#operation/self_mailer_create) - `inside` and
            `outside` - [Letters](#operation/letter_create) - `file` -
            [Checks](#operation/check_create) - `check_bottom` and
            `attachment` - [Cards](#operation/card_create) - `front` and
            `back`  If there is a syntax error with your variable names within
            your HTML, then an error will be thrown, e.g. using a `{{#users}}`
            opening tag without the corresponding closing tag `{{/users}}`.
        engine (object): TODO: type description here.
        required_vars (List[str]): An array of required variables to be used
            in a template. Only available for `handlebars` templates.
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        date_modified (datetime): A timestamp in ISO 8601 format of the date
            the resource was last modified.
        deleted (bool): Only returned if the resource has been successfully
            deleted.
        object (str): Value is resource type.
        id (str): Unique identifier prefixed with `vrsn_`.
        suggest_json_editor (bool): Used by frontend, true if the template
            uses advanced features.
        merge_variables (object): Object representing the keys of every merge
            variable present in the template. It has one key named 'keys', and
            its value is an array of strings.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "html": 'html',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "object": 'object',
        "id": 'id',
        "description": 'description',
        "engine": 'engine',
        "required_vars": 'required_vars',
        "deleted": 'deleted',
        "suggest_json_editor": 'suggest_json_editor',
        "merge_variables": 'merge_variables'
    }

    _optionals = [
        'description',
        'engine',
        'required_vars',
        'deleted',
        'suggest_json_editor',
        'merge_variables',
    ]

    _nullables = [
        'description',
    ]

    def __init__(self,
                 html=None,
                 date_created=None,
                 date_modified=None,
                 id=None,
                 description=APIHelper.SKIP,
                 engine=APIHelper.SKIP,
                 required_vars=APIHelper.SKIP,
                 deleted=APIHelper.SKIP,
                 suggest_json_editor=APIHelper.SKIP,
                 merge_variables=APIHelper.SKIP):
        """Constructor for the TemplateVersion class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        self.html = html 
        if engine is not APIHelper.SKIP:
            self.engine = engine 
        if required_vars is not APIHelper.SKIP:
            self.required_vars = required_vars 
        self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        self.date_modified = APIHelper.apply_datetime_converter(date_modified, APIHelper.RFC3339DateTime) if date_modified else None 
        if deleted is not APIHelper.SKIP:
            self.deleted = deleted 
        self.object = 'version' 
        self.id = id 
        if suggest_json_editor is not APIHelper.SKIP:
            self.suggest_json_editor = suggest_json_editor 
        if merge_variables is not APIHelper.SKIP:
            self.merge_variables = merge_variables 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        html = dictionary.get("html") if dictionary.get("html") else None
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        date_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_modified")).datetime if dictionary.get("date_modified") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        engine = dictionary.get("engine") if dictionary.get("engine") else APIHelper.SKIP
        required_vars = dictionary.get("required_vars") if dictionary.get("required_vars") else APIHelper.SKIP
        deleted = dictionary.get("deleted") if "deleted" in dictionary.keys() else APIHelper.SKIP
        suggest_json_editor = dictionary.get("suggest_json_editor") if "suggest_json_editor" in dictionary.keys() else APIHelper.SKIP
        merge_variables = dictionary.get("merge_variables") if dictionary.get("merge_variables") else APIHelper.SKIP
        # Return an object of this model
        return cls(html,
                   date_created,
                   date_modified,
                   id,
                   description,
                   engine,
                   required_vars,
                   deleted,
                   suggest_json_editor,
                   merge_variables)
