# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from lob.api_helper import APIHelper
from lob.models.address_us import AddressUs
from lob.models.bank_account import BankAccount
from lob.models.thumbnail import Thumbnail
from lob.models.to_address_us_chk import ToAddressUsChk
from lob.models.tracking_event_normal import TrackingEventNormal


class Check(object):

    """Implementation of the 'check' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.
        merge_variables (object): You can input a merge variable payload
            object to your template to render dynamic content. For example, if
            you have a template like: `{{variable_name}}`, pass in
            `{"variable_name": "Harry"}` to render `Harry`. `merge_variables`
            must be an object. Any type of value is accepted as long as the
            object is valid JSON; you can use `strings`, `numbers`,
            `booleans`, `arrays`, `objects`, or `null`. The max length of the
            object is 25,000 characters. If you call `JSON.stringify` on your
            object, it can be no longer than 25,000 characters. Your variable
            names cannot contain any whitespace or any of the following
            special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`,
            `+`, `,`, `/`, `;`, `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` `
            ``, `{`, `|`, `}`, `~`. More instructions can be found in <a
            href="https://help.lob.com/print-and-mail/designing-mail-creatives/
            dynamic-personalization#using-html-and-merge-variables-10"
            target="_blank">our guide to using html and merge variables</a>.
            Depending on your <a
            href="https://dashboard.lob.com/#/settings/account"
            target="_blank">Merge Variable strictness</a> setting, if you
            define variables in your HTML but do not pass them here, you will
            either receive an error or the variable will render as an empty
            string.
        send_date (object): TODO: type description here.
        mail_type (MailType2Enum): TODO: type description here.
        memo (str): Text to include on the memo line of the check.
        check_number (int): An integer that designates the check number. If
            `check_number` is not provided, checks created from a new
            `bank_account` will start at `10000` and increment with each check
            created with the `bank_account`. A provided `check_number`
            overrides the defaults. Subsequent checks created with the same
            `bank_account` will increment from the provided check number.
        message (str): Max of 400 characters to be included at the bottom of
            the check page.
        use_type (object): TODO: type description here.
        mfrom (AddressUs): TODO: type description here.
        id (str): Unique identifier prefixed with `chk_`.
        amount (float): The payment amount to be sent in US dollars.
        bank_account (BankAccount): TODO: type description here.
        check_bottom_template_id (str): TODO: type description here.
        attachment_template_id (str): TODO: type description here.
        check_bottom_template_version_id (str): TODO: type description here.
        attachment_template_version_id (str): TODO: type description here.
        url (str): A [signed link](#section/Asset-URLs) served over HTTPS. The
            link returned will expire in 30 days to prevent mis-sharing. Each
            time a GET request is initiated, a new signed URL will be
            generated.
        to (ToAddressUsChk): TODO: type description here.
        carrier (str): TODO: type description here.
        thumbnails (List[Thumbnail]): TODO: type description here.
        expected_delivery_date (date): A date in YYYY-MM-DD format of the
            mailpiece's expected delivery date based on its `send_date`.
        tracking_events (List[TrackingEventNormal]): An array of
            tracking_event objects ordered by ascending `time`. Will not be
            populated for checks created in test mode.
        status (ThestatusofthebuckslipEnum): TODO: type description here.
        failure_reason (str): A string describing the reason for failure if
            the check failed to render.
        object (Object5Enum): TODO: type description here.
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        date_modified (datetime): A timestamp in ISO 8601 format of the date
            the resource was last modified.
        deleted (bool): Only returned if the resource has been successfully
            deleted.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "use_type": 'use_type',
        "id": 'id',
        "amount": 'amount',
        "bank_account": 'bank_account',
        "url": 'url',
        "to": 'to',
        "carrier": 'carrier',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "description": 'description',
        "metadata": 'metadata',
        "merge_variables": 'merge_variables',
        "send_date": 'send_date',
        "mail_type": 'mail_type',
        "memo": 'memo',
        "check_number": 'check_number',
        "message": 'message',
        "mfrom": 'from',
        "check_bottom_template_id": 'check_bottom_template_id',
        "attachment_template_id": 'attachment_template_id',
        "check_bottom_template_version_id": 'check_bottom_template_version_id',
        "attachment_template_version_id": 'attachment_template_version_id',
        "thumbnails": 'thumbnails',
        "expected_delivery_date": 'expected_delivery_date',
        "tracking_events": 'tracking_events',
        "status": 'status',
        "failure_reason": 'failure_reason',
        "object": 'object',
        "deleted": 'deleted'
    }

    _optionals = [
        'description',
        'metadata',
        'merge_variables',
        'send_date',
        'mail_type',
        'memo',
        'check_number',
        'message',
        'mfrom',
        'check_bottom_template_id',
        'attachment_template_id',
        'check_bottom_template_version_id',
        'attachment_template_version_id',
        'thumbnails',
        'expected_delivery_date',
        'tracking_events',
        'status',
        'failure_reason',
        'object',
        'deleted',
    ]

    _nullables = [
        'description',
        'merge_variables',
        'memo',
        'tracking_events',
        'failure_reason',
    ]

    def __init__(self,
                 use_type=None,
                 id=None,
                 amount=None,
                 bank_account=None,
                 url=None,
                 to=None,
                 date_created=None,
                 date_modified=None,
                 description=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 merge_variables=APIHelper.SKIP,
                 send_date=APIHelper.SKIP,
                 mail_type=APIHelper.SKIP,
                 memo=APIHelper.SKIP,
                 check_number=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 mfrom=APIHelper.SKIP,
                 check_bottom_template_id=APIHelper.SKIP,
                 attachment_template_id=APIHelper.SKIP,
                 check_bottom_template_version_id=APIHelper.SKIP,
                 attachment_template_version_id=APIHelper.SKIP,
                 thumbnails=APIHelper.SKIP,
                 expected_delivery_date=APIHelper.SKIP,
                 tracking_events=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 failure_reason=APIHelper.SKIP,
                 object=APIHelper.SKIP,
                 deleted=APIHelper.SKIP):
        """Constructor for the Check class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if merge_variables is not APIHelper.SKIP:
            self.merge_variables = merge_variables 
        if send_date is not APIHelper.SKIP:
            self.send_date = send_date 
        if mail_type is not APIHelper.SKIP:
            self.mail_type = mail_type 
        if memo is not APIHelper.SKIP:
            self.memo = memo 
        if check_number is not APIHelper.SKIP:
            self.check_number = check_number 
        if message is not APIHelper.SKIP:
            self.message = message 
        self.use_type = use_type 
        if mfrom is not APIHelper.SKIP:
            self.mfrom = mfrom 
        self.id = id 
        self.amount = amount 
        self.bank_account = bank_account 
        if check_bottom_template_id is not APIHelper.SKIP:
            self.check_bottom_template_id = check_bottom_template_id 
        if attachment_template_id is not APIHelper.SKIP:
            self.attachment_template_id = attachment_template_id 
        if check_bottom_template_version_id is not APIHelper.SKIP:
            self.check_bottom_template_version_id = check_bottom_template_version_id 
        if attachment_template_version_id is not APIHelper.SKIP:
            self.attachment_template_version_id = attachment_template_version_id 
        self.url = url 
        self.to = to 
        self.carrier = 'USPS' 
        if thumbnails is not APIHelper.SKIP:
            self.thumbnails = thumbnails 
        if expected_delivery_date is not APIHelper.SKIP:
            self.expected_delivery_date = expected_delivery_date 
        if tracking_events is not APIHelper.SKIP:
            self.tracking_events = tracking_events 
        if status is not APIHelper.SKIP:
            self.status = status 
        if failure_reason is not APIHelper.SKIP:
            self.failure_reason = failure_reason 
        if object is not APIHelper.SKIP:
            self.object = object 
        self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        self.date_modified = APIHelper.apply_datetime_converter(date_modified, APIHelper.RFC3339DateTime) if date_modified else None 
        if deleted is not APIHelper.SKIP:
            self.deleted = deleted 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        use_type = dictionary.get("use_type") if dictionary.get("use_type") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        amount = dictionary.get("amount") if dictionary.get("amount") else None
        bank_account = BankAccount.from_dictionary(dictionary.get('bank_account')) if dictionary.get('bank_account') else None
        url = dictionary.get("url") if dictionary.get("url") else None
        to = ToAddressUsChk.from_dictionary(dictionary.get('to')) if dictionary.get('to') else None
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        date_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_modified")).datetime if dictionary.get("date_modified") else None
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        merge_variables = dictionary.get("merge_variables") if "merge_variables" in dictionary.keys() else APIHelper.SKIP
        send_date = dictionary.get("send_date") if dictionary.get("send_date") else APIHelper.SKIP
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else APIHelper.SKIP
        memo = dictionary.get("memo") if "memo" in dictionary.keys() else APIHelper.SKIP
        check_number = dictionary.get("check_number") if dictionary.get("check_number") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        mfrom = AddressUs.from_dictionary(dictionary.get('from')) if 'from' in dictionary.keys() else APIHelper.SKIP
        check_bottom_template_id = dictionary.get("check_bottom_template_id") if dictionary.get("check_bottom_template_id") else APIHelper.SKIP
        attachment_template_id = dictionary.get("attachment_template_id") if dictionary.get("attachment_template_id") else APIHelper.SKIP
        check_bottom_template_version_id = dictionary.get("check_bottom_template_version_id") if dictionary.get("check_bottom_template_version_id") else APIHelper.SKIP
        attachment_template_version_id = dictionary.get("attachment_template_version_id") if dictionary.get("attachment_template_version_id") else APIHelper.SKIP
        thumbnails = None
        if dictionary.get('thumbnails') is not None:
            thumbnails = [Thumbnail.from_dictionary(x) for x in dictionary.get('thumbnails')]
        else:
            thumbnails = APIHelper.SKIP
        expected_delivery_date = dateutil.parser.parse(dictionary.get('expected_delivery_date')).date() if dictionary.get('expected_delivery_date') else APIHelper.SKIP
        if 'tracking_events' in dictionary.keys():
            tracking_events = [TrackingEventNormal.from_dictionary(x) for x in dictionary.get('tracking_events')] if dictionary.get('tracking_events') else None
        else:
            tracking_events = APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        failure_reason = dictionary.get("failure_reason") if "failure_reason" in dictionary.keys() else APIHelper.SKIP
        object = dictionary.get("object") if dictionary.get("object") else APIHelper.SKIP
        deleted = dictionary.get("deleted") if "deleted" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(use_type,
                   id,
                   amount,
                   bank_account,
                   url,
                   to,
                   date_created,
                   date_modified,
                   description,
                   metadata,
                   merge_variables,
                   send_date,
                   mail_type,
                   memo,
                   check_number,
                   message,
                   mfrom,
                   check_bottom_template_id,
                   attachment_template_id,
                   check_bottom_template_version_id,
                   attachment_template_version_id,
                   thumbnails,
                   expected_delivery_date,
                   tracking_events,
                   status,
                   failure_reason,
                   object,
                   deleted)
