# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.event_type import EventType


class Events(object):

    """Implementation of the 'events' model.

    TODO: type model description here.

    Attributes:
        id (str): Unique identifier prefixed with `evt_`.
        body (object): The body of the associated resource as they were at the
            time of the event, i.e. the [postcard
            object](#operation/postcard_retrieve), [the letter
            object](#operation/letter_retrieve), [the check
            object](#operation/check_retrieve), [the address
            object](#operation/address_retrieve), or [the bank account
            object](#operation/bank_account_retrieve). For `.deleted` events,
            the body matches the response for the corresponding delete
            endpoint for that resource (e.g. the [postcard delete
            response](#operation/postcard_delete)).
        reference_id (str): Unique identifier of the related resource for the
            event.
        event_type (EventType): TODO: type description here.
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        object (str): Value is resource type.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "body": 'body',
        "reference_id": 'reference_id',
        "event_type": 'event_type',
        "date_created": 'date_created',
        "object": 'object'
    }

    def __init__(self,
                 id=None,
                 body=None,
                 reference_id=None,
                 event_type=None,
                 date_created=None):
        """Constructor for the Events class"""

        # Initialize members of the class
        self.id = id 
        self.body = body 
        self.reference_id = reference_id 
        self.event_type = event_type 
        self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        self.object = 'event' 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        body = dictionary.get("body") if dictionary.get("body") else None
        reference_id = dictionary.get("reference_id") if dictionary.get("reference_id") else None
        event_type = EventType.from_dictionary(dictionary.get('event_type')) if dictionary.get('event_type') else None
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        # Return an object of this model
        return cls(id,
                   body,
                   reference_id,
                   event_type,
                   date_created)
