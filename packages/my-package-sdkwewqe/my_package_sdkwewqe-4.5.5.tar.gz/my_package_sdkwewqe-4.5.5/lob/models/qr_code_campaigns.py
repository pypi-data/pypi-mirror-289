# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class QrCodeCampaigns(object):

    """Implementation of the 'qr_code_campaigns' model.

    Customize and place a QR code on all the postcards, letters or self
    mailers in a campaign. Redirect URLs can either be unique for each
    recipient, or a single link can be used for the whole campaign. See
    `redirect_url` attribute below for more details.

    Attributes:
        position (str): Sets how a QR code is being positioned in the
            document. Together with this, you should provide one of 'top' or
            'bottom', and one of 'left' or 'right'.
        top (str): Vertical distance (in inches) to place QR code from the
            top. Only allowed if "bottom" isn't provided.
        right (str): Horizonal distance (in inches) to place QR code from the
            right. Only allowed if "left" isn't provided.
        left (str): Horizonal distance (in inches) to place QR code from the
            left. Only allowed if "right" isn't provided.
        bottom (str): Vertical distance (in inches) to place QR code from the
            bottom. Only allowed if "top" isn't provided.
        redirect_url (str | None): Redirect all mail recipients to either a
            single URL or a custom personalized URL for each recipient.  To
            redirect to a single URL for the whole campaign, add a
            `redirect_url` in the request body along with the url as string.
            To redirect to a custom URL for each recipient, do not provide any
            value for `redirect_url`. Instead, create an extra column in the
            [audience
            file](https://help.lob.com/print-and-mail/building-a-mail-strategy/
            campaign-or-triggered-sends/campaign-audience-guide) with a unique
            link against each address row and while creating an upload, map
            `qr_code_redirect_url` to this column. If the QR code section is
            used but a redirection url is not provided or mapped while
            creating an upload, then there might be failures in creating
            individual mail pieces.
        width (str): The size (in inches) of the QR code with a minimum of 1
            inch. All QR codes are generated as a square.
        pages (str): Specify the pages where the QR code should be stamped in
            a comma separated format. Your QR code can be printed in the same
            position on multiple pages. For postcards, the values should
            either be "front", "back" (for either front or back) or
            "front,back" (for the QR code to be printed on both sides). For
            self-mailers, the values should either be "inside", "outside" (for
            either inside or outside) or "inside,outside" (for the QR code to
            be printed on both sides). For letters, the values can be specific
            page numbers ("1", "3"), page number ranges such as "1-3", or a
            comma separated combination of both ("1,3,5-7").

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "position": 'position',
        "width": 'width',
        "top": 'top',
        "right": 'right',
        "left": 'left',
        "bottom": 'bottom',
        "redirect_url": 'redirect_url',
        "pages": 'pages'
    }

    _optionals = [
        'top',
        'right',
        'left',
        'bottom',
        'redirect_url',
        'pages',
    ]

    def __init__(self,
                 width=None,
                 top=APIHelper.SKIP,
                 right=APIHelper.SKIP,
                 left=APIHelper.SKIP,
                 bottom=APIHelper.SKIP,
                 redirect_url=APIHelper.SKIP,
                 pages=APIHelper.SKIP):
        """Constructor for the QrCodeCampaigns class"""

        # Initialize members of the class
        self.position = 'relative' 
        if top is not APIHelper.SKIP:
            self.top = top 
        if right is not APIHelper.SKIP:
            self.right = right 
        if left is not APIHelper.SKIP:
            self.left = left 
        if bottom is not APIHelper.SKIP:
            self.bottom = bottom 
        if redirect_url is not APIHelper.SKIP:
            self.redirect_url = redirect_url 
        self.width = width 
        if pages is not APIHelper.SKIP:
            self.pages = pages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from lob.utilities.union_type_lookup import UnionTypeLookUp

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        width = dictionary.get("width") if dictionary.get("width") else None
        top = dictionary.get("top") if dictionary.get("top") else APIHelper.SKIP
        right = dictionary.get("right") if dictionary.get("right") else APIHelper.SKIP
        left = dictionary.get("left") if dictionary.get("left") else APIHelper.SKIP
        bottom = dictionary.get("bottom") if dictionary.get("bottom") else APIHelper.SKIP
        redirect_url = APIHelper.deserialize_union_type(UnionTypeLookUp.get('QrCodeCampaignsRedirectUrl'), dictionary.get('redirect_url'), False) if dictionary.get('redirect_url') is not None else APIHelper.SKIP
        pages = dictionary.get("pages") if dictionary.get("pages") else APIHelper.SKIP
        # Return an object of this model
        return cls(width,
                   top,
                   right,
                   left,
                   bottom,
                   redirect_url,
                   pages)
