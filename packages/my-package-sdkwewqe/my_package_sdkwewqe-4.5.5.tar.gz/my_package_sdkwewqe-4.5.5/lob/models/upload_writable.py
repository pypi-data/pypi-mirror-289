# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.metadata_1 import Metadata1
from lob.models.optional_address_column_mapping import OptionalAddressColumnMapping
from lob.models.required_address_column_mapping import RequiredAddressColumnMapping


class UploadWritable(object):

    """Implementation of the 'upload_writable' model.

    TODO: type model description here.

    Attributes:
        campaign_id (str): TODO: type description here.
        required_address_column_mapping (RequiredAddressColumnMapping): TODO:
            type description here.
        optional_address_column_mapping (OptionalAddressColumnMapping): TODO:
            type description here.
        metadata (Metadata1): TODO: type description here.
        merge_variable_column_mapping (object): The mapping of column headers
            in your file to the merge variables present in your creative. See
            our <a
            href="https://help.lob.com/print-and-mail/building-a-mail-strategy/
            campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merg
            e-variable-data-if-applicable-7" target="_blank">Campaign Audience
            Guide</a> for additional details. <br />If a merge variable has
            the same "name" as a "key" in the `requiredAddressColumnMapping`
            or `optionalAddressColumnMapping` objects, then they **CANNOT**
            have a different value in this object. If a different value is
            provided, then when the campaign is processing it will get
            overwritten with the mapped value present in the
            `requiredAddressColumnMapping` or `optionalAddressColumnMapping`
            objects. If using customized QR code redirect from the Audience
            file, then a `qr_code_redirect_url` must be mapped to the column
            header as used in the CSV.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "campaign_id": 'campaignId',
        "required_address_column_mapping": 'requiredAddressColumnMapping',
        "optional_address_column_mapping": 'optionalAddressColumnMapping',
        "metadata": 'metadata',
        "merge_variable_column_mapping": 'mergeVariableColumnMapping'
    }

    _optionals = [
        'required_address_column_mapping',
        'optional_address_column_mapping',
        'metadata',
        'merge_variable_column_mapping',
    ]

    _nullables = [
        'merge_variable_column_mapping',
    ]

    def __init__(self,
                 campaign_id=None,
                 required_address_column_mapping=APIHelper.SKIP,
                 optional_address_column_mapping=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 merge_variable_column_mapping=APIHelper.SKIP):
        """Constructor for the UploadWritable class"""

        # Initialize members of the class
        self.campaign_id = campaign_id 
        if required_address_column_mapping is not APIHelper.SKIP:
            self.required_address_column_mapping = required_address_column_mapping 
        if optional_address_column_mapping is not APIHelper.SKIP:
            self.optional_address_column_mapping = optional_address_column_mapping 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if merge_variable_column_mapping is not APIHelper.SKIP:
            self.merge_variable_column_mapping = merge_variable_column_mapping 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        campaign_id = dictionary.get("campaignId") if dictionary.get("campaignId") else None
        required_address_column_mapping = RequiredAddressColumnMapping.from_dictionary(dictionary.get('requiredAddressColumnMapping')) if 'requiredAddressColumnMapping' in dictionary.keys() else APIHelper.SKIP
        optional_address_column_mapping = OptionalAddressColumnMapping.from_dictionary(dictionary.get('optionalAddressColumnMapping')) if 'optionalAddressColumnMapping' in dictionary.keys() else APIHelper.SKIP
        metadata = Metadata1.from_dictionary(dictionary.get('metadata')) if 'metadata' in dictionary.keys() else APIHelper.SKIP
        merge_variable_column_mapping = dictionary.get("mergeVariableColumnMapping") if "mergeVariableColumnMapping" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(campaign_id,
                   required_address_column_mapping,
                   optional_address_column_mapping,
                   metadata,
                   merge_variable_column_mapping)
