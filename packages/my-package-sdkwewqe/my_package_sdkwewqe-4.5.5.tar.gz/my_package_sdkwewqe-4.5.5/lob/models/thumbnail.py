# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class Thumbnail(object):

    """Implementation of the 'thumbnail' model.

    TODO: type model description here.

    Attributes:
        small (str): A [signed link](#section/Asset-URLs) served over HTTPS.
            The link returned will expire in 30 days to prevent mis-sharing.
            Each time a GET request is initiated, a new signed URL will be
            generated.
        medium (str): A [signed link](#section/Asset-URLs) served over HTTPS.
            The link returned will expire in 30 days to prevent mis-sharing.
            Each time a GET request is initiated, a new signed URL will be
            generated.
        large (str): A [signed link](#section/Asset-URLs) served over HTTPS.
            The link returned will expire in 30 days to prevent mis-sharing.
            Each time a GET request is initiated, a new signed URL will be
            generated.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "small": 'small',
        "medium": 'medium',
        "large": 'large'
    }

    _optionals = [
        'small',
        'medium',
        'large',
    ]

    def __init__(self,
                 small=APIHelper.SKIP,
                 medium=APIHelper.SKIP,
                 large=APIHelper.SKIP):
        """Constructor for the Thumbnail class"""

        # Initialize members of the class
        if small is not APIHelper.SKIP:
            self.small = small 
        if medium is not APIHelper.SKIP:
            self.medium = medium 
        if large is not APIHelper.SKIP:
            self.large = large 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        small = dictionary.get("small") if dictionary.get("small") else APIHelper.SKIP
        medium = dictionary.get("medium") if dictionary.get("medium") else APIHelper.SKIP
        large = dictionary.get("large") if dictionary.get("large") else APIHelper.SKIP
        # Return an object of this model
        return cls(small,
                   medium,
                   large)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True
