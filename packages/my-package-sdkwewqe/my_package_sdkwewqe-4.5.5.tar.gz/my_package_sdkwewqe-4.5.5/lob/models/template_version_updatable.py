# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class TemplateVersionUpdatable(object):

    """Implementation of the 'template_version_updatable' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        engine (object): TODO: type description here.
        required_vars (List[str]): An array of required variables to be used
            in a template. Only available for `handlebars` templates.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "engine": 'engine',
        "required_vars": 'required_vars'
    }

    _optionals = [
        'description',
        'engine',
        'required_vars',
    ]

    _nullables = [
        'description',
    ]

    def __init__(self,
                 description=APIHelper.SKIP,
                 engine=APIHelper.SKIP,
                 required_vars=APIHelper.SKIP):
        """Constructor for the TemplateVersionUpdatable class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if engine is not APIHelper.SKIP:
            self.engine = engine 
        if required_vars is not APIHelper.SKIP:
            self.required_vars = required_vars 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        engine = dictionary.get("engine") if dictionary.get("engine") else APIHelper.SKIP
        required_vars = dictionary.get("required_vars") if dictionary.get("required_vars") else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   engine,
                   required_vars)
