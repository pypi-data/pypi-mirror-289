# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.components_3 import Components3
from lob.models.location_analysis_1 import LocationAnalysis1


class Addresses(object):

    """Implementation of the 'addresses' model.

    TODO: type model description here.

    Attributes:
        components (Components3): TODO: type description here.
        location_analysis (LocationAnalysis1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "components": 'components',
        "location_analysis": 'location_analysis'
    }

    _optionals = [
        'components',
        'location_analysis',
    ]

    def __init__(self,
                 components=APIHelper.SKIP,
                 location_analysis=APIHelper.SKIP):
        """Constructor for the Addresses class"""

        # Initialize members of the class
        if components is not APIHelper.SKIP:
            self.components = components 
        if location_analysis is not APIHelper.SKIP:
            self.location_analysis = location_analysis 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        components = Components3.from_dictionary(dictionary.get('components')) if 'components' in dictionary.keys() else APIHelper.SKIP
        location_analysis = LocationAnalysis1.from_dictionary(dictionary.get('location_analysis')) if 'location_analysis' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(components,
                   location_analysis)
