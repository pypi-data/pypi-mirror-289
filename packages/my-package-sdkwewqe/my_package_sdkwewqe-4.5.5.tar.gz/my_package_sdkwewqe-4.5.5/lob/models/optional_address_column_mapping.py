# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OptionalAddressColumnMapping(object):

    """Implementation of the 'OptionalAddressColumnMapping' model.

    TODO: type model description here.

    Attributes:
        address_line_2 (str): The column header from the csv file that should
            be mapped to the optional field "address_line2"
        company (str): The column header from the csv file that should be
            mapped to the optional field "company"
        address_country (str): The column header from the csv file that should
            be mapped to the optional field "address_country"

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address_line_2": 'address_line2',
        "company": 'company',
        "address_country": 'address_country'
    }

    _nullables = [
        'address_line_2',
        'company',
        'address_country',
    ]

    def __init__(self,
                 address_line_2=None,
                 company=None,
                 address_country=None):
        """Constructor for the OptionalAddressColumnMapping class"""

        # Initialize members of the class
        self.address_line_2 = address_line_2 
        self.company = company 
        self.address_country = address_country 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        address_line_2 = dictionary.get("address_line2") if dictionary.get("address_line2") else None
        company = dictionary.get("company") if dictionary.get("company") else None
        address_country = dictionary.get("address_country") if dictionary.get("address_country") else None
        # Return an object of this model
        return cls(address_line_2,
                   company,
                   address_country)
