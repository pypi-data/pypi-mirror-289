# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper


class BankAccount(object):

    """Implementation of the 'bank_account' model.

    TODO: type model description here.

    Attributes:
        description (str): An internal description that identifies this
            resource. Must be no longer than 255 characters.
        routing_number (str): Must be a <a
            href="https://www.frbservices.org/index.html"
            target="_blank">valid US routing number</a>.
        account_number (str): TODO: type description here.
        account_type (AccountTypeEnum): TODO: type description here.
        signatory (str): The signatory associated with your account. This name
            will be printed on checks created with this bank account. If you
            prefer to use a custom signature image on your checks instead,
            please create your bank account from the <a
            href="https://dashboard.lob.com/#/login"
            target="_blank">Dashboard</a>.
        check_template (CheckTemplateEnum): TODO: type description here.
        fractional_routing_number (str): The fractional routing number for
            your home bank account. Required for the `jpm` check template
            only. Please contact a bank representative if you do not know the
            fractional routing number associated with your home bank
            institution.
        city (str): The city associated with your home bank account. Required
            for the `jpm` check template only. Please contact a bank
            representative if you do not know the city associated with your
            home bank institution.
        state (str): The state associated with your home bank account.
            Required for the `jpm` check template only. Please contact a bank
            representative if you do not know the state associated with your
            home bank institution.
        zipcode (str): The zipcode associated with your home bank account.
            Required for the `jpm` check template only. Please contact a bank
            representative if you do not know the zipcode associated with your
            home bank institution.
        metadata (Dict[str, str]): Use metadata to store custom information
            for tagging and labeling back to your internal systems. Must be an
            object with up to 20 key-value pairs. Keys must be at most 40
            characters and values must be at most 500 characters. Neither can
            contain the characters `"` and `\`. i.e. '{"customer_id" :
            "NEWYORK2015"}' Nested objects are not supported.  See
            [Metadata](#section/Metadata) for more information.
        date_created (datetime): A timestamp in ISO 8601 format of the date
            the resource was created.
        date_modified (datetime): A timestamp in ISO 8601 format of the date
            the resource was last modified.
        deleted (bool): Only returned if the resource has been successfully
            deleted.
        object (str): Value is resource type.
        id (str): TODO: type description here.
        signature_url (str): TODO: type description here.
        bank_name (str): The name of the bank based on the provided routing
            number, e.g. `JPMORGAN CHASE BANK`.
        verified (bool): A bank account must be verified before a check can be
            created. More info [here](#operation/bank_account_verify).

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "routing_number": 'routing_number',
        "account_number": 'account_number',
        "account_type": 'account_type',
        "signatory": 'signatory',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "object": 'object',
        "id": 'id',
        "description": 'description',
        "check_template": 'check_template',
        "fractional_routing_number": 'fractional_routing_number',
        "city": 'city',
        "state": 'state',
        "zipcode": 'zipcode',
        "metadata": 'metadata',
        "deleted": 'deleted',
        "signature_url": 'signature_url',
        "bank_name": 'bank_name',
        "verified": 'verified'
    }

    _optionals = [
        'description',
        'check_template',
        'fractional_routing_number',
        'city',
        'state',
        'zipcode',
        'metadata',
        'deleted',
        'signature_url',
        'bank_name',
        'verified',
    ]

    _nullables = [
        'description',
        'signature_url',
    ]

    def __init__(self,
                 routing_number=None,
                 account_number=None,
                 account_type=None,
                 signatory=None,
                 date_created=None,
                 date_modified=None,
                 id=None,
                 description=APIHelper.SKIP,
                 check_template=APIHelper.SKIP,
                 fractional_routing_number=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 zipcode=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 deleted=APIHelper.SKIP,
                 signature_url=APIHelper.SKIP,
                 bank_name=APIHelper.SKIP,
                 verified=False):
        """Constructor for the BankAccount class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        self.routing_number = routing_number 
        self.account_number = account_number 
        self.account_type = account_type 
        self.signatory = signatory 
        if check_template is not APIHelper.SKIP:
            self.check_template = check_template 
        if fractional_routing_number is not APIHelper.SKIP:
            self.fractional_routing_number = fractional_routing_number 
        if city is not APIHelper.SKIP:
            self.city = city 
        if state is not APIHelper.SKIP:
            self.state = state 
        if zipcode is not APIHelper.SKIP:
            self.zipcode = zipcode 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        self.date_created = APIHelper.apply_datetime_converter(date_created, APIHelper.RFC3339DateTime) if date_created else None 
        self.date_modified = APIHelper.apply_datetime_converter(date_modified, APIHelper.RFC3339DateTime) if date_modified else None 
        if deleted is not APIHelper.SKIP:
            self.deleted = deleted 
        self.object = 'bank_account' 
        self.id = id 
        if signature_url is not APIHelper.SKIP:
            self.signature_url = signature_url 
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        self.verified = verified 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        routing_number = dictionary.get("routing_number") if dictionary.get("routing_number") else None
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else None
        account_type = dictionary.get("account_type") if dictionary.get("account_type") else None
        signatory = dictionary.get("signatory") if dictionary.get("signatory") else None
        date_created = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_created")).datetime if dictionary.get("date_created") else None
        date_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_modified")).datetime if dictionary.get("date_modified") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        check_template = dictionary.get("check_template") if dictionary.get("check_template") else APIHelper.SKIP
        fractional_routing_number = dictionary.get("fractional_routing_number") if dictionary.get("fractional_routing_number") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        zipcode = dictionary.get("zipcode") if dictionary.get("zipcode") else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        deleted = dictionary.get("deleted") if "deleted" in dictionary.keys() else APIHelper.SKIP
        signature_url = dictionary.get("signature_url") if "signature_url" in dictionary.keys() else APIHelper.SKIP
        bank_name = dictionary.get("bank_name") if dictionary.get("bank_name") else APIHelper.SKIP
        verified = dictionary.get("verified") if dictionary.get("verified") else False
        # Return an object of this model
        return cls(routing_number,
                   account_number,
                   account_type,
                   signatory,
                   date_created,
                   date_modified,
                   id,
                   description,
                   check_template,
                   fractional_routing_number,
                   city,
                   state,
                   zipcode,
                   metadata,
                   deleted,
                   signature_url,
                   bank_name,
                   verified)
