# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.suggestions import Suggestions


class UsAutocompletions(object):

    """Implementation of the 'us_autocompletions' model.

    TODO: type model description here.

    Attributes:
        id (str): Unique identifier prefixed with `us_auto_`.
        suggestions (List[Suggestions]): An array of objects representing
            suggested addresses.
        object (Object13Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "suggestions": 'suggestions',
        "object": 'object'
    }

    _optionals = [
        'id',
        'suggestions',
        'object',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 suggestions=APIHelper.SKIP,
                 object=APIHelper.SKIP):
        """Constructor for the UsAutocompletions class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if suggestions is not APIHelper.SKIP:
            self.suggestions = suggestions 
        if object is not APIHelper.SKIP:
            self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        suggestions = None
        if dictionary.get('suggestions') is not None:
            suggestions = [Suggestions.from_dictionary(x) for x in dictionary.get('suggestions')]
        else:
            suggestions = APIHelper.SKIP
        object = dictionary.get("object") if dictionary.get("object") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   suggestions,
                   object)
