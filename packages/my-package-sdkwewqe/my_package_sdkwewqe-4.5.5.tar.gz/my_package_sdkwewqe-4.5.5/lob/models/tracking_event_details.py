# -*- coding: utf-8 -*-

"""
lob

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lob.api_helper import APIHelper
from lob.models.event_enum import EventEnum


class TrackingEventDetails(object):

    """Implementation of the 'tracking_event_details' model.

    TODO: type model description here.

    Attributes:
        event (EventEnum): TODO: type description here.
        description (str): The description as listed in the description for
            event.
        notes (str): Event-specific notes from USPS about the tracking event.
        action_required (bool): `true` if action is required by the end
            recipient, `false` otherwise.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "event": 'event',
        "description": 'description',
        "action_required": 'action_required',
        "notes": 'notes'
    }

    _optionals = [
        'notes',
    ]

    def __init__(self,
                 event=None,
                 description=None,
                 action_required=None,
                 notes=APIHelper.SKIP):
        """Constructor for the TrackingEventDetails class"""

        # Initialize members of the class
        self.event = event 
        self.description = description 
        if notes is not APIHelper.SKIP:
            self.notes = notes 
        self.action_required = action_required 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        event = dictionary.get("event") if dictionary.get("event") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        action_required = dictionary.get("action_required") if "action_required" in dictionary.keys() else None
        notes = dictionary.get("notes") if dictionary.get("notes") else APIHelper.SKIP
        # Return an object of this model
        return cls(event,
                   description,
                   action_required,
                   notes)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.event,
                                           type_callable=lambda value: EventEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.description,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.action_required,
                                            type_callable=lambda value: isinstance(value, bool))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('event'),
                                       type_callable=lambda value: EventEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('description'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('action_required'),
                                        type_callable=lambda value: isinstance(value, bool))
