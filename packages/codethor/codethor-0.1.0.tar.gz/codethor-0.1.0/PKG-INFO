Metadata-Version: 2.1
Name: codethor
Version: 0.1.0
Summary: An AI enabled highly customizable copilot with agentic capabilities.
Author: M Nikhil Swami
Author-email: nikhilswami1@gmail.com
Requires-Python: >=3.11,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: anthropic (>=0.31.0,<0.32.0)
Requires-Dist: fastapi (>=0.111.0,<0.112.0)
Requires-Dist: ollama (>=0.2.1,<0.3.0)
Requires-Dist: openai (>=1.35.13,<2.0.0)
Requires-Dist: selectolax (>=0.3.21,<0.4.0)
Description-Content-Type: text/markdown

# README Documentation for the Codebase

## Table of Contents
1. [Introduction](#introduction)
2. [Core Library Analysis](#core-library-analysis)
    - [Modules](#modules)
    - [Classes](#classes)
    - [Functions](#functions)
3. [Component Breakdown](#component-breakdown)
4. [Import and Dependency Management](#import-and-dependency-management)
5. [API Documentation](#api-documentation)
6. [Parameter Analysis](#parameter-analysis)
7. [Usage Guidelines](#usage-guidelines)
8. [Installation and Setup](#installation-and-setup)
9. [Testing and Quality Assurance](#testing-and-quality- Assurance)
10. [Performance Considerations](#performance-considerations)
11. [Security Considerations](#security-considerations)
12. [Contribution Guidelines](#contribution-guidelines)
13. [Changelog and Version History](#changelog-and-version-history)
14. [License and Legal Information](#license-and-legal-information)
15. [Format and Structure](#format-and-structure)

## Introduction
This README serves as a comprehensive guide for developers, maintainers, and users of the codebase. It provides an in-depth analysis of the core library components, detailed documentation of each module, class, and function, and guidance on usage, installation, testing, and contribution.

## Core Library Analysis
### Modules
- **core.py**: The main module that initializes the CodeAgent class and handles the core functionalities such as database initialization, file addition, and codebase resolution.
- **utils**: A collection of utility modules including scraper, embedder, and tools, which provide supplementary functionalities like web scraping, embedding generation, and various tools.
- **apps**: Contains application-specific modules such as article_writer and quickintegrate_demo, demonstrating specific use cases of the codebase.
- **test**: Includes test modules and scripts to ensure the codebase functions as expected.

### Classes
- **CodeAgent**: The central class that manages the codebase, including initializing the database, adding files, and resolving code queries.
- **DebugLevel**: A class managing debug levels for output verbosity in different methods.

### Functions
- **create_file_tree**: Generates a string representation of the file tree.
- **prepend_summary**: Prepends a summary to a file's content.
- **add_files**: Adds or updates files in the specified collection.
- **rerank**: Reranks files based on a query.
- **resolve_codebase**: Resolves codebase queries using relevant context files.

## Component Breakdown
Each component within the codebase plays a crucial role in its functionality. The architecture follows a modular design pattern, allowing for easy expansion and maintenance. Key components include:
- **Database Management**: Handles the persistence and querying of data using ChromaDB.
- **Embedding Functions**: Utilizes various embedding models to process and understand text data.
- **Utility Tools**: Provides a range of tools for tasks such as web scraping, file scanning, and summarization.

## Import and Dependency Management
The codebase relies on several external libraries and packages. Key dependencies include:
- **ChromaDB**: For database management and querying.
- **OpenAI**: For utilizing GPT models.
- **Anthropic**: For accessing Claude models.
- **DeepSeek**: For advanced AI capabilities.

Managing dependencies involves using a virtual environment and a requirements.txt file. Update dependencies carefully to avoid compatibility issues.

## API Documentation
### CodeAgent Class
- **init_db(model_name)**: Initializes the database with a specified embedding model.
- **add_files(files, inject_summary, debug)**: Adds or updates files in the collection.
- **rerank(q, enhance_llm, nctx_files, debug)**: Reranks files based on a query.
- **resolve_codebase(q, system, enhance_llm, nctx_files, stream, debug)**: Resolves codebase queries using relevant context files.

## Parameter Analysis
### CodeAgent.add_files
- **files**: List of file paths to add or update.
- **inject_summary**: Boolean to determine if summaries should be injected.
- **debug**: Debug level for output verbosity.

### CodeAgent.rerank
- **q**: Query string.
- **enhance_llm**: Boolean to enhance LLM capabilities.
- **nctx_files**: Number of context files to consider.
- **debug**: Debug level for output verbosity.

## Usage Guidelines
### Basic Usage
1. Initialize the CodeAgent with the project path and other parameters.
2. Add files to the collection using `add_files`.
3. Query the codebase using `resolve_codebase`.

### Example
```python
agent = CodeAgent(path="path/to/project")
agent.add_files(files=["file1.py", "file2.py"])
result = agent.resolve_codebase(q="query string")
```

## Installation and Setup
### Prerequisites
- Python 3.7+
- ChromaDB
- OpenAI API Key

### Steps
1. Clone the repository.
2. Install dependencies using `pip install -r requirements.txt`.
3. Set up environment variables for API keys.

## Testing and Quality Assurance
The codebase includes various test modules and scripts. Run tests using `pytest` to ensure functionality. Contribute new tests to expand test coverage.

## Performance Considerations
Optimize performance by adjusting parameters such as chunk size in `add_files` and number of context files in `rerank`. Monitor performance using benchmarks and optimize as needed.

## Security Considerations
Ensure secure handling of API keys and sensitive data. Follow best practices for encryption and secure coding. Address known vulnerabilities promptly.

## Contribution Guidelines
Contribute by following the coding standards and style guidelines. Submit pull requests for review and engage in the code review process.

## Changelog and Version History
Maintain a detailed changelog in `CHANGELOG.md`. Highlight significant updates, breaking changes, and migration guides between versions.

## License and Legal Information
This project is licensed under the MIT License. See `LICENSE.md` for details. Attribute third-party libraries and resources appropriately.

## Format and Structure
This README utilizes markdown formatting for readability. Use headings, subheadings, tables, code blocks, and bullet points to organize information effectively. Include a table of contents for easy navigation.

---

This README provides a comprehensive guide to the codebase, ensuring developers, maintainers, and users have a clear understanding of its components, usage, and contribution guidelines.
