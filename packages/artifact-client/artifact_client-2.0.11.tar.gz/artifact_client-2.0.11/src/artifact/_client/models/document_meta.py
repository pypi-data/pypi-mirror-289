# coding: utf-8

"""
Artifact Client API

API for interacting with the Artifact Client.  # noqa: E501

OpenAPI spec version: 2.0.11

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
import pprint

import six


class DocumentMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "account_id": "str",
        "file_name": "str",
        "metadata": "object",
        "namespace": "str",
        "status": "str",
        "uuid": "str",
    }

    attribute_map = {
        "account_id": "account_id",
        "file_name": "file_name",
        "metadata": "metadata",
        "namespace": "namespace",
        "status": "status",
        "uuid": "uuid",
    }

    def __init__(self, account_id=None, file_name=None, metadata=None, namespace=None, status=None, uuid=None):  # noqa: E501
        """DocumentMeta - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._file_name = None
        self._metadata = None
        self._namespace = None
        self._status = None
        self._uuid = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if file_name is not None:
            self.file_name = file_name
        if metadata is not None:
            self.metadata = metadata
        if namespace is not None:
            self.namespace = namespace
        if status is not None:
            self.status = status
        if uuid is not None:
            self.uuid = uuid

    @property
    def account_id(self):
        """Gets the account_id of this DocumentMeta.  # noqa: E501


        :return: The account_id of this DocumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DocumentMeta.


        :param account_id: The account_id of this DocumentMeta.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def file_name(self):
        """Gets the file_name of this DocumentMeta.  # noqa: E501


        :return: The file_name of this DocumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DocumentMeta.


        :param file_name: The file_name of this DocumentMeta.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def metadata(self):
        """Gets the metadata of this DocumentMeta.  # noqa: E501


        :return: The metadata of this DocumentMeta.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DocumentMeta.


        :param metadata: The metadata of this DocumentMeta.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def namespace(self):
        """Gets the namespace of this DocumentMeta.  # noqa: E501


        :return: The namespace of this DocumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DocumentMeta.


        :param namespace: The namespace of this DocumentMeta.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def status(self):
        """Gets the status of this DocumentMeta.  # noqa: E501


        :return: The status of this DocumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentMeta.


        :param status: The status of this DocumentMeta.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this DocumentMeta.  # noqa: E501


        :return: The uuid of this DocumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DocumentMeta.


        :param uuid: The uuid of this DocumentMeta.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DocumentMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
