# coding: utf-8

"""
Artifact Client API

API for interacting with the Artifact Client.  # noqa: E501

OpenAPI spec version: 2.0.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_graph(self, body, **kwargs):  # noqa: E501
        """Create a new graph  # noqa: E501

        Creates a new graph with the specified name and indexing interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_graph(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGraphRequest body: (required)
        :return: Graph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_graph_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_graph_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_graph_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new graph  # noqa: E501

        Creates a new graph with the specified name and indexing interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_graph_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGraphRequest body: (required)
        :return: Graph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method create_graph" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError("Missing the required parameter `body` when calling `create_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Graph",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_all_graphs(self, **kwargs):  # noqa: E501
        """Deletes all graphs associated with organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_graphs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_all_graphs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_all_graphs_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_all_graphs_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes all graphs associated with organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_graphs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_all_graphs" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="int",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_graph(self, graph_id, **kwargs):  # noqa: E501
        """Delete a graph  # noqa: E501

        Deletes the specified graph within the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_graph(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def delete_graph_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Delete a graph  # noqa: E501

        Deletes the specified graph within the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_graph_with_http_info(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_graph" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `delete_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_graph(self, graph_id, **kwargs):  # noqa: E501
        """Retrieve a graph  # noqa: E501

        Returns the specified graph, if it's part of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: Graph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def get_graph_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Retrieve a graph  # noqa: E501

        Returns the specified graph, if it's part of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_with_http_info(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: Graph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_graph" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `get_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Graph",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_graph_documents_meta(self, graph_id, **kwargs):  # noqa: E501
        """Get graph documents meta  # noqa: E501

        Retrieves metadata for all documents that were ingested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_documents_meta(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: GraphDocumentsMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_graph_documents_meta_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_documents_meta_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def get_graph_documents_meta_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Get graph documents meta  # noqa: E501

        Retrieves metadata for all documents that were ingested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_documents_meta_with_http_info(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: GraphDocumentsMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_graph_documents_meta" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `get_graph_documents_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}/documents_meta",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GraphDocumentsMeta",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_graph_stats(self, graph_id, **kwargs):  # noqa: E501
        """Get graph statistics  # noqa: E501

        Retrieves statistics for the specified graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_stats(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: GraphStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_graph_stats_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_stats_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def get_graph_stats_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Get graph statistics  # noqa: E501

        Retrieves statistics for the specified graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_stats_with_http_info(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: GraphStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_graph_stats" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `get_graph_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}/stats",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GraphStats",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def ingest_document(self, body, graph_id, **kwargs):  # noqa: E501
        """Ingest a document into a graph  # noqa: E501

        Ingests a document into the specified graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingest_document(body, graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IngestDocumentRequest body: (required)
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.ingest_document_with_http_info(body, graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ingest_document_with_http_info(body, graph_id, **kwargs)  # noqa: E501
            return data

    def ingest_document_with_http_info(self, body, graph_id, **kwargs):  # noqa: E501
        """Ingest a document into a graph  # noqa: E501

        Ingests a document into the specified graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingest_document_with_http_info(body, graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IngestDocumentRequest body: (required)
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method ingest_document" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError("Missing the required parameter `body` when calling `ingest_document`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `ingest_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}/ingest",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_graphs(self, **kwargs):  # noqa: E501
        """List all graphs  # noqa: E501

        Returns all graphs associated with organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_graphs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GraphList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_graphs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_graphs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_graphs_with_http_info(self, **kwargs):  # noqa: E501
        """List all graphs  # noqa: E501

        Returns all graphs associated with organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_graphs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GraphList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method list_graphs" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GraphList",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def old_delete_all_graphs(self, **kwargs):  # noqa: E501
        """Deprecated - in favor of DELETE on root path\\  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.old_delete_all_graphs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.old_delete_all_graphs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.old_delete_all_graphs_with_http_info(**kwargs)  # noqa: E501
            return data

    def old_delete_all_graphs_with_http_info(self, **kwargs):  # noqa: E501
        """Deprecated - in favor of DELETE on root path\\  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.old_delete_all_graphs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method old_delete_all_graphs" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/delete_all",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="int",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def old_delete_graph(self, graph_id, **kwargs):  # noqa: E501
        """Deprecated - Use DELETE /graphs/{graphId} instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.old_delete_graph(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.old_delete_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.old_delete_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def old_delete_graph_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Deprecated - Use DELETE /graphs/{graphId} instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.old_delete_graph_with_http_info(graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method old_delete_graph" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `old_delete_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}/delete",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def query_graph(self, body, graph_id, **kwargs):  # noqa: E501
        """Query a graph  # noqa: E501

        Queries the specified graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_graph(body, graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryRequest body: (required)
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.query_graph_with_http_info(body, graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_graph_with_http_info(body, graph_id, **kwargs)  # noqa: E501
            return data

    def query_graph_with_http_info(self, body, graph_id, **kwargs):  # noqa: E501
        """Query a graph  # noqa: E501

        Queries the specified graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_graph_with_http_info(body, graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryRequest body: (required)
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method query_graph" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError("Missing the required parameter `body` when calling `query_graph`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `query_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}/query",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QueryResult",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_graph(self, body, graph_id, **kwargs):  # noqa: E501
        """Update a graph  # noqa: E501

        Updates the specified graph. Any field of the Graph can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_graph(body, graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Graph body: (required)
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: Graph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_graph_with_http_info(body, graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_graph_with_http_info(body, graph_id, **kwargs)  # noqa: E501
            return data

    def update_graph_with_http_info(self, body, graph_id, **kwargs):  # noqa: E501
        """Update a graph  # noqa: E501

        Updates the specified graph. Any field of the Graph can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_graph_with_http_info(body, graph_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Graph body: (required)
        :param str graph_id: Unique identifier of Graph (`Graph.uuid`) (required)
        :return: Graph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "graph_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method update_graph" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError("Missing the required parameter `body` when calling `update_graph`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if "graph_id" not in params or params["graph_id"] is None:
            raise ValueError("Missing the required parameter `graph_id` when calling `update_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "graph_id" in params:
            path_params["graphId"] = params["graph_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/graphs/{graphId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Graph",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
