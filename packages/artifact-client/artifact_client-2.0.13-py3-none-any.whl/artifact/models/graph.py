# coding: utf-8

"""
Artifact Client API

API for interacting with the Artifact Client.  # noqa: E501

OpenAPI spec version: 2.0.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
import pprint

import six


class Graph(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "created_at": "str",
        "document_ids": "object",
        "documents": "object",
        "edge_count": "int",
        "host": "str",
        "index_failure_count": "int",
        "index_interval": "str",
        "merged_graphml_url": "str",
        "name": "str",
        "node_count": "int",
        "organization_uuid": "str",
        "status": "str",
        "summarized_graphml_url": "str",
        "updated_at": "str",
        "uuid": "str",
    }

    attribute_map = {
        "created_at": "created_at",
        "document_ids": "document_ids",
        "documents": "documents",
        "edge_count": "edge_count",
        "host": "host",
        "index_failure_count": "index_failure_count",
        "index_interval": "index_interval",
        "merged_graphml_url": "merged_graphml_url",
        "name": "name",
        "node_count": "node_count",
        "organization_uuid": "organization_uuid",
        "status": "status",
        "summarized_graphml_url": "summarized_graphml_url",
        "updated_at": "updated_at",
        "uuid": "uuid",
    }

    def __init__(
        self,
        created_at=None,
        document_ids=None,
        documents=None,
        edge_count=None,
        host=None,
        index_failure_count=None,
        index_interval=None,
        merged_graphml_url=None,
        name=None,
        node_count=None,
        organization_uuid=None,
        status=None,
        summarized_graphml_url=None,
        updated_at=None,
        uuid=None,
    ):  # noqa: E501
        """Graph - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._document_ids = None
        self._documents = None
        self._edge_count = None
        self._host = None
        self._index_failure_count = None
        self._index_interval = None
        self._merged_graphml_url = None
        self._name = None
        self._node_count = None
        self._organization_uuid = None
        self._status = None
        self._summarized_graphml_url = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if document_ids is not None:
            self.document_ids = document_ids
        if documents is not None:
            self.documents = documents
        if edge_count is not None:
            self.edge_count = edge_count
        if host is not None:
            self.host = host
        if index_failure_count is not None:
            self.index_failure_count = index_failure_count
        if index_interval is not None:
            self.index_interval = index_interval
        if merged_graphml_url is not None:
            self.merged_graphml_url = merged_graphml_url
        if name is not None:
            self.name = name
        if node_count is not None:
            self.node_count = node_count
        if organization_uuid is not None:
            self.organization_uuid = organization_uuid
        if status is not None:
            self.status = status
        if summarized_graphml_url is not None:
            self.summarized_graphml_url = summarized_graphml_url
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def created_at(self):
        """Gets the created_at of this Graph.  # noqa: E501


        :return: The created_at of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Graph.


        :param created_at: The created_at of this Graph.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def document_ids(self):
        """Gets the document_ids of this Graph.  # noqa: E501


        :return: The document_ids of this Graph.  # noqa: E501
        :rtype: object
        """
        return self._document_ids

    @document_ids.setter
    def document_ids(self, document_ids):
        """Sets the document_ids of this Graph.


        :param document_ids: The document_ids of this Graph.  # noqa: E501
        :type: object
        """

        self._document_ids = document_ids

    @property
    def documents(self):
        """Gets the documents of this Graph.  # noqa: E501


        :return: The documents of this Graph.  # noqa: E501
        :rtype: object
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Graph.


        :param documents: The documents of this Graph.  # noqa: E501
        :type: object
        """

        self._documents = documents

    @property
    def edge_count(self):
        """Gets the edge_count of this Graph.  # noqa: E501


        :return: The edge_count of this Graph.  # noqa: E501
        :rtype: int
        """
        return self._edge_count

    @edge_count.setter
    def edge_count(self, edge_count):
        """Sets the edge_count of this Graph.


        :param edge_count: The edge_count of this Graph.  # noqa: E501
        :type: int
        """

        self._edge_count = edge_count

    @property
    def host(self):
        """Gets the host of this Graph.  # noqa: E501


        :return: The host of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Graph.


        :param host: The host of this Graph.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def index_failure_count(self):
        """Gets the index_failure_count of this Graph.  # noqa: E501


        :return: The index_failure_count of this Graph.  # noqa: E501
        :rtype: int
        """
        return self._index_failure_count

    @index_failure_count.setter
    def index_failure_count(self, index_failure_count):
        """Sets the index_failure_count of this Graph.


        :param index_failure_count: The index_failure_count of this Graph.  # noqa: E501
        :type: int
        """

        self._index_failure_count = index_failure_count

    @property
    def index_interval(self):
        """Gets the index_interval of this Graph.  # noqa: E501


        :return: The index_interval of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._index_interval

    @index_interval.setter
    def index_interval(self, index_interval):
        """Sets the index_interval of this Graph.


        :param index_interval: The index_interval of this Graph.  # noqa: E501
        :type: str
        """

        self._index_interval = index_interval

    @property
    def merged_graphml_url(self):
        """Gets the merged_graphml_url of this Graph.  # noqa: E501


        :return: The merged_graphml_url of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._merged_graphml_url

    @merged_graphml_url.setter
    def merged_graphml_url(self, merged_graphml_url):
        """Sets the merged_graphml_url of this Graph.


        :param merged_graphml_url: The merged_graphml_url of this Graph.  # noqa: E501
        :type: str
        """

        self._merged_graphml_url = merged_graphml_url

    @property
    def name(self):
        """Gets the name of this Graph.  # noqa: E501


        :return: The name of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Graph.


        :param name: The name of this Graph.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_count(self):
        """Gets the node_count of this Graph.  # noqa: E501


        :return: The node_count of this Graph.  # noqa: E501
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this Graph.


        :param node_count: The node_count of this Graph.  # noqa: E501
        :type: int
        """

        self._node_count = node_count

    @property
    def organization_uuid(self):
        """Gets the organization_uuid of this Graph.  # noqa: E501


        :return: The organization_uuid of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._organization_uuid

    @organization_uuid.setter
    def organization_uuid(self, organization_uuid):
        """Sets the organization_uuid of this Graph.


        :param organization_uuid: The organization_uuid of this Graph.  # noqa: E501
        :type: str
        """

        self._organization_uuid = organization_uuid

    @property
    def status(self):
        """Gets the status of this Graph.  # noqa: E501


        :return: The status of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Graph.


        :param status: The status of this Graph.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def summarized_graphml_url(self):
        """Gets the summarized_graphml_url of this Graph.  # noqa: E501


        :return: The summarized_graphml_url of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._summarized_graphml_url

    @summarized_graphml_url.setter
    def summarized_graphml_url(self, summarized_graphml_url):
        """Sets the summarized_graphml_url of this Graph.


        :param summarized_graphml_url: The summarized_graphml_url of this Graph.  # noqa: E501
        :type: str
        """

        self._summarized_graphml_url = summarized_graphml_url

    @property
    def updated_at(self):
        """Gets the updated_at of this Graph.  # noqa: E501


        :return: The updated_at of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Graph.


        :param updated_at: The updated_at of this Graph.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Graph.  # noqa: E501


        :return: The uuid of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Graph.


        :param uuid: The uuid of this Graph.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Graph, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Graph):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
