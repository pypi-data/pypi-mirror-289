# coding: utf-8

"""
Artifact Client API

API for interacting with the Artifact Client.  # noqa: E501

OpenAPI spec version: 2.0.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
import pprint

import six


class GraphStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"edge_count": "int", "last_indexed": "datetime", "node_count": "int"}

    attribute_map = {"edge_count": "edgeCount", "last_indexed": "last_indexed", "node_count": "nodeCount"}

    def __init__(self, edge_count=None, last_indexed=None, node_count=None):  # noqa: E501
        """GraphStats - a model defined in Swagger"""  # noqa: E501
        self._edge_count = None
        self._last_indexed = None
        self._node_count = None
        self.discriminator = None
        if edge_count is not None:
            self.edge_count = edge_count
        if last_indexed is not None:
            self.last_indexed = last_indexed
        if node_count is not None:
            self.node_count = node_count

    @property
    def edge_count(self):
        """Gets the edge_count of this GraphStats.  # noqa: E501


        :return: The edge_count of this GraphStats.  # noqa: E501
        :rtype: int
        """
        return self._edge_count

    @edge_count.setter
    def edge_count(self, edge_count):
        """Sets the edge_count of this GraphStats.


        :param edge_count: The edge_count of this GraphStats.  # noqa: E501
        :type: int
        """

        self._edge_count = edge_count

    @property
    def last_indexed(self):
        """Gets the last_indexed of this GraphStats.  # noqa: E501


        :return: The last_indexed of this GraphStats.  # noqa: E501
        :rtype: datetime
        """
        return self._last_indexed

    @last_indexed.setter
    def last_indexed(self, last_indexed):
        """Sets the last_indexed of this GraphStats.


        :param last_indexed: The last_indexed of this GraphStats.  # noqa: E501
        :type: datetime
        """

        self._last_indexed = last_indexed

    @property
    def node_count(self):
        """Gets the node_count of this GraphStats.  # noqa: E501


        :return: The node_count of this GraphStats.  # noqa: E501
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this GraphStats.


        :param node_count: The node_count of this GraphStats.  # noqa: E501
        :type: int
        """

        self._node_count = node_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GraphStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
