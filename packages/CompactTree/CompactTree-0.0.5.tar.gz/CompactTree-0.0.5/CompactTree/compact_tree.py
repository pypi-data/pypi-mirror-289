# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    import _compact_tree
else:
    import _compact_tree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _compact_tree.delete_SwigPyIterator

    def value(self):
        return _compact_tree.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _compact_tree.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _compact_tree.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _compact_tree.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _compact_tree.SwigPyIterator_equal(self, x)

    def copy(self):
        return _compact_tree.SwigPyIterator_copy(self)

    def next(self):
        return _compact_tree.SwigPyIterator_next(self)

    def __next__(self):
        return _compact_tree.SwigPyIterator___next__(self)

    def previous(self):
        return _compact_tree.SwigPyIterator_previous(self)

    def advance(self, n):
        return _compact_tree.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _compact_tree.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _compact_tree.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _compact_tree.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _compact_tree.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _compact_tree.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _compact_tree.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _compact_tree:
_compact_tree.SwigPyIterator_swigregister(SwigPyIterator)

class VectorUInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _compact_tree.VectorUInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _compact_tree.VectorUInt___nonzero__(self)

    def __bool__(self):
        return _compact_tree.VectorUInt___bool__(self)

    def __len__(self):
        return _compact_tree.VectorUInt___len__(self)

    def __getslice__(self, i, j):
        return _compact_tree.VectorUInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _compact_tree.VectorUInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _compact_tree.VectorUInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _compact_tree.VectorUInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _compact_tree.VectorUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _compact_tree.VectorUInt___setitem__(self, *args)

    def pop(self):
        return _compact_tree.VectorUInt_pop(self)

    def append(self, x):
        return _compact_tree.VectorUInt_append(self, x)

    def empty(self):
        return _compact_tree.VectorUInt_empty(self)

    def size(self):
        return _compact_tree.VectorUInt_size(self)

    def swap(self, v):
        return _compact_tree.VectorUInt_swap(self, v)

    def begin(self):
        return _compact_tree.VectorUInt_begin(self)

    def end(self):
        return _compact_tree.VectorUInt_end(self)

    def rbegin(self):
        return _compact_tree.VectorUInt_rbegin(self)

    def rend(self):
        return _compact_tree.VectorUInt_rend(self)

    def clear(self):
        return _compact_tree.VectorUInt_clear(self)

    def get_allocator(self):
        return _compact_tree.VectorUInt_get_allocator(self)

    def pop_back(self):
        return _compact_tree.VectorUInt_pop_back(self)

    def erase(self, *args):
        return _compact_tree.VectorUInt_erase(self, *args)

    def __init__(self, *args):
        _compact_tree.VectorUInt_swiginit(self, _compact_tree.new_VectorUInt(*args))

    def push_back(self, x):
        return _compact_tree.VectorUInt_push_back(self, x)

    def front(self):
        return _compact_tree.VectorUInt_front(self)

    def back(self):
        return _compact_tree.VectorUInt_back(self)

    def assign(self, n, x):
        return _compact_tree.VectorUInt_assign(self, n, x)

    def resize(self, *args):
        return _compact_tree.VectorUInt_resize(self, *args)

    def insert(self, *args):
        return _compact_tree.VectorUInt_insert(self, *args)

    def reserve(self, n):
        return _compact_tree.VectorUInt_reserve(self, n)

    def capacity(self):
        return _compact_tree.VectorUInt_capacity(self)
    __swig_destroy__ = _compact_tree.delete_VectorUInt

# Register VectorUInt in _compact_tree:
_compact_tree.VectorUInt_swigregister(VectorUInt)

class PairDist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _compact_tree.PairDist_swiginit(self, _compact_tree.new_PairDist(*args))
    first = property(_compact_tree.PairDist_first_get, _compact_tree.PairDist_first_set)
    second = property(_compact_tree.PairDist_second_get, _compact_tree.PairDist_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _compact_tree.delete_PairDist

# Register PairDist in _compact_tree:
_compact_tree.PairDist_swigregister(PairDist)

class VectorPairDist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _compact_tree.VectorPairDist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _compact_tree.VectorPairDist___nonzero__(self)

    def __bool__(self):
        return _compact_tree.VectorPairDist___bool__(self)

    def __len__(self):
        return _compact_tree.VectorPairDist___len__(self)

    def __getslice__(self, i, j):
        return _compact_tree.VectorPairDist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _compact_tree.VectorPairDist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _compact_tree.VectorPairDist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _compact_tree.VectorPairDist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _compact_tree.VectorPairDist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _compact_tree.VectorPairDist___setitem__(self, *args)

    def pop(self):
        return _compact_tree.VectorPairDist_pop(self)

    def append(self, x):
        return _compact_tree.VectorPairDist_append(self, x)

    def empty(self):
        return _compact_tree.VectorPairDist_empty(self)

    def size(self):
        return _compact_tree.VectorPairDist_size(self)

    def swap(self, v):
        return _compact_tree.VectorPairDist_swap(self, v)

    def begin(self):
        return _compact_tree.VectorPairDist_begin(self)

    def end(self):
        return _compact_tree.VectorPairDist_end(self)

    def rbegin(self):
        return _compact_tree.VectorPairDist_rbegin(self)

    def rend(self):
        return _compact_tree.VectorPairDist_rend(self)

    def clear(self):
        return _compact_tree.VectorPairDist_clear(self)

    def get_allocator(self):
        return _compact_tree.VectorPairDist_get_allocator(self)

    def pop_back(self):
        return _compact_tree.VectorPairDist_pop_back(self)

    def erase(self, *args):
        return _compact_tree.VectorPairDist_erase(self, *args)

    def __init__(self, *args):
        _compact_tree.VectorPairDist_swiginit(self, _compact_tree.new_VectorPairDist(*args))

    def push_back(self, x):
        return _compact_tree.VectorPairDist_push_back(self, x)

    def front(self):
        return _compact_tree.VectorPairDist_front(self)

    def back(self):
        return _compact_tree.VectorPairDist_back(self)

    def assign(self, n, x):
        return _compact_tree.VectorPairDist_assign(self, n, x)

    def resize(self, *args):
        return _compact_tree.VectorPairDist_resize(self, *args)

    def insert(self, *args):
        return _compact_tree.VectorPairDist_insert(self, *args)

    def reserve(self, n):
        return _compact_tree.VectorPairDist_reserve(self, n)

    def capacity(self):
        return _compact_tree.VectorPairDist_capacity(self)
    __swig_destroy__ = _compact_tree.delete_VectorPairDist

# Register VectorPairDist in _compact_tree:
_compact_tree.VectorPairDist_swigregister(VectorPairDist)

COMPACTTREE_VERSION = _compact_tree.COMPACTTREE_VERSION
IO_BUFFER_SIZE = _compact_tree.IO_BUFFER_SIZE
STR_BUFFER_SIZE = _compact_tree.STR_BUFFER_SIZE
class compact_tree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _compact_tree.compact_tree_swiginit(self, _compact_tree.new_compact_tree(*args))

    def add_child(self, *args):
        return _compact_tree.compact_tree_add_child(self, *args)

    def get_newick(self, *args):
        return _compact_tree.compact_tree_get_newick(self, *args)

    def get_num_nodes(self):
        return _compact_tree.compact_tree_get_num_nodes(self)

    def get_num_leaves(self):
        return _compact_tree.compact_tree_get_num_leaves(self)

    def get_num_internal(self):
        return _compact_tree.compact_tree_get_num_internal(self)

    def get_root(self):
        return _compact_tree.compact_tree_get_root(self)

    def is_root(self, node):
        return _compact_tree.compact_tree_is_root(self, node)

    def is_leaf(self, node):
        return _compact_tree.compact_tree_is_leaf(self, node)

    def get_parent(self, node):
        return _compact_tree.compact_tree_get_parent(self, node)

    def get_children(self, node):
        return _compact_tree.compact_tree_get_children(self, node)

    def has_edge_lengths(self):
        return _compact_tree.compact_tree_has_edge_lengths(self)

    def clear_edge_lengths(self, shrink=True):
        return _compact_tree.compact_tree_clear_edge_lengths(self, shrink)

    def get_edge_length(self, node):
        return _compact_tree.compact_tree_get_edge_length(self, node)

    def get_edge_lengths(self):
        return _compact_tree.compact_tree_get_edge_lengths(self)

    def set_edge_length(self, node, new_length):
        return _compact_tree.compact_tree_set_edge_length(self, node, new_length)

    def has_labels(self):
        return _compact_tree.compact_tree_has_labels(self)

    def clear_labels(self, shrink=True):
        return _compact_tree.compact_tree_clear_labels(self, shrink)

    def get_label(self, node):
        return _compact_tree.compact_tree_get_label(self, node)

    def set_label(self, node, new_label):
        return _compact_tree.compact_tree_set_label(self, node, new_label)

    def get_labels(self):
        return _compact_tree.compact_tree_get_labels(self)

    def replace_labels(self, label_map, include_internal=True):
        return _compact_tree.compact_tree_replace_labels(self, label_map, include_internal)

    def find_mrca(self, nodes):
        return _compact_tree.compact_tree_find_mrca(self, nodes)

    def extract_subtree(self, node):
        return _compact_tree.compact_tree_extract_subtree(self, node)

    def calc_total_bl(self, include_internal=True, include_leaves=True):
        return _compact_tree.compact_tree_calc_total_bl(self, include_internal, include_leaves)

    def calc_avg_bl(self, include_internal=True, include_leaves=True):
        return _compact_tree.compact_tree_calc_avg_bl(self, include_internal, include_leaves)

    def calc_dist(self, u, v):
        return _compact_tree.compact_tree_calc_dist(self, u, v)

    def calc_distance_matrix(self):
        return _compact_tree.compact_tree_calc_distance_matrix(self)
    __swig_destroy__ = _compact_tree.delete_compact_tree

# Register compact_tree in _compact_tree:
_compact_tree.compact_tree_swigregister(compact_tree)
cvar = _compact_tree.cvar
EMPTY_STRING = cvar.EMPTY_STRING
ROOT_NODE = cvar.ROOT_NODE
NULL_NODE = cvar.NULL_NODE
ZERO_LENGTH = cvar.ZERO_LENGTH
ZERO_THRESH = cvar.ZERO_THRESH
ERROR_OPENING_FILE = cvar.ERROR_OPENING_FILE
ERROR_INVALID_NEWICK_FILE = cvar.ERROR_INVALID_NEWICK_FILE
ERROR_INVALID_NEWICK_STRING = cvar.ERROR_INVALID_NEWICK_STRING


from collections import deque
def traverse_leaves(tree):
    for node in range(tree.get_num_nodes()):
        if tree.is_leaf(node):
            yield node
def traverse_levelorder(tree):
    q = deque(); q.append(0)
    while len(q) != 0:
        node = q.popleft(); yield node; q.extend(tree.get_children(node))
def traverse_postorder(tree):
    return range(tree.get_num_nodes()-1, -1, -1)
def traverse_preorder(tree):
    return range(tree.get_num_nodes())



