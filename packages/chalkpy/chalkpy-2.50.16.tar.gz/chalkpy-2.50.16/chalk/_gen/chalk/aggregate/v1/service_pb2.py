# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chalk/aggregate/v1/service.proto
# Protobuf Python Version: 4.25.3
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from chalk._gen.chalk.aggregate.v1 import (
    backfill_pb2 as chalk_dot_aggregate_dot_v1_dot_backfill__pb2,
)
from chalk._gen.chalk.aggregate.v1 import (
    timeseries_pb2 as chalk_dot_aggregate_dot_v1_dot_timeseries__pb2,
)
from chalk._gen.chalk.auth.v1 import (
    permissions_pb2 as chalk_dot_auth_dot_v1_dot_permissions__pb2,
)


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n chalk/aggregate/v1/service.proto\x12\x12\x63halk.aggregate.v1\x1a!chalk/aggregate/v1/backfill.proto\x1a#chalk/aggregate/v1/timeseries.proto\x1a\x1f\x63halk/auth/v1/permissions.proto"g\n\x1cPlanAggregateBackfillRequest\x12G\n\x06params\x18\x01 \x01(\x0b\x32/.chalk.aggregate.v1.AggregateBackfillUserParamsR\x06params"\xf4\x01\n\x1dPlanAggregateBackfillResponse\x12?\n\x06series\x18\x01 \x03(\x0b\x32\'.chalk.aggregate.v1.AggregateTimeSeriesR\x06series\x12I\n\x08\x65stimate\x18\x02 \x01(\x0b\x32-.chalk.aggregate.v1.AggregateBackfillEstimateR\x08\x65stimate\x12G\n\x06params\x18\x03 \x01(\x0b\x32/.chalk.aggregate.v1.AggregateBackfillUserParamsR\x06params"9\n\x14GetAggregatesRequest\x12!\n\x0c\x66or_features\x18\x01 \x03(\tR\x0b\x66orFeatures"^\n\x15GetAggregatesResponse\x12\x45\n\taggregate\x18\x01 \x03(\x0b\x32\'.chalk.aggregate.v1.AggregateTimeSeriesR\taggregate2\x87\x02\n\x10\x41ggregateService\x12\x84\x01\n\x15PlanAggregateBackfill\x12\x30.chalk.aggregate.v1.PlanAggregateBackfillRequest\x1a\x31.chalk.aggregate.v1.PlanAggregateBackfillResponse"\x06\x90\x02\x01\x80}\x0c\x12l\n\rGetAggregates\x12(.chalk.aggregate.v1.GetAggregatesRequest\x1a).chalk.aggregate.v1.GetAggregatesResponse"\x06\x90\x02\x01\x80}\x0b\x42\xaa\x01\n\x16\x63om.chalk.aggregate.v1B\x0cServiceProtoP\x01Z\x18\x61ggregate/v1;aggregatev1\xa2\x02\x03\x43\x41X\xaa\x02\x12\x43halk.Aggregate.V1\xca\x02\x12\x43halk\\Aggregate\\V1\xe2\x02\x1e\x43halk\\Aggregate\\V1\\GPBMetadata\xea\x02\x14\x43halk::Aggregate::V1b\x06proto3'
)

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(
    DESCRIPTOR, "chalk.aggregate.v1.service_pb2", _globals
)
if _descriptor._USE_C_DESCRIPTORS == False:
    _globals["DESCRIPTOR"]._options = None
    _globals[
        "DESCRIPTOR"
    ]._serialized_options = b"\n\026com.chalk.aggregate.v1B\014ServiceProtoP\001Z\030aggregate/v1;aggregatev1\242\002\003CAX\252\002\022Chalk.Aggregate.V1\312\002\022Chalk\\Aggregate\\V1\342\002\036Chalk\\Aggregate\\V1\\GPBMetadata\352\002\024Chalk::Aggregate::V1"
    _globals["_AGGREGATESERVICE"].methods_by_name[
        "PlanAggregateBackfill"
    ]._options = None
    _globals["_AGGREGATESERVICE"].methods_by_name[
        "PlanAggregateBackfill"
    ]._serialized_options = b"\220\002\001\200}\014"
    _globals["_AGGREGATESERVICE"].methods_by_name["GetAggregates"]._options = None
    _globals["_AGGREGATESERVICE"].methods_by_name[
        "GetAggregates"
    ]._serialized_options = b"\220\002\001\200}\013"
    _globals["_PLANAGGREGATEBACKFILLREQUEST"]._serialized_start = 161
    _globals["_PLANAGGREGATEBACKFILLREQUEST"]._serialized_end = 264
    _globals["_PLANAGGREGATEBACKFILLRESPONSE"]._serialized_start = 267
    _globals["_PLANAGGREGATEBACKFILLRESPONSE"]._serialized_end = 511
    _globals["_GETAGGREGATESREQUEST"]._serialized_start = 513
    _globals["_GETAGGREGATESREQUEST"]._serialized_end = 570
    _globals["_GETAGGREGATESRESPONSE"]._serialized_start = 572
    _globals["_GETAGGREGATESRESPONSE"]._serialized_end = 666
    _globals["_AGGREGATESERVICE"]._serialized_start = 669
    _globals["_AGGREGATESERVICE"]._serialized_end = 932
# @@protoc_insertion_point(module_scope)
